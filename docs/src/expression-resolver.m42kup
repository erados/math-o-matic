[=[;ExpressionResolver]의 동작방식]

[==[;expand0FuncallOnce(expr0)]]

funcall을 한 단계만 푼다. fun이 funcall이면 그것을 [;expand0FuncallOnce] 한다. fun이 funcall이고 fun의 fun이 funcall이면 그것을 [;expand0FuncallOnce] 한다. 등등.

[table
	변환 전 [*] 변환 후 [**]
	[$.(x \mapsto f(x))(y)] [*] [$f(y)] [**]
	[$.(x \mapsto y \mapsto f(x, y))(z)] [*] [$y \mapsto f(z, y)] [**]
	[$.(x \mapsto y \mapsto f(x, y))(z)(w)] [*] [$.(y \mapsto f(z, y))(w)] [**]
	[$`(x \mapsto y \mapsto z \mapsto f(x, y, z))(w)(v)(u)`] [*] [$`(y \mapsto z \mapsto f(w, y, z))(v)(u)`]
]

[===알고리즘]

[ol
	[*] expr0이 funcall이 아닌 경우 에러.
	[*] expr0.fun이 funcall일 경우 expr0.fun을 expand0FuncallOnce 한 expr0 반환.
	[*] expr0.fun이 본체가 없을 경우 에러.
	[*] expr0.fun의 본체에서 expr0.fun의 매개변수를 expr0의 인자로 substitute0한 것을 반환.
]

[==[;equals0(a, b)]]

두 expr0(funcall / fun / var) 표현식 a, b의 구조가 같은지를 판단한다.

[===알고리즘]

[ol
	[*] a, b가 funcall인 경우
	[ol
		[*] a.fun이 funcall일 경우 [;equals0(expand0FuncallOnce(a), b)] 반환.
		[*] b.fun이 funcall일 경우 [;equals0(a, expand0FuncallOnce(b))] 반환.
		[*] a.fun 및 b.fun이 본체가 없을 경우
		[ol
			[*] [;a.fun != b.fun]일 경우 false.
			[*] 어떤 n번째 인자 간의 equals0가 false일 경우 false.
			[*] true.
		]
		[*] a.fun의 본체가 있을 경우 [;equals0(expand0FuncallOnce(a), b)] 반환.
		[*] [;equals0(a, expand0FuncallOnce(b))] 반환.
	]
	[*] a가 funcall인 경우
	[ol
		[*] a.fun이 funcall일 경우 [;equals0(expand0FuncallOnce(a), b)] 반환.
		[*] a.fun의 본체가 없을 경우 false.
		[*] [;equals0(expand0FuncallOnce(a), b)] 반환.
	]
	[*] b가 funcall인 경우
	[ol
		[*] b.fun이 funcall일 경우 [;equals0(a, expand0FuncallOnce(b))] 반환.
		[*] b.fun의 본체가 없을 경우 false.
		[*] [;equals0(a, expand0FuncallOnce(b))] 반환.
	]
	[*] 타입이 다르면 false.
	[*] a, b가 callable 한 타입인 경우 같은 임시 변수들을 인자로 한 funcall을 만들어 이것들의 equals0을 반환.
	[*] [;a == b] 반환.
]

[==[;resolve0_(a, b, pv, iv)]]

어떤 expr0 패턴 a와 expr0 표현식 b에 대해 b로부터 a에 있는 패턴 변수들을 추정한다. b는 패턴 변수를 포함하지 않음이 가정된다. 무엇이 패턴 변수이며 무엇이 임시 변수인지에 관한 정보는 각각 pv 및 iv를 통해 제공된다.

이때 패턴 변수는 임시 변수 또는 함수 매개변수 등 내부 변수로부터 독립적이어야 한다. [;expand0FuncallOnce] 시 패턴 변수는 함수 매개변수로부터 독립적임이 가정된다. 그러므로 iv에는 임시 변수만 전달하기로 한다.

pv는 어떤 것이 패턴 변수인지와 각각이 특정되었는지 여부 및 특정되었을 경우 특정된 가능성에 관한 정보를 포함한다.

반환 값은 각각의 패턴 변수에 대하여,
[ol
	[*] 패턴 매칭이 불가능함이 유도된 경우: 에러.
	[*] 패턴 변수를 특정하지 못한 경우: falsy한 값. 불가능함을 유도할 수 없었다는 뜻이며 아무 값이나 가능하다는 뜻이 아님.
	[*] 패턴 변수가 하나 또는 유한 개로 특정될 경우: 배열. 길이가 0일 수 없음. 배열 중에 없으면 매칭이 불가능하다는 뜻이며 배열에 있는 아무 값이나 가능하다는 뜻이 아님. 패턴 변수 간의 종속성도 고려되지 않음.
]

resolve0_의 결과로서 패턴의 가능성을 얻은 경우, 이 가능성을 resolve0_에 다시 전달하면 가능성이 더 줄 수도 있다. 또한 가능성이 하나인 경우 이게 가능하다는 보증이 없으므로 확인해야 됨. 그러므로 가능성이 줄어들지 않을 때까지 resolve0_을 호출하고, 가능성이 하나가 되지 않았으면 오류를 던지고, 되었으면 그것을 반환하는 과정이 필요함.

[===알고리즘]

[ol
	[*] 타입이 다르면 에러.
	[*] a, b가 funcall인 경우
	[ol
		[*] a.fun이 funcall일 경우 [;resolve0_(expand0FuncallOnce(a), b, pv, iv)] 반환.
		[*] b.fun이 funcall일 경우 [;resolve0_(a, expand0FuncallOnce(b), pv, iv)] 반환.
		[*] a.fun이 패턴 변수일 경우
		[ol
			[*] 패턴 변수가 하나로 특정되었을 경우 a.fun을 특정된 표현식으로 바꾼 것의 resolve0_을 반환.
			[*] a의 인자가 모두 내부 변수이며 서로 다를 경우
			[ol
				[*] b가 a의 인자에 없는 임시 변수를 포함할 경우 a.fun이 내부 변수와 독립적이어야 하므로 에러.
				[*] [;;f(x, ..., z) = b]에 대해, f를 [;;`(x', ..., z') => b[x'/x, ..., z'/z]`]에 매칭하고 주어진 가능성과 교집합. 공집합이 발생하였으면 에러. [;`b[...]`]는 x를 x'으로 치환하고 ... z를 z'으로 치환한 것이다.
			]
			[*] 주어진 가능성.
		]
		[*] a.fun 및 b.fun이 본체가 없을 경우
		[ol
			[*] [;a.fun != b.fun]일 경우 에러.
			[*] 같은 pv, iv에 대해 n번째 인자 간의 resolve0_을 하여 그 교집합을 주어진 가능성과 교집합 한 것을 반환. 단 공집합이 된 경우 에러.
		]
		[*] a.fun의 본체가 있을 경우 [;resolve0_(expand0FuncallOnce(a), b, pv, iv)] 반환.
		[*] [;resolve0_(a, expand0FuncallOnce(b), pv, iv)] 반환.
	]
	[*] a가 funcall인 경우
	[ol
		[*] a.fun이 funcall일 경우 [;resolve0_(expand0FuncallOnce(a), b, pv, iv)] 반환.
		[*] a.fun이 패턴 변수일 경우
		[ol
			[*] 패턴 변수가 하나로 특정되었을 경우 a.fun을 특정된 표현식으로 바꾼 것의 resolve0_을 반환.
			[*] a의 인자가 모두 내부 변수이며 서로 다를 경우
			[ol
				[*] b가 a의 인자에 없는 임시 변수를 포함할 경우 a.fun이 내부 변수와 독립적이어야 하므로 에러.
				[*] [;;f(x, ..., z) = b]에 대해, f를 [;;`(x', ..., z') => b[x'/x, ..., z'/z]`]에 매칭하고 주어진 가능성과 교집합. 공집합이 발생하였으면 에러. [;`b[...]`]는 x를 x'으로 치환하고 ... z를 z'으로 치환한 것이다.
			]
			[*] 주어진 가능성.
		]
		[*] a.fun의 본체가 없을 경우 에러.
		[*] [;resolve0_(expand0FuncallOnce(a), b, pv, iv)] 반환.
	]
	[*] a가 패턴 변수인 경우
	[ol
		[*] 패턴 변수가 하나로 특정되었을 경우 특정된 표현식과 b의 resolve0_을 반환.
		[*] b가 a에 없는 임시 변수를 포함할 경우 a가 내부 변수와 독립적이어야 하므로 에러.
		[*] a를 b에 매칭하고 주어진 가능성과 교집합. 단 공집합이 발생하였으면 에러.
	]
	[*] b가 funcall인 경우
	[ol
		[*] b.fun이 funcall일 경우 [;resolve0_(a, expand0FuncallOnce(b), pv, iv)] 반환.
		[*] b.fun의 본체가 없을 경우 에러.
		[*] [;resolve0_(a, expand0FuncallOnce(b), pv, iv)] 반환.
	]
	[*] a, b가 callable 한 타입인 경우 같은 임시 변수들을 인자로 한 funcall을 만들어 이것들의 resolve0_을 반환하는데, iv에 이 임시 변수들을 추가하여 호출함.
	[*] [;a != b]이면 에러.
	[*] 주어진 가능성.
]

[==[;resolve1_(a, b, pv, iv)]]

resolve0_과 비슷하나 expr1을 비교한다. a는 ... 구문이나 @|- 구문 등을 사용할 수 있다. a 및 b는 rule 또는 tee여야 한다.

...의 가능성에 관한 정보도 반환해야 하겠다.

[===알고리즘]

[ol
	[*] rule인지 tee인지 여부가 다르면 에러.
	[*] a 및 b가 rule인 경우
	[ol
		[*] 입력항 타입이 다르면 에러.
		[*] 같은 임시 변수들을 인자로 한 rulecall을 만들어 이것들을 expr1 레벨에서 expand 한 것의 resolve1_을 반환하는데, iv에 이 임시 변수들을 추가하여 호출함.
	]
	[*] a 및 b가 tee인 경우
	[ol
		[*] a가 permutation을 허용하지 않을 경우
		[ol
			[*] antecedent의 개수를 일치시킬 수 없을 경우, 즉 ...이 없고 개수가 다르거나 ...이 있고 b의 개수가 작을 경우 에러.
			[*] antecedent를 순서대로 resolve0_ 하고(단 ...의 경우 b 측에 임시 변수가 있으면 에러. 아니면 주어진 가능성) consequent도 해서 교집합 반환. 단 공집합이 발생하였으면 에러.
		]
		[*] a가 permutation을 허용할 경우
		[ol
			[*] antecedent의 개수를 일치시킬 수 없을 경우, 즉 ...이 없고 개수가 다르거나 ...이 있고 b의 개수가 작을 경우 에러.
			[*] 가능한 모든 antecedent의 조합에 대하여(a, b의 ...을 제외한 antecedent의 개수 [$a], [$b]에 대하여 [${}_b\mathrm P_a]개가 있다)
			[ul
				[*] antecedent를 순서대로 resolve0_ 하고(단 ...의 경우 b 측에 임시 변수가 있으면 에러. 아니면 주어진 가능성) consequent도 해서 교집합 반환. 단 공집합이 발생하였으면 에러.
			]
			하되, 에러가 발생하였으면 catch 후 무시하고, 에러가 발생하지 않은 것들을 합집합. 단 전부 에러거나 공집합일 경우 에러.
		]
	]
]

[==[;resolve1s_(a, b, pv, iv)]]

resolve1_과 비슷하나 expr1 여러 개를 비교한다.

...1, ...2 등의 가능성에 관한 정보도 반환해야 하겠다.

[===알고리즘]

[ol
	[*] 개수가 다르면 에러.
	[*] 각각에 대해 resolve1_ 하고 교집합 반환. 단 공집합이면 에러.
]

[==[;resolve1s(a, b, pv, iv)]]

[===알고리즘]

[ol
	[*] 결과가 변하지 않음이 확인될 때까지 resolve1s_의 결과를 pv에 넣어서 resolve1s_ 호출.
	[*] 가능성이 하나가 아니면 에러.
	[*] 가능성이 작동함은 이미 검증되었으므로 매치된 값 반환.
]