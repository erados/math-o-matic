[=이론적 배경]

[**math-o-matic]은 공리계(axiomatic system)를 만들고, 그 공리계 상에서의 정리(theorem)들을 증명할 수 있도록 하는 컴퓨터 프로그램이다.

[==공리계]

[**공리계]는 보통 다음과 같은 요소로 구성되는 체계이다.

[ul
	[*] [**논리식(well-formed formula)의 문법]: 논리식은 어떤 규칙에 따라 구성된 문장을 뜻하며, 예시로는 [$1 + 1 = 3]이나 [$\sum_{k = 0}^\infty\frac{(-1)^k}{2k+1}=\frac\pi4] 등이 있다. 논리식의 문법이라는 것은 이러한 문장들을 만들어 내는 규칙을 뜻한다.

	[*] [**공리(axiom) 및 공리 스키마(axiom schema)의 집합]: [**공리]란 공리계에서 참으로 받아들이는 논리식을 뜻한다. 예를 들어 Kripke–Platek 집합론의 공리계에서 ["공집합이 존재한다]라는 문장, 즉 논리식 [$\exists x\forall y(y\notin x)]는 공리이며 [~(href=https://en.wikipedia.org/wiki/Axiom_of_empty_set)공집합 공리]라고 부른다.

	[**공리 스키마]는 비슷한 형태를 갖는 공리의 모임을 뜻하며, 예를 들어 프레게(Frege)의 공리계에서 [$p \to(q\to p)]는 공리 스키마이다. [$p \to(q\to p)]가 공리가 아니라 공리 스키마인 것은 [$p]와 [$q] 자리에 임의의 문장을 대입할 수 있기 때문이다. 예를 들어 프레게의 공리계에서 어떤 문장 [$s]에 대해 [$s\to (s\to s)]는 참이 되는데, 이는 [$p] 및 [$q]의 자리에 [$s]를 대입한 것이다. 이때 [$p] 및 [$q]를 [**메타변수](metavariable)라 하며 [$s\to (s\to s)]를 스키마의 [**인스턴스](instance)라 한다.

	[*] [**추론 규칙(inference rule)의 집합]: 어떤 공리계에서 참임을 유도할 수 있는 논리식을 [**정리](theorem)라고 정의하자. 공리계는 공리들을 참으로 받아들이므로, 우리의 정의에 따르면 공리들은 정리가 된다. 추론 규칙이란 정리들로부터 새로운 정리를 유도할 수 있도록 하는 규칙이다. 예를 들어 전건 긍정(modus ponens)은 문장 [$p] 및 [$p\to q]로부터 [$q]를 유도하는 규칙이다. 공리들이 정리에 해당하므로, 공리들에 추론 규칙을 적용하여 새로운 논리식을 유도하고, 새로운 논리식에 추론 규칙의 적용하는 과정을 반복함으로써 공리계의 정리를 늘려 갈 수 있다.
]

[>[**예시.] 예를 들어 다음과 같은 공리계를 만들어 볼 수 있다.

[ul
	[*] 문법: [$a, b, c]를 말단 기호로 하고, [$\to]를 이항연산자로 한 것.
	[*] 공리: [$a] 및 [$a\to b] 및 [$b\to c].
	[*] 추론 규칙: [$p] 및 [$p\to q]로부터 [$q]를 유도한다.
]

위의 공리계에서 [$c]를 증명할 수 있는데, 이는 [$a]와 [$a\to b]로부터 [$b]가 유도되고, [$b]와 [$b\to c]로부터 [$c]가 유도되기 때문이다. 즉 공리들로부터 시작하여 추론 규칙을 반복 적용해서 [$c]를 유도하였으므로 [$c]가 증명되었다고 보는 것이다.]

[==자연 연역(natural deduction)]

그러나 위의 공리계를 그냥 사용하는 것은 꽤 불편한데, 이는 위의 체계가 새로운 추론 규칙의 도입을 지원하지 않기 때문이다.

[>[**예시.] 이항연산자 [$\land]가 있는 어떤 공리계에 다음과 같은 추론 규칙이 있다고 하자. [$\land]는 연언(連言, conjunction), 즉 ['그리고(AND)]를 뜻하는 기호이다.

[ul
	[*] (연언 소거 1) [$p\land q]로부터 [$p]를 유도한다.
	[*] (연언 소거 2) [$p\land q]로부터 [$q]를 유도한다.
	[*] (연언 도입) [$p] 및 [$q]로부터 [$p\land q]를 유도한다.
]

이때 임의의 문장 [$a] 및 [$b]에 대해, [$a\land b]가 정리일 때 [$b\land a] 역시 정리임을 유도할 수 있는데, 이는 다음과 같이 할 수 있다.

[ol
	[*] [$a\land b]에 (연언 소거 2)을 적용하여 [$b]를 얻는다.
	[*] [$a\land b]에 (연언 소거 1)를 적용하여 [$a]를 얻는다.
	[*] [**1], [**2]의 결과에 (연언 도입)을 적용하여 [$b\land a]를 얻는다.
]

그러므로 [$p\land q]로부터 [$q\land p]를 유도하는 새로운 추론 규칙을 도입하는 것이 자연스러워 보인다. 그러나 공리계는 새로운 정리의 도입을 허용할 뿐이고, 새로운 추론 규칙의 도입을 허용하지 않으므로, [$p\land q] 형태의 정리로부터 [$q\land p]를 유도할 때마다 위의 세 과정을 거쳐야 한다.]

이러한 불편함으로 인하여 20세기 초에 새로운 추론 규칙의 도입을 가능케 하는 자연 연역(natural deduction) 체계가 개발되게 된다. 즉 [$p\land q]를 가정하였을 때 [$q\land p]가 유도되었다면, [$p\land q]로부터 [$q\land p]를 유도하는 추론 규칙을 받아들이는 식이다. 어떤 논리식을 가정하고 증명을 해내는 것을 hypothetical derivation 내지 suppositional argument 등으로 부르는 듯하나 정해진 용어는 없는 듯하다. 여기서는 [**가언적 추론](假言的推論)라 부르도록 하자. [~(href=https://stdict.korean.go.kr/search/searchView.do?word_no=3772&searchKeywordTo=3)표준국어대사전]에 있는 용어이다.

위 예시의 가언적 추론을 Fitch 표기법(Fitch notation)으로 표기하면 다음과 같다.

[;;`
1 ┃ p ∧ q        가정
  ┣━━━━━
2 ┃ q            (연언 소거 2) [1]
3 ┃ p            (연언 소거 1) [1]
4 ┃ q ∧ p        (연언 도입) [2, 3]
`]

가로줄 위가 가정이고 아래가 가정을 사용한 추론이다. 세로줄 왼쪽에 있는 것은 줄 번호(line number)이며 [;`(연언 도입) [2, 3]`]이라 쓴 것은 2번 및 3번 줄에 있는 식에 연언 도입을 적용하였다는 것이다. 자연 연역 체계에서 위와 같이 가언적 추론을 성공했다면 이후부터 [$p\land q]로부터 [$q\land p]를 유도하는 추론 규칙을 사용할 수 있다.

[==math-o-matic의 체계]

왜인지는 까먹었으나 우리 체계는 자연 연역 체계를 거듭 변형하여 이를 메타언어에 적용한다. 메타문장은 다음과 같이 재귀적으로 정의된다.

[>[**정의.] 메타문장은
[ul
	[*] 0개 이상의 메타문장의 시퀀스 [$p, q, \ldots, r] 및 메타문장 [$s]에 대해 [$p, q, \ldots, r\vdash s]이거나,
	[*] 대상언어(object language)의 문장이다.
]]

예를 들어 [$p, q, r]이 대상언어의 문장이라면 [$(\vdash r)\vdash (p, q\vdash r)]이 메타언어의 문장이다. math-o-matic 체계에서의 추론 규칙은 [$\vdash\mathrm I] 및 [$\vdash\mathrm E]의 두 개이며 각각 [$\vdash]의 도입과 소거에 관한 것이다. 다음과 같이 정해져 있다.

[table
	[~~()../assets/1.jpg] [*] [~~()../assets/2.jpg] [**]
	[$\vdash\mathrm I] 규칙[\]
	단 [$p, q, \ldots, r]은 가언적 추론 a[&ndash]d의 가정 전부이며 개수가 0이어도 된다. [*] [$\vdash\mathrm E] 규칙[\]
	단 [$p, q, \ldots, r]의 개수는 0이어도 된다.
]

위의 두 규칙으로부터 [$p, q, \ldots, r\vdash s]가 ["[$p, q, \ldots, r]로부터 [$s]를 증명할 수 있다]라는 뜻이라 생각할 수 있을 것이다. 두 규칙의 적용 예시로서 weakening의 일종인 [$(\vdash r)\vdash (p, q\vdash r)]은 임의의 공리계에서 다음과 같이 유도할 수 있다.

[;;
1 ┃ ⊦ r                    가정
  ┣━━━
2 ┃ ┃ p                   가정
3 ┃ ┃ q                   가정
  ┃ ┣━━━
4 ┃ ┃ r                   ⊦E `[1]`
5 ┃ p, q ⊦ r               ⊦I `[`2[&ndash]4`]`
6 (⊦ r) ⊦ (p, q ⊦ r)        ⊦I `[`1[&ndash]5`]`
]

우리의 체계가 힐베르트 체계(Hilbert system)나 sequent calculus 등의 다른 체계들과 어떤 관계를 갖는지는 연구되지 않았다. 힐베르트 체계에 대한 표현력은 가질 것으로 보인다.