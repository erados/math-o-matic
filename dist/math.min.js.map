{"version":3,"sources":["webpack://math/webpack/universalModuleDefinition","webpack://math/webpack/bootstrap","webpack://math/./src/nodes/Node.ts","webpack://math/./src/nodes/Fun.ts","webpack://math/./src/nodes/ObjectType.ts","webpack://math/./src/nodes/Variable.ts","webpack://math/./src/nodes/$Variable.ts","webpack://math/./src/ExpressionResolver.ts","webpack://math/./src/nodes/Metaexpr.ts","webpack://math/./src/nodes/Tee.ts","webpack://math/./src/nodes/Funcall.ts","webpack://math/./src/nodes/Schema.ts","webpack://math/./src/nodes/ObjectFun.ts","webpack://math/./src/nodes/Expr0.ts","webpack://math/./src/nodes/MetaType.ts","webpack://math/./src/nodes/Reduction.ts","webpack://math/./src/nodes/Type.ts","webpack://math/./src/nodes/Nameable.ts","webpack://math/./src/entry.js","webpack://math/./src/grammar.pegjs","webpack://math/./src/Program.ts","webpack://math/./src/Scope.ts","webpack://math/./src/StackTrace.ts","webpack://math/./node_modules/process/browser.js","webpack://math/./src/PegInterface.ts","webpack://math/./src/ProofExplorer.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","ctr","Node","scope","doc","tex","_id","toIndentedString","message","error","Error","replace","precedence","code","match","g1","hyps","length","prec","Array","console","log","my","normalizePrecedence","your","id","args","ret","shouldConsolidate","_match","PREC_FUNEXPR","PREC_COMMA","PREC_COLONEQQ","Fun","annotations","type","params","expr","map","e","some","parsed","parseTeX","super","functional","from","variable","to","isProved","ObjectType","origin","isFunctional","isBaseType","base","f","resolved","resolve","toSimpleString","join","indent","isSimple","toTeXString","equals","Variable","isParam","guess","escapeTeX","$Variable","iscall","a","makecall","fun","ExpressionResolver","substitute","arg","has","axiomatic","def$s","left","right","reduced","callee","Map","set","expandCallOnce","callee_","expandMeta","expandMetaAndFuncalls","b","recurseWrap","recurse","depth","aHasFunExpr","bHasFunExpr","every","_","placeholders","len","push","nequalscall","nequalstrue","nrecursecall","nrecursetrue","Metaexpr","obj","Tee","$","concat","repeat","expanded","Funcall","isNameable","resolvedType","paramTypes","argTypes","funcallToTeXString","Schema","_isProvedCache","cache","toTeXStringWithId","ObjectFun","makeTeX","Expr0","MetaType","Reduction","subject","guesses","leftargs","expected","forEach","derefs","tee","query","leftargTypes","lef","node","ptr","test","Type","grammar","default","Program","parser","scopeMap","filename","loader","loadModuleInternal","parse","feed","lines","line","_type","scope2","importMap","hasType","addType","hasVariable","addVariable","addFun","schema","hasSchema","addSchema","reduction","schemacall","metavar","ktx","Scope","parent","trace","typedefMap","defMap","schemaMap","$Map","hypotheses","baseType","location","child","extend","h","values","hasOwnType","broadcast","getType","filter","slice","hasOwnVariable","getVariable","hasOwnSchema","getSchema","hasOwn$","has$","get$","StackTrace","stack","process","argv","start","column","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","runClearTimeout","marker","Item","array","noop","nextTick","arguments","apply","title","browser","env","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","typeObjToString","ftype","typeObjToNestedArr","PI","parentScope","includes","tvo","tv","rettype","expr0","funcall","hypnum","Number","metaexpr","scopeRight","$v","def$","add$","g","ProofExplorer","DIAMOND","theexpr","ncols","Math","max","getHtmlLine","h1","h2","options","padding","bbb","rrb","htmlLeft","pop","exprToHtml","expand","tree","getTree","hypnumMap","num","leftarglines","leftargnums","subjectlines","subjectnum","schemalines","$lines","$num","leftlines","rightlines","html","tree2html","newleft","fill"],"mappings":"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","file":"math.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"math\"] = factory();\n\telse\n\t\troot[\"math\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","import Scope from '../Scope';\r\n\r\nvar ctr = 0;\r\n\r\nexport type Precedence = boolean | number | [number, number];\r\n\r\nexport default abstract class Node {\r\n\tpublic readonly _id: number;\r\n\r\n\tpublic readonly doc: string;\r\n\tpublic readonly tex: string;\r\n\tpublic precedence: Precedence;\r\n\r\n\tpublic static readonly PREC_FUNEXPR = 1000;\r\n\tpublic static readonly PREC_COMMA = 1000;\r\n\tpublic static readonly PREC_COLONEQQ = 100000;\r\n\r\n\tconstructor (scope: Scope, doc: string, tex: string) {\r\n\t\tthis._id = ++ctr;\r\n\t\tthis.doc = doc;\r\n\t\tthis.tex = tex;\r\n\t}\r\n\r\n\tpublic toString() {\r\n\t\treturn this.toIndentedString(0);\r\n\t}\r\n\r\n\tpublic abstract toIndentedString(indent: number, root?: boolean): string;\r\n\tpublic abstract toTeXString(prec?: Precedence, root?: boolean): string;\r\n\r\n\tpublic static error(message: string, scope: Scope) {\r\n\t\tif (scope) {\r\n\t\t\treturn scope.error(message);\r\n\t\t} else {\r\n\t\t\treturn new Error(message);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static escapeTeX(s) {\r\n\t\treturn s.replace(/&|%|\\$|#|_|{|}|~|\\^|\\\\/g, m => ({\r\n\t\t\t'&': '\\\\&', '%': '\\\\%', '$': '\\\\$',\r\n\t\t\t'#': '\\\\#', '_': '\\\\_', '{': '\\\\{',\r\n\t\t\t'}': '\\\\}',\r\n\t\t\t'~': '\\\\textasciitilde',\r\n\t\t\t'^': '\\\\textasciicircum',\r\n\t\t\t'\\\\': '\\\\textbackslash'\r\n\t\t})[m]);\r\n\t}\r\n\r\n\tpublic static parseTeX(tex) {\r\n\t\tvar precedence: Precedence = false;\r\n\r\n\t\tvar code = tex.replace(/^!<prec=([0-9]+)>/, (match, g1) => {\r\n\t\t\tprecedence = g1 * 1;\r\n\t\t\treturn '';\r\n\t\t});\r\n\r\n\t\treturn {precedence, code};\r\n\t}\r\n\r\n\tpublic isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\r\n\t\tfor (var i = 0; i < hyps.length; i++) {\r\n\t\t\tif (hyps[i] == this) return true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/*\r\n\t* false corresponds to 0.\r\n\t* true corresponds to w * 2.\r\n\t*/\r\n\tpublic static normalizePrecedence(prec: Precedence) {\r\n\t\tif (prec === false) return [0, 0];\r\n\t\tif (prec === true) return [2, 0];\r\n\t\tif (typeof prec == 'number') return [0, prec];\r\n\r\n\t\tif (!(prec instanceof Array && prec.length == 2)) {\r\n\t\t\tconsole.log(prec);\r\n\t\t\tthrow Error('wut');\r\n\t\t}\r\n\r\n\t\treturn prec;\r\n\t}\r\n\r\n\tpublic shouldConsolidate(prec: Precedence) {\r\n\t\tvar my = Node.normalizePrecedence(this.precedence || false),\r\n\t\t\tyour = Node.normalizePrecedence(prec || false);\r\n\r\n\t\tif (my[0] == 0 && my[1] == 0) return false;\r\n\r\n\t\treturn !(my[0] < your[0] || my[0] == your[0] && my[1] < your[1]);\r\n\t}\r\n\r\n\tpublic makeTeX(id, args, prec) {\r\n\t\targs = args || [];\r\n\t\tprec = prec || false;\r\n\t\t\r\n\t\tvar ret = this.tex;\r\n\r\n\t\tif (this.shouldConsolidate(prec)) {\r\n\t\t\tret = '\\\\left(' + ret + '\\\\right)';\r\n\t\t}\r\n\r\n\t\treturn ret.replace(/#([0-9]+)/g, (match, g1) => {\r\n\t\t\treturn args[g1 * 1 - 1] || `\\\\texttt{\\\\textcolor{red}{\\\\#${g1}}}`;\r\n\t\t}).replace(/<<(.+?)>>/, (_match, g1) => {\r\n\t\t\treturn `\\\\href{#${id}}{${g1}}`;\r\n\t\t});\r\n\t}\r\n}","import Expr0 from './Expr0';\r\nimport Node from './Node';\r\nimport ObjectType from './ObjectType';\r\nimport MetaType from './MetaType';\r\nimport Scope from '../Scope';\r\nimport Variable from './Variable';\r\nimport Metaexpr from './Metaexpr';\r\nimport Nameable from './Nameable';\r\nimport Type from './Type';\r\n\r\ninterface FunArgumentType {\r\n\tannotations: string[];\r\n\ttype?: Type;\r\n\tname?: string;\r\n\tparams?: Variable[];\r\n\texpr?: Metaexpr;\r\n\tdoc?: string;\r\n\ttex?: string;\r\n}\r\n\r\nexport default abstract class Fun extends Expr0 implements Nameable {\r\n\r\n\tpublic readonly annotations: string[];\r\n\tpublic readonly name: string;\r\n\tpublic readonly params: Variable[];\r\n\tpublic readonly expr: Metaexpr;\r\n\r\n\t/*\r\n\t * name, expr 중 하나 이상 있어야 하고 type, expr 중\r\n\t * 한 개만 있어야 한다.\r\n\t */\r\n\tconstructor ({doc, tex, annotations, type, /* nullable */ name, params, expr}: FunArgumentType, scope?: Scope) {\r\n\t\tif (!name && !expr)\r\n\t\t\tthrow Node.error('Anonymous fun cannot be primitive', scope);\r\n\r\n\t\tif (type && expr)\r\n\t\t\tthrow Node.error('no', scope);\r\n\r\n\t\tif (!type && !expr)\r\n\t\t\tthrow Node.error('Cannot guess the type of a primitive fun', scope);\r\n\r\n\t\tif (name !== null && typeof name != 'string')\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\r\n\t\tif (!(params instanceof Array)\r\n\t\t\t\t|| params.map(e => e instanceof Variable).some(e => !e))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\r\n\t\tif (expr !== null && !(expr instanceof Node))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\r\n\t\tvar precedence = false;\r\n\r\n\t\tif (tex) {\r\n\t\t\tvar parsed = Node.parseTeX(tex);\r\n\t\t\tprecedence = parsed.precedence;\r\n\t\t\ttex = parsed.code;\r\n\t\t} else {\r\n\t\t\ttex = null;\r\n\t\t}\r\n\t\t\r\n\t\tsuper(\r\n\t\t\tscope, doc, tex,\r\n\t\t\ttype || new (expr.type instanceof ObjectType ? ObjectType : MetaType)({\r\n\t\t\t\tfunctional: true,\r\n\t\t\t\tfrom: params.map(variable => variable.type),\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tto: expr.type\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tthis.annotations = annotations;\r\n\t\tthis.precedence = precedence;\r\n\t\tthis.name = name;\r\n\t\tthis.params = params;\r\n\t\tthis.expr = expr;\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn super.isProved(hyps)\r\n\t\t\t|| this.expr && this.expr.isProved(hyps);\r\n\t}\r\n}","import Nameable from './Nameable';\r\nimport Node from './Node';\r\nimport Type from './Type';\r\n\r\nexport default class ObjectType extends Type implements Nameable {\r\n\r\n\tpublic readonly isBaseType: boolean;\r\n\tpublic readonly name: string;\r\n\tpublic readonly origin: ObjectType;\r\n\tpublic readonly from: ObjectType[];\r\n\tpublic readonly to: ObjectType;\r\n\r\n\tconstructor (o) {\r\n\t\tif (o.origin) {\r\n\t\t\tsuper(null, o.doc, null, o.origin.isFunctional);\r\n\r\n\t\t\tthis.isBaseType = !!o.base;\r\n\r\n\t\t\tif (typeof o.name != 'string')\r\n\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\r\n\t\t\tthis.name = o.name;\r\n\r\n\t\t\tif (!(o.origin instanceof ObjectType))\r\n\t\t\t\tthrow Node.error('!(o.origin instanceof ObjectType)', null);\r\n\r\n\t\t\tthis.origin = o.origin;\r\n\t\t} else {\r\n\t\t\tsuper(null, o.doc, null, o.functional);\r\n\r\n\t\t\tthis.isBaseType = !!o.base;\r\n\r\n\t\t\tif (typeof o.functional != 'boolean')\r\n\t\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\r\n\r\n\t\t\tif (!o.functional) {\r\n\t\t\t\tif (typeof o.name != 'string')\r\n\t\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\r\n\t\t\t\tthis.name = o.name;\r\n\t\t\t} else {\r\n\t\t\t\tif (o.from.map(f => f instanceof ObjectType).some(e => !e))\r\n\t\t\t\t\tthrow Node.error('o.from.map(f => f instanceof ObjectType).some(e => !e)', null);\r\n\t\t\t\tif (!(o.to instanceof ObjectType))\r\n\t\t\t\t\tthrow Node.error('!(o.to instanceof ObjectType)', null);\r\n\r\n\t\t\t\tthis.from = o.from;\r\n\t\t\t\tthis.to = o.to;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toSimpleString() {\r\n\t\tif (this.name) return this.name;\r\n\r\n\t\tvar resolved = this.resolve();\r\n\r\n\t\treturn `[${resolved.from.map(e => e.toSimpleString()).join(', ')} -> ${resolved.to.toSimpleString()}]`;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent): string {\r\n\t\tif (this.isSimple) return this.name;\r\n\r\n\t\treturn `${this.name ? this.name + ': ' : ''}[${this.resolve().from.join(', ')} -> ${this.resolve().to}]`;\r\n\t}\r\n\r\n\tpublic toTeXString(root?: boolean) {\r\n\t\tif (this.isSimple) return `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\r\n\r\n\t\tif (!root && this.name) {\r\n\t\t\treturn `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\r\n\t\t}\r\n\r\n\t\treturn `${this.name ? `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}: ` : ''}`\r\n\t\t\t+ `\\\\left[${this.resolve().from.map(e => e.toTeXString()).join(' \\\\times ')}`\r\n\t\t\t+ ` \\\\to ${this.resolve().to.toTeXString()} \\\\right]`;\r\n\t}\r\n\r\n\tpublic resolve(): ObjectType {\r\n\t\treturn this.origin ? this.origin.resolve() : this;\r\n\t}\r\n\r\n\tpublic equals(t: Type): boolean {\r\n\t\tif (!(t instanceof ObjectType)) return false;\r\n\r\n\t\tif (this.origin) return this.origin.equals(t);\r\n\t\tif (t.origin) return this.equals(t.origin);\r\n\r\n\t\tif (this.isSimple != t.isSimple) return false;\r\n\r\n\t\tif (this.isSimple) return this === t;\r\n\r\n\t\tif (this.from.length != t.from.length) return false;\r\n\r\n\t\tfor (var i = 0; i < this.from.length; i++)\r\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\r\n\r\n\t\treturn this.to.equals(t.to);\r\n\t}\r\n}","import Scope from '../Scope';\r\nimport Expr0 from './Expr0';\r\nimport Nameable from './Nameable';\r\nimport Node, {Precedence} from './Node';\r\nimport ObjectType from './ObjectType';\r\n\r\ninterface VariableArgumentType {\r\n\tdoc?: string;\r\n\ttex?: string;\r\n\ttype: ObjectType;\r\n\tname: string;\r\n\tisParam: boolean;\r\n\tguess?: string;\r\n}\r\n\r\nexport default class Variable extends Expr0 implements Nameable {\r\n\tpublic readonly isParam: boolean;\r\n\tpublic readonly guess: string;\r\n\tpublic readonly type: ObjectType;\r\n\tpublic readonly name: string;\r\n\r\n\tconstructor ({doc, tex, type, name, isParam, guess}: VariableArgumentType, scope?: Scope) {\r\n\t\tsuper(scope, doc, tex, type);\r\n\r\n\t\tthis.isParam = !!isParam;\r\n\t\tthis.guess = guess || null;\r\n\r\n\t\tif (typeof name != 'string')\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tpublic isProved(hyps) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps);\r\n\t}\r\n\r\n\t// pr f\r\n\tpublic toSimpleString() {\r\n\t\treturn this.type.toSimpleString() + ' ' + this.name;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn `${root ? this.type + ' ' : ''}${this.name}<${this._id}>`;\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tvar id = this.isParam ? `id-${this._id}` : `def-${this.name}`;\r\n\r\n\t\tvar tex = this.tex\r\n\t\t\t|| (\r\n\t\t\t\tthis.name.length == 1\r\n\t\t\t\t\t? Node.escapeTeX(this.name)\r\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.name)}}`\r\n\t\t\t);\r\n\t\t\r\n\t\treturn `\\\\href{#${id}}{${tex}}`;\r\n\t}\r\n\r\n\tpublic toTeXStringWithId(prec?: Precedence, root?: boolean): string {\r\n\t\tif (!this.isParam) throw Error('wut');\r\n\r\n\t\tvar id =`id-${this._id}`;\r\n\r\n\t\treturn [\r\n\t\t\t`\\\\htmlId{${id}}{`,\r\n\t\t\tthis.toTeXString(prec, root),\r\n\t\t\t`}`\r\n\t\t].join('');\r\n\t}\r\n}","import Scope from \"../Scope\";\r\nimport Metaexpr from \"./Metaexpr\";\r\nimport MetaType from \"./MetaType\";\r\nimport Nameable from \"./Nameable\";\r\nimport Node, { Precedence } from \"./Node\";\r\nimport ObjectType from \"./ObjectType\";\r\n\r\ninterface $VariableArgumentType {\r\n    name: string;\r\n    expr: Metaexpr;\r\n}\r\n\r\nexport default class $Variable extends Metaexpr implements Nameable {\r\n\r\n    public readonly name: string;\r\n    public readonly expr: Metaexpr;\r\n\r\n    constructor ({name, expr}: $VariableArgumentType, scope?: Scope) {\r\n        super(scope, null, null, expr.type);\r\n\r\n        if (!name || !expr) {\r\n            throw Node.error('Assertion failed', scope);\r\n        }\r\n\r\n        this.name = name;\r\n        this.expr = expr;\r\n    }\r\n\r\n    public isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn super.isProved(hyps)\r\n\t\t\t|| this.expr.isProved(hyps);\r\n\t}\r\n\r\n    public toIndentedString(indent: number, root?: boolean): string {\r\n        return this.name;\r\n    }\r\n    \r\n    public toTeXString(prec?: Precedence, root?: boolean): string {\r\n        return `\\\\mathtt{${Node.escapeTeX(this.name)}}`;\r\n    }\r\n}","import $Variable from \"./nodes/$Variable\";\r\nimport Reduction from \"./nodes/Reduction\";\r\nimport ObjectFun from \"./nodes/ObjectFun\";\r\nimport Schema from \"./nodes/Schema\";\r\nimport Fun from \"./nodes/Fun\";\r\nimport Funcall from \"./nodes/Funcall\";\r\nimport Tee from \"./nodes/Tee\";\r\nimport Variable from \"./nodes/Variable\";\r\nimport ObjectType from \"./nodes/ObjectType\";\r\nimport Metaexpr from \"./nodes/Metaexpr\";\r\nimport Expr0 from \"./nodes/Expr0\";\r\n\r\nfunction iscall(a: Metaexpr): a is Funcall {\r\n\treturn a instanceof Funcall;\r\n}\r\n\r\nfunction makecall(a: Metaexpr, args: Expr0[]): Funcall {\r\n\tif (a instanceof Variable || a instanceof Fun) {\r\n\t\treturn new Funcall({\r\n\t\t\tfun: a,\r\n\t\t\targs\r\n\t\t});\r\n\t}\r\n\r\n\tconsole.log(a);\r\n\tthrow Error();\r\n}\r\n\r\nexport default class ExpressionResolver {\r\n\tpublic static substitute(expr: Metaexpr, map: Map<Variable | Fun, Expr0>): Metaexpr {\r\n\t\tif (expr instanceof Funcall) {\r\n\t\t\treturn new Funcall({\r\n\t\t\t\tfun: ExpressionResolver.substitute(expr.fun, map),\r\n\t\t\t\targs: expr.args.map(arg => ExpressionResolver.substitute(arg, map))\r\n\t\t\t});\r\n\t\t} else if (expr instanceof ObjectFun) {\r\n\t\t\tif (!expr.expr) return expr;\r\n\r\n\t\t\t// 이름이 있는 것은 최상단에만 선언되므로 치환되어야 할 것을 포함하지 않으므로 확인하지 않는다는 생각이 들어 있다.\r\n\t\t\tif (expr.name) return expr;\r\n\r\n\t\t\t// 위의 expr.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\r\n\t\t\tif (expr.params.some(e => map.has(e)))\r\n\t\t\t\tthrow Error('Parameter collision');\r\n\r\n\t\t\treturn new ObjectFun({\r\n\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\tname: null,\r\n\t\t\t\tparams: expr.params,\r\n\t\t\t\texpr: ExpressionResolver.substitute(expr.expr, map)\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Schema) {\r\n\t\t\tif (!expr.expr) return expr;\r\n\r\n\t\t\t// 이름이 있는 것은 최상단에만 선언되므로 치환되어야 할 것을 포함하지 않으므로 확인하지 않는다는 생각이 들어 있다.\r\n\t\t\tif (expr.name) return expr;\r\n\r\n\t\t\t// 위의 expr.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\r\n\t\t\tif (expr.params.some(e => map.has(e)))\r\n\t\t\t\tthrow Error('Parameter collision');\r\n\r\n\t\t\treturn new Schema({\r\n\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\taxiomatic: expr.axiomatic,\r\n\t\t\t\tname: null,\r\n\t\t\t\tparams: expr.params,\r\n\t\t\t\tdef$s: expr.def$s,\r\n\t\t\t\texpr: ExpressionResolver.substitute(expr.expr, map)\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Variable) {\r\n\t\t\treturn map.get(expr) || expr;\r\n\t\t} else if (expr instanceof Tee) {\r\n\t\t\tvar left = expr.left.map(e => ExpressionResolver.substitute(e, map));\r\n\t\t\tvar right = ExpressionResolver.substitute(expr.right, map);\r\n\r\n\t\t\treturn new Tee({\r\n\t\t\t\tleft, right\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Reduction) {\r\n\t\t\treturn ExpressionResolver.substitute(expr.reduced, map);\r\n\t\t} else if (expr instanceof $Variable) {\r\n\t\t\treturn ExpressionResolver.substitute(expr.expr, map);\r\n\t\t} else {\r\n\t\t\tconsole.log(expr);\r\n\t\t\tthrow Error('Unknown metaexpr');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static call(callee: Metaexpr, args: Expr0[]): Metaexpr {\r\n\t\tif (!(callee instanceof Fun)) {\r\n\t\t\tconsole.log(callee);\r\n\t\t\tthrow Error('Illegal type');\r\n\t\t}\r\n\r\n\t\tif (!callee.expr) {\r\n\t\t\tthrow Error('Cannot call a callable without a body');\r\n\t\t}\r\n\r\n\t\tif (callee.params.length != args.length) {\r\n\t\t\tthrow Error('Illegal arguments length');\r\n\t\t}\r\n\r\n\t\tvar map = new Map();\r\n\r\n\t\tfor (var i = 0; i < callee.params.length; i++) {\r\n\t\t\tmap.set(callee.params[i], args[i]);\r\n\t\t}\r\n\r\n\t\treturn ExpressionResolver.substitute(callee.expr, map);\r\n\t}\r\n\r\n\tpublic static expandCallOnce(expr: Metaexpr): Metaexpr {\r\n\t\tif (!iscall(expr)) {\r\n\t\t\tthrow Error('Illegal type');\r\n\t\t}\r\n\r\n\t\tif (iscall(expr.fun)) {\r\n\t\t\tvar fun = ExpressionResolver.expandCallOnce(expr.fun);\r\n\t\t\treturn makecall(fun, expr.args);\r\n\t\t}\r\n\r\n\t\tvar callee_: Metaexpr = expr.fun;\r\n\r\n\t\twhile (callee_ instanceof $Variable) {\r\n\t\t\tcallee_ = callee_.expr;\r\n\t\t}\r\n\r\n\t\tif (!(callee_ instanceof Fun)) {\r\n\t\t\tthrow Error('Something\\'s wrong');\r\n\t\t}\r\n\r\n\t\tif (!callee_.expr) {\r\n\t\t\tthrow Error('Could not expand');\r\n\t\t}\r\n\r\n\t\treturn ExpressionResolver.call(callee_, expr.args);\r\n\t}\r\n\r\n\t// expand0은 하지 않는다.\r\n\tpublic static expandMeta(expr: Metaexpr): Metaexpr {\r\n\t\tif (expr instanceof Tee) {\r\n\t\t\tvar left = expr.left.map(ExpressionResolver.expandMeta);\r\n\t\t\tvar right = ExpressionResolver.expandMeta(expr.right);\r\n\r\n\t\t\treturn new Tee({left, right});\r\n\t\t} else if (expr instanceof Funcall) {\r\n\t\t\tvar fun = ExpressionResolver.expandMeta(expr.fun),\r\n\t\t\t\targs = expr.args;\r\n\t\t\t\r\n\t\t\tif (!(fun instanceof Fun) || !fun.expr || fun.name && !(fun instanceof Schema))\r\n\t\t\t\treturn new Funcall({fun, args});\r\n\r\n\t\t\treturn ExpressionResolver.expandMeta(ExpressionResolver.call(fun, args));\r\n\t\t} else if (expr instanceof Reduction) {\r\n\t\t\treturn ExpressionResolver.expandMeta(expr.reduced);\r\n\t\t} else if (expr instanceof ObjectFun) {\r\n\t\t\tif (!expr.expr) return expr;\r\n\t\t\tif (expr.type instanceof ObjectType && expr.name) return expr;\r\n\r\n\t\t\treturn new ObjectFun({\r\n\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\tname: null,\r\n\t\t\t\tparams: expr.params,\r\n\t\t\t\texpr: ExpressionResolver.expandMeta(expr.expr)\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Schema) {\r\n\t\t\tif (!expr.expr) return expr;\r\n\t\t\tif (expr.type instanceof ObjectType && expr.name) return expr;\r\n\r\n\t\t\treturn new Schema({\r\n\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\taxiomatic: expr.axiomatic,\r\n\t\t\t\tname: null,\r\n\t\t\t\tparams: expr.params,\r\n\t\t\t\tdef$s: expr.def$s,\r\n\t\t\t\texpr: ExpressionResolver.expandMeta(expr.expr)\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Variable) {\r\n\t\t\treturn expr;\r\n\t\t} else if (expr instanceof $Variable) {\r\n\t\t\treturn ExpressionResolver.expandMeta(expr.expr);\r\n\t\t} else {\r\n\t\t\tconsole.log(expr);\r\n\t\t\tthrow Error('Unknown metaexpr');\r\n\t\t}\r\n\t}\r\n\r\n\t// expr0의 이름 없는 funcall까지 풀음.\r\n\tpublic static expandMetaAndFuncalls(expr: Metaexpr) {\r\n\t\tif (expr instanceof Tee) {\r\n\t\t\tvar left = expr.left.map(ExpressionResolver.expandMetaAndFuncalls);\r\n\t\t\tvar right = ExpressionResolver.expandMetaAndFuncalls(expr.right);\r\n\r\n\t\t\treturn new Tee({left, right});\r\n\t\t} else if (expr instanceof ObjectFun) {\r\n\t\t\tif (!expr.expr) return expr;\r\n\t\t\tif (expr.type instanceof ObjectType && expr.name) return expr;\r\n\r\n\t\t\treturn new ObjectFun({\r\n\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\tname: null,\r\n\t\t\t\tparams: expr.params,\r\n\t\t\t\texpr: ExpressionResolver.expandMetaAndFuncalls(expr.expr)\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Schema) {\r\n\t\t\tif (!expr.expr) return expr;\r\n\t\t\tif (expr.type instanceof ObjectType && expr.name) return expr;\r\n\r\n\t\t\treturn new Schema({\r\n\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\taxiomatic: expr.axiomatic,\r\n\t\t\t\tname: null,\r\n\t\t\t\tparams: expr.params,\r\n\t\t\t\tdef$s: expr.def$s,\r\n\t\t\t\texpr: ExpressionResolver.expandMetaAndFuncalls(expr.expr)\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Funcall) {\r\n\t\t\tvar fun = ExpressionResolver.expandMetaAndFuncalls(expr.fun);\r\n\t\t\tvar args = expr.args.map(ExpressionResolver.expandMetaAndFuncalls);\r\n\r\n\t\t\tif (!fun.expr || fun.name && !(fun instanceof Schema))\r\n\t\t\t\treturn new Funcall({fun, args});\r\n\r\n\t\t\treturn ExpressionResolver.expandMetaAndFuncalls(ExpressionResolver.call(fun, args));\r\n\t\t} else if (expr instanceof Reduction) {\r\n\t\t\treturn ExpressionResolver.expandMetaAndFuncalls(expr.reduced);\r\n\t\t} else if (expr instanceof Variable) {\r\n\t\t\treturn expr;\r\n\t\t} else if (expr instanceof $Variable) {\r\n\t\t\treturn ExpressionResolver.expandMetaAndFuncalls(expr.expr);\r\n\t\t} else {\r\n\t\t\tconsole.log(expr);\r\n\t\t\tthrow Error('Unknown metaexpr');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static nequalscall = 0;\r\n\tpublic static nequalstrue = 0;\r\n\tpublic static nrecursecall = 0;\r\n\tpublic static nrecursetrue = 0;\r\n\r\n\t/*\r\n\t * 스펙 참조.\r\n\t */\r\n\tpublic static equals(a: Metaexpr, b: Metaexpr) {\r\n\t\tfunction recurse(a: Metaexpr, b: Metaexpr, depth: number) {\r\n\t\t\tif (a == b) return true;\r\n\r\n\t\t\tif (!a.type.equals(b.type)) return false;\r\n\r\n\t\t\tif (a instanceof Reduction) {\r\n\t\t\t\treturn recurseWrap(a.reduced, b, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (b instanceof Reduction) {\r\n\t\t\t\treturn recurseWrap(a, b.reduced, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (a instanceof $Variable) {\r\n\t\t\t\treturn recurseWrap(a.expr, b, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (b instanceof $Variable) {\r\n\t\t\t\treturn recurseWrap(a, b.expr, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (iscall(a) && iscall(b)) {\r\n\t\t\t\tif (iscall(a.fun)) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\tExpressionResolver.expandCallOnce(a), b, depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (iscall(b.fun)) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\ta, ExpressionResolver.expandCallOnce(b), depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar aHasFunExpr = (a.fun instanceof Fun) && a.fun.expr,\r\n\t\t\t\t\tbHasFunExpr = (b.fun instanceof Fun) && b.fun.expr;\r\n\r\n\t\t\t\tif (a.fun == b.fun || !aHasFunExpr && !bHasFunExpr) {\r\n\t\t\t\t\tif (a.fun != b.fun) return false;\r\n\r\n\t\t\t\t\tif (!aHasFunExpr && !bHasFunExpr) {\r\n\t\t\t\t\t\tfor (var i = 0; i < a.args.length; i++) {\r\n\t\t\t\t\t\t\tif (!recurseWrap(a.args[i], b.args[i], depth + 1)) return false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (a.args.every((_, i) => {\r\n\t\t\t\t\t\treturn recurseWrap(a.args[i], (b as Funcall).args[i], depth + 1);\r\n\t\t\t\t\t})) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (aHasFunExpr) {\r\n\t\t\t\t\treturn recurseWrap(ExpressionResolver.expandCallOnce(a), b, depth + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recurseWrap(a, ExpressionResolver.expandCallOnce(b), depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (iscall(a)) {\r\n\t\t\t\tif (iscall(a.fun)) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\tExpressionResolver.expandCallOnce(a), b, depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!(a.fun instanceof Fun && a.fun.expr)) return false;\r\n\r\n\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\tExpressionResolver.expandCallOnce(a), b, depth + 1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (iscall(b)) {\r\n\t\t\t\tif (iscall(b.fun)) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\ta, ExpressionResolver.expandCallOnce(b), depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!(b.fun instanceof Fun && b.fun.expr)) return false;\r\n\r\n\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\ta, ExpressionResolver.expandCallOnce(b), depth + 1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (a instanceof Tee) {\r\n\t\t\t\tif (!(b instanceof Tee)) {\r\n\t\t\t\t\tthrow Error('Assertion failed');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (var i = 0; i < a.left.length; i++) {\r\n\t\t\t\t\tif (!recurseWrap(a.left[i], b.left[i], depth + 1)) return false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recurseWrap(a.right, b.right, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (a.type.isFunctional) {\r\n\t\t\t\tvar placeholders = [];\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tvar len = a.type.resolve().from.length;\r\n\r\n\t\t\t\tfor (var i = 0; i < len; i++) {\r\n\t\t\t\t\tplaceholders.push(new Variable({\r\n\t\t\t\t\t\tisParam: true,\r\n\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\ttype: a.type.resolve().from[i],\r\n\t\t\t\t\t\tname: '$' + i\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\tmakecall(a, placeholders), makecall(b, placeholders), depth + 1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar recurseWrap = recurse;\r\n\r\n\t\t// function recurseWrap(a, b, depth) {\r\n\t\t// \tER.nrecursecall++;\r\n\r\n\t\t// \tconsole.log(`depth ${depth}\\n${a}\\n\\n${b}`);\r\n\t\t// \tvar ret = recurse(a, b, depth);\r\n\t\t// \tconsole.log(`depth ${depth} → ${ret}`);\r\n\r\n\t\t// \tif (ret) ER.nrecursetrue++;\r\n\r\n\t\t// \treturn ret;\r\n\t\t// }\r\n\r\n\t\tExpressionResolver.nequalscall++;\r\n\t\tvar ret = recurseWrap(a, b, 0);\r\n\t\tif (ret) ExpressionResolver.nequalstrue++;\r\n\t\treturn ret;\r\n\t}\r\n}","import Scope from \"../Scope\";\r\nimport MetaType from \"./MetaType\";\r\nimport Node from \"./Node\";\r\nimport ObjectType from \"./ObjectType\";\r\nimport Type from \"./Type\";\r\n\r\nexport default abstract class Metaexpr extends Node {\r\n    public readonly type: Type;\r\n\r\n    constructor(scope: Scope, doc: string, tex: string, type: Type) {\r\n        super(scope, doc, tex);\r\n\r\n        if (!type) throw Node.error('Assertion failed', scope);\r\n\r\n        this.type = type;\r\n    }\r\n\r\n    public equals(obj: Metaexpr): boolean {\r\n        return this === obj;\r\n    }\r\n}","import Node, { Precedence } from './Node';\r\nimport MetaType from './MetaType';\r\nimport ExpressionResolver from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport $Variable from './$Variable';\r\nimport ObjectType from './ObjectType';\r\nimport Metaexpr from './Metaexpr';\r\n\r\ninterface TeeArgumentType {\r\n\tleft: Metaexpr[];\r\n\tdef$s?: $Variable[];\r\n\tright: Metaexpr;\r\n}\r\n\r\nexport default class Tee extends Metaexpr {\r\n\r\n\tpublic readonly left;\r\n\tpublic readonly def$s: $Variable[];\r\n\tpublic readonly right;\r\n\r\n\tconstructor ({left, def$s, right}: TeeArgumentType, scope?: Scope) {\r\n\t\tif (!(left instanceof Array\r\n\t\t\t\t&& left.every(l => {\r\n\t\t\t\t\treturn l.type instanceof ObjectType\r\n\t\t\t\t\t\t|| l.type instanceof MetaType;\r\n\t\t\t\t}))) {\r\n\t\t\tconsole.log(left);\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t}\r\n\r\n\t\tif (def$s && !(def$s instanceof Array && def$s.every($ => $ instanceof $Variable)))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\r\n\t\tif (!(right.type instanceof ObjectType || right.type instanceof MetaType)) {\r\n\t\t\tconsole.log(right);\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t}\r\n\r\n\t\tif (right.type.isFunctional) {\r\n\t\t\tthrow Node.error('RHS of a rule cannot be a schema', scope);\r\n\t\t}\r\n\r\n\t\tsuper(scope, null, null, new MetaType({\r\n\t\t\tfunctional: false,\r\n\t\t\tleft: left.map(e => e.type),\r\n\t\t\tright: right.type\r\n\t\t}));\r\n\r\n\t\tthis.left = left;\r\n\t\tthis.def$s = def$s || [];\r\n\t\tthis.right = right;\r\n\t\tthis.precedence = Node.PREC_COMMA;\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps) || this.right.isProved(hyps.concat(this.left));\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tif (!this.left.length) {\r\n\t\t\treturn '|- ' + this.right.toIndentedString(indent);\r\n\t\t}\r\n\t\r\n\t\treturn [\r\n\t\t\t'\\t' + this.left.map(e => e.toIndentedString(indent + 1)).join(',\\n' + '\\t'.repeat(indent + 1)),\r\n\t\t\t'|-',\r\n\t\t\t'\\t' + this.right.toIndentedString(indent + 1)\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n\t\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tvar expanded = ExpressionResolver.expandMetaAndFuncalls(this);\r\n\r\n\t\treturn [\r\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\r\n\t\t\t`{${expanded.left.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')} \\\\vdash ${expanded.right.toTeXString(Node.PREC_COMMA)}}`,\r\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\r\n\t\t].join('');\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport Variable from './Variable';\r\nimport Scope from '../Scope';\r\nimport Fun from './Fun';\r\nimport Expr0 from './Expr0';\r\nimport Metaexpr from './Metaexpr';\r\nimport { isNameable } from './Nameable';\r\nimport Schema from './Schema';\r\nimport ObjectFun from './ObjectFun';\r\n\r\ninterface FuncallArgumentType {\r\n\tfun: Metaexpr;\r\n\targs: Expr0[];\r\n}\r\n\r\nexport default class Funcall extends Expr0 {\r\n\t\r\n\tpublic readonly fun: Metaexpr;\r\n\tpublic readonly args: Expr0[];\r\n\r\n\tconstructor ({fun, args}: FuncallArgumentType, scope?: Scope) {\r\n\t\tif (fun.type.isSimple) {\r\n\t\t\tvar name = isNameable(fun) ? fun.name : '<anonymous>';\r\n\t\t\tthrow Node.error(`${name} is not callable`, scope);\r\n\t\t}\r\n\r\n\t\tif (!(args instanceof Array) || args.map(e => e instanceof Node).some(e => !e))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\t \r\n\t\tvar resolvedType = fun.type.resolve(),\r\n\t\t\t// @ts-ignore\r\n\t\t\tparamTypes = resolvedType.from,\r\n\t\t\targTypes = args.map(e => e.type);\r\n\r\n\t\tif (paramTypes.length != argTypes.length)\r\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, scope);\r\n\r\n\t\tfor (var i = 0; i < paramTypes.length; i++) {\r\n\t\t\tif (!paramTypes[i].equals(argTypes[i])) {\r\n\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, scope);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// @ts-ignore\r\n\t\tsuper(scope, null, null, resolvedType.to);\r\n\t\t\r\n\t\tthis.fun = fun;\r\n\t\tthis.args = args;\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps) || this.fun.isProved(hyps);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tvar args: any = this.args.map(arg => {\r\n\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\r\n\t\t\treturn arg.toIndentedString(indent + 1);\r\n\t\t});\r\n\t\r\n\t\tif (args.join('').length <= 50) {\r\n\t\t\targs = this.args.map(arg => {\r\n\t\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\r\n\t\t\t\treturn arg.toIndentedString(indent);\r\n\t\t\t});\r\n\t\r\n\t\t\targs = args.join(', ');\r\n\t\t\t\r\n\t\t\tif (this.fun instanceof Schema) {\r\n\t\t\t\treturn `${this.fun.name || `(${this.fun})`}(${args})`;\r\n\t\t\t} else {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t!(this.fun instanceof Fun) || !this.fun.name\r\n\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\r\n\t\t\t\t\t\t: this.fun.name,\r\n\t\t\t\t\t`(${args})`\r\n\t\t\t\t].join('');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\r\n\t\t\t\r\n\t\t\tif (this.fun instanceof Schema) {\r\n\t\t\t\treturn [\r\n\t\t\t\t\tthis.fun.name || `(${this.fun.toIndentedString(indent)})`,\r\n\t\t\t\t\t'(',\r\n\t\t\t\t\t'\\t' + args,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t\t} else {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\t!(this.fun instanceof Fun) || !('name' in this.fun && this.fun.name)\r\n\t\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\r\n\t\t\t\t\t\t\t: this.fun.name\r\n\t\t\t\t\t) + '(',\r\n\t\t\t\t\t'\\t' + args,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tif (this.fun instanceof Schema) {\r\n\t\t\treturn (\r\n\t\t\t\tthis.fun.name\r\n\t\t\t\t\t? `\\\\href{#schema-${this.fun.isProved() ? 'p' : 'np'}-${this.fun.name}}{\\\\textsf{${Node.escapeTeX(this.fun.name)}}}`\r\n\t\t\t\t\t: this.fun.toTeXString(false)\r\n\t\t\t) + `\\\\mathord{\\\\left(${this.args.map(arg => {\r\n\t\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\r\n\t\t\t}).join(', ')}\\\\right)}`;\r\n\t\t}\r\n\r\n\t\tif (this.fun instanceof ObjectFun)\r\n\t\t\treturn this.fun.funcallToTeXString(this.args, prec);\r\n\t\t\r\n\t\tvar args = this.args.map(arg => {\r\n\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t!(isNameable(this.fun) && this.fun.name) || this.fun instanceof Variable\r\n\t\t\t\t? this.fun.toTeXString(false)\r\n\t\t\t\t: this.fun.name.length == 1\r\n\t\t\t\t\t? Node.escapeTeX(this.fun.name)\r\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.fun.name)}}`\r\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\r\n\t}\r\n}","import ExpressionResolver from \"../ExpressionResolver\";\r\nimport Scope from \"../Scope\";\r\nimport $Variable from \"./$Variable\";\r\nimport Fun from \"./Fun\";\r\nimport Metaexpr from \"./Metaexpr\";\r\nimport Node, { Precedence } from \"./Node\";\r\nimport Type from \"./Type\";\r\nimport Variable from \"./Variable\";\r\n\r\ninterface SchemaArgumentType {\r\n\tannotations: string[];\r\n\taxiomatic: boolean;\r\n\ttype?: Type;\r\n\tname?: string;\r\n\tparams?: Variable[];\r\n\tdef$s: $Variable[];\r\n\texpr?: Metaexpr;\r\n\tdoc?: string;\r\n\ttex?: string;\r\n}\r\n\r\nexport default class Schema extends Fun {\r\n\r\n    public readonly axiomatic: boolean;\r\n    public readonly def$s: $Variable[];\r\n    private _isProvedCache: boolean;\r\n\r\n    constructor ({doc, tex, annotations, axiomatic, type, /* nullable */ name, params, def$s, expr}: SchemaArgumentType, scope?: Scope) {\r\n        super({doc, tex, annotations, type, name, params, expr}, scope);\r\n        \r\n        this.axiomatic = axiomatic;\r\n        this.def$s = def$s || [];\r\n    }\r\n    \r\n    public isProved(hyps?) {\r\n        if (this._isProvedCache) return true;\r\n\r\n        if (!hyps && typeof this._isProvedCache == 'boolean') {\r\n            return this._isProvedCache;\r\n        }\r\n\r\n        var cache = !hyps;\r\n\t\thyps = hyps || [];\r\n\t\t\r\n        var ret = this.axiomatic || super.isProved(hyps);\r\n        if (cache) this._isProvedCache = ret;\r\n        return ret;\r\n    }\r\n\r\n    public toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn [\r\n\t\t\t`∫ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\r\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\r\n\t\t\t'}'\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n    \r\n    public toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tif (!this.name) {\r\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\r\n\t\t\treturn [\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\r\n\r\n\t\t\t\t(\r\n\t\t\t\t\tthis.params.length == 1\r\n\t\t\t\t\t? this.params[0].toTeXString(false)\r\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\r\n\t\t\t\t),\r\n\t\t\t\t'\\\\mapsto ',\r\n\t\t\t\tExpressionResolver.expandMetaAndFuncalls(this.expr).toTeXString(false),\r\n\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\r\n\t\t\t].join('');\r\n\t\t}\r\n\t\t\r\n        var id = `schema-${this.isProved() ? 'p' : 'np'}-${this.name}`;\r\n    \r\n        if (!root)\r\n            return `\\\\href{#${id}}\\\\mathsf{${Node.escapeTeX(this.name)}}`;\r\n    \r\n        return `\\\\href{#${id}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}\\\\mathord{\\\\left(${this.params.map(e => e.toTeXStringWithId(Node.PREC_COMMA) + (e.guess ? `: \\\\texttt{@${e.guess}}` : '')).join(', ')}\\\\right)}:\\\\\\\\\\\\quad`\r\n\t\t\t\t+ ExpressionResolver.expandMetaAndFuncalls(this.expr).toTeXString(true);\r\n\t}\r\n}","import ExpressionResolver from \"../ExpressionResolver\";\r\nimport Scope from \"../Scope\";\r\nimport $Variable from \"./$Variable\";\r\nimport Fun from \"./Fun\";\r\nimport Metaexpr from \"./Metaexpr\";\r\nimport Node, { Precedence } from \"./Node\";\r\nimport Type from \"./Type\";\r\nimport Variable from \"./Variable\";\r\n\r\ninterface ObjectFunArgumentType {\r\n\tannotations: string[];\r\n\ttype?: Type;\r\n\tname?: string;\r\n\tparams?: Variable[];\r\n\texpr?: Metaexpr;\r\n\tdoc?: string;\r\n\ttex?: string;\r\n}\r\n\r\nexport default class ObjectFun extends Fun {\r\n\t\r\n\tconstructor ({doc, tex, annotations, type, /* nullable */ name, params, expr}: ObjectFunArgumentType, scope?: Scope) {\r\n\t\tsuper({doc, tex, annotations, type, name, params, expr}, scope);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn [\r\n\t\t\t`ƒ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\r\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\r\n\t\t\t'}'\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tif (!this.name) {\r\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\r\n\t\t\treturn [\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\r\n\r\n\t\t\t\t(\r\n\t\t\t\t\tthis.params.length == 1\r\n\t\t\t\t\t? this.params[0].toTeXString(false)\r\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\r\n\t\t\t\t),\r\n\t\t\t\t'\\\\mapsto ',\r\n\t\t\t\tExpressionResolver.expandMetaAndFuncalls(this.expr).toTeXString(false),\r\n\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\r\n\t\t\t].join('');\r\n\t\t}\r\n\r\n\t\tif (!root)\r\n\t\t\treturn `\\\\href{#def-${this.name}}\\\\mathrm{${Node.escapeTeX(this.name)}}`;\r\n\t\r\n\t\tif (!this.expr)\r\n\t\t\treturn this.funcallToTeXString(this.params, prec);\r\n\t\r\n\t\treturn this.funcallToTeXString(this.params, Node.PREC_COLONEQQ)\r\n\t\t\t\t+ `\\\\coloneqq ${this.expr.toTeXString(Node.PREC_COLONEQQ)}`;\r\n\t}\r\n\r\n\tpublic funcallToTeXString(args, prec) {\r\n\t\targs = args.map(arg => {\r\n\t\t\treturn arg.toTeXString(this.tex ? this.precedence : Node.PREC_COMMA);\r\n\t\t});\r\n\t\r\n\t\tif (this.tex) {\r\n\t\t\treturn this.makeTeX('def-' + this.name, args, prec);\r\n\t\t}\r\n\t\r\n\t\treturn (\r\n\t\t\t!this.name\r\n\t\t\t\t? this.toTeXString(false)\r\n\t\t\t\t: `\\\\href{#def-${this.name}}{${this.name.length == 1 ? Node.escapeTeX(this.name) : `\\\\mathrm{${Node.escapeTeX(this.name)}}`}}`\r\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\r\n\t}\r\n}","import Metaexpr from \"./Metaexpr\";\r\n\r\nexport default abstract class Expr0 extends Metaexpr {\r\n    \r\n}","import Node, { Precedence } from './Node';\r\nimport ObjectType from './ObjectType';\r\nimport Type from './Type';\r\n\r\ninterface SimpleMetaTypeArgumentType {\r\n\tfunctional: false;\r\n\tleft: Type[];\r\n\tright: Type;\r\n}\r\n\r\ninterface FunctionalMetaTypeArgumentType {\r\n\tfunctional: true;\r\n\tfrom: ObjectType[];\r\n\tto: MetaType;\r\n}\r\n\r\ntype MetaTypeArgumentType = SimpleMetaTypeArgumentType | FunctionalMetaTypeArgumentType;\r\n\r\nexport default class MetaType extends Type {\r\n\t\r\n\tpublic readonly left: Type[];\r\n\tpublic readonly right: Type;\r\n\tpublic readonly from: ObjectType[];\r\n\tpublic readonly to: MetaType;\r\n\r\n\tconstructor (o: MetaTypeArgumentType) {\r\n\t\tsuper(null, null, null, o.functional);\r\n\r\n\t\tif (typeof o.functional != 'boolean')\r\n\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\r\n\r\n\t\tif (o.functional == false) {\r\n\t\t\tif (!(o.left instanceof Array))\r\n\t\t\t\tthrow Node.error('left should be an array', null);\r\n\r\n\t\t\tthis.left = o.left;\r\n\t\t\tthis.right = o.right;\r\n\t\t} else {\r\n\t\t\tif (o.from.some(f => !(f instanceof ObjectType)))\r\n\t\t\t\tthrow Node.error('o.from.some(f => !(f instanceof ObjectType))', null);\r\n\t\t\tif (!(o.to instanceof MetaType))\r\n\t\t\t\tthrow Node.error('!(o.to instanceof MetaType)', null);\r\n\r\n\t\t\tif (o.to.isFunctional)\r\n\t\t\t\tthrow Node.error('Functional metatype in functional metatype is not supported', null);\r\n\r\n\t\t\tthis.from = o.from;\r\n\t\t\tthis.to = o.to;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic resolve(): MetaType {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number) {\r\n\t\tif (this.isSimple) return `[${this.left.join(', ')} |- ${this.right}]`;\r\n\r\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tthrow new Error('Method not implemented.');\r\n\t}\r\n\r\n\tpublic equals(t: Type): boolean {\r\n\t\tif (!(t instanceof MetaType)) return false;\r\n\r\n\t\tif (this.isSimple != t.isSimple) return false;\r\n\r\n\t\tif (this.isSimple) {\r\n\t\t\tif (this.left.length != t.left.length) return false;\r\n\r\n\t\t\tfor (let i = 0; i < this.left.length; i++) {\r\n\t\t\t\tif (!this.left[i].equals(t.left[i])) return false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.right.equals(t.right)) return false;\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (this.from.length != t.from.length) return false;\r\n\r\n\t\tfor (let i = 0; i < this.from.length; i++)\r\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\r\n\r\n\t\treturn this.to.equals(t.to);\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport Funcall from './Funcall';\r\nimport ExpressionResolver from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport Tee from './Tee';\r\nimport Fun from './Fun';\r\nimport MetaType from './MetaType';\r\nimport Metaexpr from './Metaexpr';\r\nimport Expr0 from './Expr0';\r\n\r\ninterface ReductionArgumentType {\r\n\tsubject: Metaexpr;\r\n\tguesses: Expr0[];\r\n\tleftargs: Metaexpr[];\r\n\texpected: Metaexpr;\r\n}\r\n\r\nexport default class Reduction extends Metaexpr {\r\n\tpublic readonly subject: Metaexpr;\r\n\tpublic readonly guesses;\r\n\tpublic readonly leftargs;\r\n\tpublic readonly reduced;\r\n\tpublic readonly type;\r\n\r\n\tconstructor ({subject, guesses, leftargs, expected}: ReductionArgumentType, scope?: Scope) {\r\n\t\tif (guesses) {\r\n\t\t\tlet resolvedType = subject.type.resolve(),\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tparamTypes = resolvedType.from,\r\n\t\t\t\targTypes = guesses.map(e => e && e.type);\r\n\r\n\t\t\tif (paramTypes.length != argTypes.length)\r\n\t\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, scope);\r\n\r\n\t\t\tfor (var i = 0; i < paramTypes.length; i++) {\r\n\t\t\t\tif (argTypes[i] && !paramTypes[i].equals(argTypes[i])) {\r\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, scope);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (subject instanceof Fun) {\r\n\t\t\tsubject.params.forEach((p, i) => {\r\n\t\t\t\tif (!(guesses && guesses[i]) && !p.guess) {\r\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} could not be guessed`, scope);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\r\n\t\t\tvar derefs = subject.params.map((p, i) => {\r\n\t\t\t\tif (guesses && guesses[i]) return guesses[i];\r\n\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tvar tee = ExpressionResolver.expandMeta(subject.expr) as Tee;\r\n\t\r\n\t\t\t\treturn Reduction.query(\r\n\t\t\t\t\tp.guess,\r\n\t\t\t\t\ttee.left,\r\n\t\t\t\t\tleftargs,\r\n\t\t\t\t\ttee.right,\r\n\t\t\t\t\texpected,\r\n\t\t\t\t\tscope\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\r\n\t\t\tsubject = new Funcall({\r\n\t\t\t\tfun: subject,\r\n\t\t\t\targs: derefs,\r\n\t\t\t}, scope);\r\n\t\t} else if (guesses) {\r\n\t\t\tthrow Node.error('Something\\'s wrong', scope);\r\n\t\t}\r\n\t\r\n\t\tif (!(subject.type instanceof MetaType && subject.type.isSimple))\r\n\t\t\tthrow Node.error('Subject is not reducible', scope);\r\n\t\r\n\t\tif (!(leftargs instanceof Array)\r\n\t\t\t\t|| leftargs.map(e => e instanceof Node).some(e => !e))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\r\n\t\tvar paramTypes = subject.type.left,\r\n\t\t\tleftargTypes = leftargs.map(e => e.type);\r\n\r\n\t\tif (paramTypes.length != leftargTypes.length)\r\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${leftargTypes.length}`, scope);\r\n\r\n\t\tfor (let i = 0; i < paramTypes.length; i++) {\r\n\t\t\tif (!paramTypes[i].equals(leftargTypes[i]))\r\n\t\t\t\tthrow Node.error(`Illegal argument type (expected ${paramTypes[i]}): ${leftargTypes[i]}`, scope);\r\n\t\t}\r\n\r\n\t\tsuper(scope, null, null, subject.type.right);\r\n\r\n\t\tthis.subject = subject;\r\n\t\tthis.leftargs = leftargs;\r\n\r\n\t\tvar tee = ExpressionResolver.expandMetaAndFuncalls(subject);\r\n\r\n\t\tif (!(tee instanceof Tee)) {\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < tee.left.length; i++) {\r\n\t\t\tif (!ExpressionResolver.equals(tee.left[i], leftargs[i])) {\r\n\t\t\t\tthrow Node.error(`LHS #${i + 1} failed to match:\r\n\r\n--- EXPECTED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(tee.left[i])}\r\n----------------\r\n\r\n--- RECEIVED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(leftargs[i])}\r\n----------------`, scope);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (expected) {\r\n\t\t\tif (!ExpressionResolver.equals(tee.right, expected)) {\r\n\t\t\t\tthrow Node.error(`RHS failed to match:\r\n\r\n--- EXPECTED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(tee.right)}\r\n----------------\r\n\r\n--- RECEIVED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(expected)}\r\n----------------`, scope);\r\n\t\t\t}\r\n\r\n\t\t\tthis.reduced = expected;\r\n\t\t} else {\r\n\t\t\tthis.reduced = tee.right;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn super.isProved(hyps)\r\n\t\t\t|| this.subject.isProved(hyps)\r\n\t\t\t\t&& this.leftargs.every(l => l.isProved(hyps));\r\n\t}\r\n\r\n\tpublic static query(guess, left, leftargs, right, expected, scope: Scope) {\r\n\t\tif (guess.length == 0) throw Node.error('wut', scope);\r\n\r\n\t\tvar lef, ret;\r\n\r\n\t\tif (guess[0] == 'r') {\r\n\t\t\tif (!expected) {\r\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t}\r\n\r\n\t\t\tlef = right;\r\n\t\t\tret = expected;\r\n\t\t} else {\r\n\t\t\tif (!(1 <= guess[0] * 1 && guess[0] * 1 <= leftargs.length))\r\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent index out of range`, scope);\r\n\r\n\t\t\tlef = left[guess[0] * 1 - 1];\r\n\t\t\tret = leftargs[guess[0] * 1 - 1];\r\n\t\t}\r\n\r\n\t\treturn (function recurse(guess, lef, node, ptr) {\r\n\t\t\tnode = ExpressionResolver.expandMetaAndFuncalls(node);\r\n\t\t\t\r\n\t\t\tif (guess.length <= ptr) return node;\r\n\r\n\t\t\tif (/[0-9]/.test(guess[ptr])) {\r\n\t\t\t\tvar n = guess[ptr] * 1;\r\n\r\n\t\t\t\tif (lef instanceof Tee && node instanceof Tee) {\r\n\t\t\t\t\tif (lef.left.length != node.left.length) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent length mismatch`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!(1 <= n && n <= node.left.length)) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent index out of range`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn recurse(guess, lef.left[n - 1], node.left[n - 1], ptr + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tif (!lef.fun || !node.fun) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (ExpressionResolver.equals(lef.fun, node.fun)) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!node.fun.expr) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnode = ExpressionResolver.expandCallOnce(node);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!node.args || !(1 <= n && n <= node.args.length))\r\n\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\r\n\t\t\t\treturn recurse(guess, lef.args[n - 1], node.args[n - 1], ptr + 1);\r\n\t\t\t} else if (guess[ptr] == 'r') {\r\n\t\t\t\tif (lef instanceof Tee && node instanceof Tee) {\r\n\t\t\t\t\treturn recurse(guess, lef.right, node.right, ptr + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t}\r\n\r\n\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t})(guess, lef, ret, 1);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tvar leftargs = this.leftargs.map(arg => {\r\n\t\t\treturn arg.toIndentedString(indent + 1);\r\n\t\t});\r\n\t\r\n\t\tif (leftargs.join('').length <= 50) {\r\n\t\t\tleftargs = this.leftargs.map(arg => {\r\n\t\t\t\treturn arg.toIndentedString(indent);\r\n\t\t\t});\r\n\t\r\n\t\t\tleftargs = leftargs.join(', ');\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\r\n\t\t\t\tleftargs,\r\n\t\t\t\t']'\r\n\t\t\t].join('');\r\n\t\t}\r\n\t\telse {\r\n\t\t\tleftargs = leftargs.join(',\\n' + '\\t'.repeat(indent + 1));\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\r\n\t\t\t\t'\\t' + leftargs,\r\n\t\t\t\t']'\r\n\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\treturn `${this.subject.toTeXString(false)}[${this.leftargs.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}]`;\r\n\t}\r\n}","import Scope from \"../Scope\";\r\nimport Node from \"./Node\";\r\n\r\nexport default abstract class Type extends Node {\r\n    public readonly isFunctional: boolean;\r\n    public readonly isSimple: boolean;\r\n    \r\n    public abstract equals(t: Type): boolean;\r\n\r\n    constructor (scope: Scope, doc: string, tex: string, isFunctional: boolean) {\r\n        super(scope, doc, tex);\r\n        this.isFunctional = isFunctional;\r\n        this.isSimple = !isFunctional;\r\n    }\r\n\r\n    public abstract resolve(): Type;\r\n}","export default interface Nameable {\r\n    name: string;\r\n}\r\n\r\nexport function isNameable(obj: object): obj is Nameable {\r\n    return 'name' in obj;\r\n}","var grammar;\r\n\r\nif (process.env.__webpack__) {\r\n\tgrammar = require('raw-loader!./grammar.pegjs').default;\r\n} else {\r\n\tvar fs = require('fs');\r\n\tvar path = require('path');\r\n\r\n\tgrammar = fs.readFileSync(path.join(__dirname, 'grammar.pegjs'), 'utf-8');\r\n}\r\n\r\nvar Program = require('./Program').default;\r\n\r\nmodule.exports = {grammar, Program};","export default \"start =\\r\\n\\t_ lines:(a:line _ {return a})* {return lines}\\r\\n\\r\\nline =\\r\\n\\timport\\r\\n\\t/ typedef\\r\\n\\t/ defv\\r\\n\\t/ defun\\r\\n\\t/ defschema\\r\\n\\r\\nevaluable =\\r\\n\\t_ e:evaluable_internal _ {return e}\\r\\n\\r\\nevaluable_internal =\\r\\n\\ttypedef\\r\\n\\t/ defv\\r\\n\\t/ defun\\r\\n\\t/ defschema\\r\\n\\t/ metaexpr\\r\\n\\r\\nimport =\\r\\n\\t'import' __\\r\\n\\tfilename:ident _\\r\\n\\tsem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'import',\\r\\n\\t\\t\\tfilename,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ntypedef =\\r\\n\\tdoc:(documentation __)?\\r\\n\\tbase:(\\\"base\\\" __)?\\r\\n\\t\\\"type\\\" __\\r\\n\\torigin:(o:ftype __ {return o})?\\r\\n\\tname:ident _ sem\\r\\n\\t{\\r\\n\\t\\tdoc = doc && doc[0];\\r\\n\\t\\t\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'typedef',\\r\\n\\t\\t\\tdoc,\\r\\n\\t\\t\\tbase: !!base,\\r\\n\\t\\t\\torigin,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefv =\\r\\n\\tdoc:(documentation __)? tex:(tex __)? type:type __ name:ident _ sem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefparam =\\r\\n\\ttex:(tex __)? type:type __ name:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tisParam: true,\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefschemaparam =\\r\\n\\ttex:(tex __)? type:type __ name:ident\\r\\n\\tguess:(_ ':' _ '@' g:$[a-z0-9_]+ {return g})?\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tisParam: true,\\r\\n\\t\\t\\tguess,\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n \\r\\ndefun =\\r\\n\\tdoc:(documentation __)?\\r\\n\\ttex:(tex __)?\\r\\n\\trettype:type __\\r\\n\\tname:ident _\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\texpr:(\\r\\n\\t\\t\\\"{\\\" _\\r\\n\\t\\texpr:expr0 _\\r\\n\\t\\t\\\"}\\\"\\r\\n\\t\\t{return expr}\\r\\n\\t\\t/ sem {return null}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defun',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\trettype,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefschema =\\r\\n\\tdoc:(documentation __)?\\r\\n\\tannotations: (a:annotation __ {return a})*\\r\\n\\taxiomatic:(\\\"axiomatic\\\" __)?\\r\\n\\t\\\"schema\\\" __\\r\\n\\tname:ident _\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defschemaparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defschemaparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"{\\\" _\\r\\n\\tdefdollars: (d:defdollar _ {return d})* _\\r\\n\\texpr:metaexpr _\\r\\n\\t\\\"}\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defschema',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\tannotations,\\r\\n\\t\\t\\taxiomatic: !!axiomatic,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\tdef$s: defdollars,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// var[...]\\r\\n// foo(...)[...]\\r\\n// foo[...][...]\\r\\n// (metaexpr)[...]\\r\\n// schema(?, ...)[...]\\r\\nreduction =\\r\\n\\tsubject:(\\r\\n\\t\\tschemacall\\r\\n\\t\\t/ var\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:metaexpr _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\tguesses:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:('?' {return null} / expr0) _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:('?' {return null} / expr0) _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)?\\r\\n\\tleftargs:(\\r\\n\\t\\t\\\"[\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:metaexpr _\\r\\n\\t\\t\\ttail:(\\\";\\\" _ e:metaexpr _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\"]\\\"\\r\\n\\t\\tb:(\\r\\n\\t\\t\\t_ '[' _\\r\\n\\t\\t\\t'as' __\\r\\n\\t\\t\\tm:metaexpr\\r\\n\\t\\t\\t']'\\r\\n\\t\\t\\t{return m}\\r\\n\\t\\t)?\\r\\n\\t\\t{return {a: a || [], b: b || null}}\\r\\n\\t)+\\r\\n\\t{\\r\\n\\t\\tvar ret = {\\r\\n\\t\\t\\t_type: 'reduction',\\r\\n\\t\\t\\tsubject,\\r\\n\\t\\t\\tguesses,\\r\\n\\t\\t\\tleftargs: leftargs[0].a,\\r\\n\\t\\t\\texpected: leftargs[0].b,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfor (var i = 1; i < leftargs.length; i++) {\\r\\n\\t\\t\\tret = {\\r\\n\\t\\t\\t\\t_type: 'reduction',\\r\\n\\t\\t\\t\\tsubject: ret,\\r\\n\\t\\t\\t\\tguesses: null,\\r\\n\\t\\t\\t\\tleftargs: leftargs[i].a,\\r\\n\\t\\t\\t\\texpected: leftargs[i].b,\\r\\n\\t\\t\\t\\tlocation: location()\\r\\n\\t\\t\\t};\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn ret;\\r\\n\\t}\\r\\n\\r\\n// var(...)\\r\\n// (metaexpr)(...)\\r\\nschemacall =\\r\\n\\tschema:(\\r\\n\\t\\tvar\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:metaexpr _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\targs:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:expr0 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'schemacall',\\r\\n\\t\\t\\tschema,\\r\\n\\t\\t\\targs,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// forall(f, g)\\r\\n// (expr0)(f, g)\\r\\nfuncall =\\r\\n\\tschema:(\\r\\n\\t\\tvar\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:expr0 _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\targs:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:expr0 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'funcall',\\r\\n\\t\\t\\tschema,\\r\\n\\t\\t\\targs,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// (T t) => expr0\\r\\n// (T t) => { expr0 }\\r\\nfunexpr =\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"=>\\\" _\\r\\n\\texpr:(\\r\\n\\t\\texpr0\\r\\n\\t\\t/ \\\"{\\\" _ e:expr0 _ \\\"}\\\" {return e}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'funexpr',\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// (T t) => metaexpr_internal_1\\r\\n// (T t) => { $foo = ...; metaexpr }\\r\\nschemaexpr =\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"=>\\\" _\\r\\n\\tfoo:(\\r\\n\\t\\texpr:metaexpr_internal_1\\r\\n\\t\\t{return {defdollars: [], expr}}\\r\\n\\t\\t/ \\\"{\\\" _\\r\\n\\t\\tdefdollars: (d:defdollar _ {return d})* _\\r\\n\\t\\texpr:metaexpr _\\r\\n\\t\\t\\\"}\\\"\\r\\n\\t\\t{return {defdollars, expr}}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'schemaexpr',\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\tdef$s: foo.defdollars,\\r\\n\\t\\t\\texpr: foo.expr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nmetaexpr =\\r\\n\\tleft:(\\r\\n\\t\\tl:(\\r\\n\\t\\t\\thead:metaexpr_internal_1 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:metaexpr_internal_1 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)? {return l || []}\\r\\n\\t)\\r\\n\\t\\\"|-\\\" _\\r\\n\\tdefdollars: (d:defdollar _ {return d})* _\\r\\n\\tright:metaexpr\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'tee',\\r\\n\\t\\t\\tdef$s: defdollars,\\r\\n\\t\\t\\tleft,\\r\\n\\t\\t\\tright,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/ metaexpr_internal_1\\r\\n\\r\\n/*\\r\\n * 다음이 성립하여야 한다.\\r\\n *\\r\\n * - reduction이 schemacall보다 앞이다.\\r\\n * - schemacall이 var보다 앞이다.\\r\\n *\\r\\n */\\r\\nmetaexpr_internal_1 =\\r\\n\\treduction\\r\\n\\t/ schemacall\\r\\n\\t/ var\\r\\n\\t/ schemaexpr\\r\\n\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\" {return e}\\r\\n\\r\\nexpr0 =\\r\\n\\tfuncall\\r\\n\\t/ funexpr\\r\\n\\t/ var\\r\\n\\t/ \\\"(\\\" _ e:expr0 _ \\\")\\\" {return e}\\r\\n\\r\\ndefdollar =\\r\\n\\tname:dollar_ident _\\r\\n\\t'=' _\\r\\n\\texpr:metaexpr _\\r\\n\\tsem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'def$',\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t};\\r\\n\\t}\\r\\n\\r\\ntype =\\r\\n\\tstype\\r\\n\\t/ ftype\\r\\n\\r\\nstype =\\r\\n\\tname:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'type',\\r\\n\\t\\t\\tftype: false,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nftype =\\r\\n\\t\\\"[\\\" _\\r\\n\\tfrom:(\\r\\n\\t\\ttype:type {return [type]}\\r\\n\\t\\t/ (\\r\\n\\t\\t\\ttt:(\\r\\n\\t\\t\\t\\t\\\"(\\\" _\\r\\n\\t\\t\\t\\thead: type\\r\\n\\t\\t\\t\\ttail:(_ \\\",\\\" _ t:type {return t})*\\r\\n\\t\\t\\t\\t_ \\\")\\\"\\r\\n\\t\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t\\t)\\r\\n\\t\\t\\t{return tt}\\r\\n\\t\\t)\\r\\n\\t) _\\r\\n\\t\\\"->\\\" _\\r\\n\\tto:type _\\r\\n\\t\\\"]\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'type',\\r\\n\\t\\t\\tftype: true,\\r\\n\\t\\t\\tfrom,\\r\\n\\t\\t\\tto,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nvar =\\r\\n\\tat_var\\r\\n\\t/ dollar_var\\r\\n\\t/ plain_var\\r\\n\\r\\nat_var =\\r\\n\\tname:at_ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\ttype: '@',\\r\\n\\t\\t\\tname: name.slice(1),\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndollar_var =\\r\\n\\tname:dollar_ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\ttype: '$',\\r\\n\\t\\t\\tname: name,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nplain_var =\\r\\n\\tname:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\ttype: 'normal',\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nkeyword =\\r\\n\\t\\\"as\\\"\\r\\n\\t/ \\\"axiomatic\\\"\\r\\n\\t/ \\\"base\\\"\\r\\n\\t/ \\\"import\\\"\\r\\n\\t/ \\\"schema\\\"\\r\\n\\t/ \\\"type\\\";\\r\\n\\r\\nannotation =\\r\\n\\t'@discouraged'\\r\\n\\t/ '@deprecated'\\r\\n\\r\\nident =\\r\\n\\t$(!(keyword ![a-zA-Z0-9_]) [a-zA-Z0-9_]+)\\r\\n\\r\\nat_ident =\\r\\n\\t$('@' [a-zA-Z0-9_]+)\\r\\n\\r\\ndollar_ident =\\r\\n\\t$('$' [a-zA-Z0-9_]+)\\r\\n\\r\\ndocumentation =\\r\\n\\t'\\\"' b:$(!'\\\"' a:. {return a})* '\\\"' {\\r\\n\\t\\treturn b\\r\\n\\t}\\r\\n\\r\\ntex =\\r\\n\\t'$' b:$(!'$' a:. {return a})* '$' {\\r\\n\\t\\treturn b\\r\\n\\t}\\r\\n\\r\\ncomment =\\r\\n\\t\\\"#\\\" (!newline .)*\\r\\n\\t/ \\\"//\\\" (!newline .)*\\r\\n\\t/ \\\"/*\\\" (!\\\"*/\\\" .)* \\\"*/\\\"\\r\\n\\r\\nnewline =\\r\\n\\t\\\"\\\\r\\\\n\\\" / \\\"\\\\r\\\" / \\\"\\\\n\\\"\\r\\n\\r\\n// optional whitespace\\r\\n_ =\\r\\n\\t([ \\\\t\\\\n\\\\r] / comment)*\\r\\n\\r\\n// mandatory whitespace\\r\\n__ =\\r\\n\\t([ \\\\t\\\\n\\\\r] / comment)+\\r\\n\\r\\nsem =\\r\\n\\t\\\";\\\"\";","import Scope from './Scope';\r\nimport PegInterface from './PegInterface';\r\nimport { EvaluableObject, LineObject } from './PegInterfaceDefinitions';\r\nimport ProofExplorer from './ProofExplorer';\r\n\r\nexport default class Program {\r\n\tpublic scope = new Scope(null);\r\n\tpublic readonly parser;\r\n\tpublic readonly scopeMap: Map<string, Scope> = new Map();\r\n\t\r\n\tconstructor (parser) {\r\n\t\tif (!parser) throw Error('no');\r\n\t\tthis.parser = parser;\r\n\t}\r\n\r\n\tpublic async loadModule(filename, loader): Promise<Scope> {\r\n\t\treturn this.scope = await this.loadModuleInternal(filename, loader);\r\n\t}\r\n\r\n\tprivate async loadModuleInternal(filename, loader): Promise<Scope> {\r\n\t\tif (this.scopeMap.has(filename)) {\r\n\t\t\treturn this.scopeMap.get(filename);\r\n\t\t}\r\n\r\n\t\tvar scope = new Scope(null);\r\n\r\n\t\tvar code = await loader(filename);\r\n\t\tvar parsed = this.parser.parse(code);\r\n\t\tawait this.feed(parsed, scope, loader);\r\n\r\n\t\tthis.scopeMap.set(filename, scope);\r\n\t\treturn scope;\r\n\t}\r\n\r\n\tpublic async feed(lines: LineObject[], scope: Scope=this.scope, loader) {\r\n\t\tfor (var i = 0; i < lines.length; i++) {\r\n\t\t\tvar line = lines[i];\r\n\t\t\t\r\n\t\t\tswitch (line._type) {\r\n\t\t\t\tcase 'import':\r\n\t\t\t\t\tvar scope2 = await this.loadModuleInternal(line.filename, loader);\r\n\t\t\t\t\tscope.importMap.set(line.filename, scope2);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'typedef':\r\n\t\t\t\t\tvar type = PegInterface.type(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasType(type.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Type ${type.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addType(type);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defv':\r\n\t\t\t\t\tvar variable = PegInterface.variable(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasVariable(variable.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Definition ${variable.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addVariable(variable);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defun':\r\n\t\t\t\t\tvar fun = PegInterface.fun(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasVariable(fun.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Definition ${fun.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addFun(fun);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defschema':\r\n\t\t\t\t\tvar schema = PegInterface.schema(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasSchema(schema.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Schema ${schema.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addSchema(schema);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tthrow Error(`Unknown line type ${line._type}`);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tpublic evaluate(line: EvaluableObject) {\r\n\t\tswitch (line._type) {\r\n\t\t\tcase 'typedef':\r\n\t\t\t\treturn PegInterface.type(line, this.scope);\r\n\t\t\tcase 'defv':\r\n\t\t\t\treturn PegInterface.variable(line, this.scope);\r\n\t\t\tcase 'defun':\r\n\t\t\t\treturn PegInterface.fun(line, this.scope);\r\n\t\t\tcase 'defschema':\r\n\t\t\tcase 'schemaexpr':\r\n\t\t\t\treturn PegInterface.schema(line, this.scope);\r\n\t\t\tcase 'tee':\r\n\t\t\t\treturn PegInterface.tee(line, this.scope);\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn PegInterface.reduction(line, this.scope);\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\treturn PegInterface.schemacall(line, this.scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PegInterface.metavar(line, this.scope);\r\n\t\t\tdefault:\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tthrow Error(`Unknown line type ${line._type}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getProofExplorer(name: string, ktx) {\r\n\t\treturn ProofExplorer.get(this.scope, name, ktx);\r\n\t}\r\n}","import ObjectType from './nodes/ObjectType';\r\nimport Variable from './nodes/Variable';\r\nimport Fun from './nodes/Fun';\r\nimport StackTrace from './StackTrace';\r\nimport $Variable from './nodes/$Variable';\r\nimport Metaexpr from './nodes/Metaexpr';\r\n\r\nexport type NestedTypeInput = string | NestedTypeInput[];\r\n\r\nexport default class Scope {\r\n\tpublic readonly importMap: Map<string, Scope> = new Map();\r\n\r\n\tpublic readonly typedefMap: Map<string, ObjectType> = new Map();\r\n\tpublic readonly defMap: Map<string, Variable | Fun> = new Map();\r\n\tpublic readonly schemaMap: Map<string, Fun> = new Map();\r\n\tpublic readonly $Map: Map<string, $Variable> = new Map();\r\n\tpublic readonly hypotheses: Metaexpr[] = [];\r\n\r\n\tpublic readonly parent: Scope;\r\n\tpublic readonly root: Scope;\r\n\r\n\tpublic readonly trace: StackTrace;\r\n\tpublic baseType: ObjectType;\r\n\r\n\tconstructor (parent: Scope, trace?: StackTrace) {\r\n\t\tthis.parent = parent;\r\n\t\tthis.root = parent ? parent.root : this;\r\n\r\n\t\tif (trace && !(trace instanceof StackTrace)) {\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tthis.trace = trace || new StackTrace();\r\n\r\n\t\tthis.baseType = parent ? parent.baseType : null;\r\n\t}\r\n\r\n\tpublic extend(type, name, location): Scope {\r\n\t\tvar child = new Scope(this, this.trace.extend(type, name, location));\r\n\t\tthis.hypotheses.forEach(h => child.hypotheses.push(h));\r\n\t\treturn child;\r\n\t}\r\n\r\n\tpublic error(message: string): Error {\r\n\t\treturn this.trace.error(message);\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic hasOwnType(name: NestedTypeInput): boolean {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\treturn this.typedefMap.has(name)\r\n\t\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnType(name));\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\treturn name.map(e => {\r\n\t\t\treturn this.hasOwnType(e);\r\n\t\t}).every(e => e);\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic hasType(name: NestedTypeInput): boolean {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\treturn this.hasOwnType(name)\r\n\t\t\t\t|| (!!this.parent && this.parent.hasType(name));\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\treturn name.map(e => {\r\n\t\t\treturn this.hasType(e);\r\n\t\t}).every(e => e);\r\n\t}\r\n\r\n\tpublic addType(type: ObjectType): ObjectType {\r\n\t\tif (!(type instanceof ObjectType))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (!type.name)\r\n\t\t\tthrow this.error('Something\\'s wrong');\r\n\r\n\t\tif (this.hasOwnType(type.name))\r\n\t\t\tthrow this.error(`Type ${type.name} has already been declared`);\r\n\r\n\t\tif (type.isBaseType) {\r\n\t\t\tif (this.baseType) {\r\n\t\t\t\tthrow this.error('A base type already exists');\r\n\t\t\t}\r\n\r\n\t\t\t(function broadcast(scope: Scope) {\r\n\t\t\t\tscope.baseType = type;\r\n\t\t\t\tif (scope.parent) broadcast(scope.parent);\r\n\t\t\t})(this);\r\n\t\t}\r\n\r\n\t\tthis.typedefMap.set(type.name, type);\r\n\t\treturn type;\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic getType(name: NestedTypeInput): ObjectType {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\tif (!this.hasType(name))\r\n\t\t\t\tthrow this.error(`Type ${name} is not defined`);\r\n\r\n\t\t\treturn this.typedefMap.has(name)\r\n\t\t\t\t? this.typedefMap.get(name)\r\n\t\t\t\t: (!!this.parent && this.parent.getType(name))\r\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\t\treturn s.hasType(name)\r\n\t\t\t\t\t})[0].getType(name);\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\tvar from = name.slice(0, name.length - 1).map(e => {\r\n\t\t\treturn this.getType(e);\r\n\t\t});\r\n\r\n\t\tvar to = this.getType(name[name.length - 1]);\r\n\r\n\t\treturn new ObjectType({\r\n\t\t\tfunctional: true,\r\n\t\t\tfrom,\r\n\t\t\tto\r\n\t\t});\r\n\t}\r\n\r\n\tpublic hasOwnVariable(name: string): boolean {\r\n\t\treturn this.defMap.has(name)\r\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnVariable(name));\r\n\t}\r\n\r\n\tpublic hasVariable(name: string): boolean {\r\n\t\treturn this.hasOwnVariable(name)\r\n\t\t\t|| (!!this.parent && this.parent.hasVariable(name));\r\n\t}\r\n\r\n\tpublic addVariable(variable: Variable | Fun): Variable | Fun {\r\n\t\tif (!(variable instanceof Variable))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwnVariable(variable.name))\r\n\t\t\tthrow this.error(`Definition ${variable.name} has already been declared`);\r\n\r\n\t\tthis.defMap.set(variable.name, variable);\r\n\t\treturn variable;\r\n\t}\r\n\r\n\tpublic addFun(fun: Fun): Fun {\r\n\t\tif (!(fun instanceof Fun))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (!fun.name)\r\n\t\t\tthrow this.error('Cannot add anonymous fun to scope');\r\n\r\n\t\tif (this.hasOwnVariable(fun.name))\r\n\t\t\tthrow this.error(`Definition ${fun.name} has already been declared`);\r\n\r\n\t\tthis.defMap.set(fun.name, fun);\r\n\t\treturn fun;\r\n\t}\r\n\r\n\tpublic getVariable(name: string): Variable | Fun {\r\n\t\tif (!this.hasVariable(name))\r\n\t\t\tthrow this.error(`Definition ${name} is not defined`);\r\n\r\n\t\treturn this.defMap.has(name)\r\n\t\t\t? this.defMap.get(name)\r\n\t\t\t: (!!this.parent && this.parent.getVariable(name))\r\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\treturn s.hasVariable(name)\r\n\t\t\t\t})[0].getVariable(name);\r\n\t}\r\n\r\n\tpublic hasOwnSchema(name: string): boolean {\r\n\t\treturn this.schemaMap.has(name) || this.defMap.has(name)\r\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnSchema(name));\r\n\t}\r\n\r\n\tpublic hasSchema(name: string): boolean {\r\n\t\treturn this.hasOwnSchema(name)\r\n\t\t\t|| (!!this.parent && this.parent.hasSchema(name));\r\n\t}\r\n\r\n\tpublic addSchema(schema: Fun): Fun {\r\n\t\tif (!(schema instanceof Fun))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwnSchema(schema.name))\r\n\t\t\tthrow this.error(`Schema ${schema.name} has already been declared`);\r\n\r\n\t\tthis.schemaMap.set(schema.name, schema);\r\n\t\treturn schema;\r\n\t}\r\n\r\n\tpublic getSchema(name: string): Variable | Fun {\r\n\t\tif (!this.hasSchema(name))\r\n\t\t\tthrow this.error(`Schema ${name} is not defined`);\r\n\r\n\t\treturn this.schemaMap.has(name)\r\n\t\t\t? this.schemaMap.get(name)\r\n\t\t\t: this.defMap.has(name)\r\n\t\t\t\t? this.defMap.get(name)\r\n\t\t\t\t: (!!this.parent && this.parent.getSchema(name))\r\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\t\treturn s.hasSchema(name)\r\n\t\t\t\t\t})[0].getSchema(name);\r\n\t}\r\n\r\n\tpublic hasOwn$(name: string): boolean {\r\n\t\treturn this.$Map.has(name)\r\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwn$(name));\r\n\t}\r\n\r\n\tpublic has$(name: string): boolean {\r\n\t\treturn this.hasOwn$(name)\r\n\t\t\t|| (!!this.parent && this.parent.has$(name));\r\n\t}\r\n\r\n\tpublic add$($: $Variable): $Variable {\r\n\t\tif (!($ instanceof $Variable))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwn$($.name))\r\n\t\t\tthrow this.error(`$ variable ${$.name} has already been declared`);\r\n\r\n\t\tthis.$Map.set($.name, $);\r\n\t\treturn $;\r\n\t}\r\n\r\n\tpublic get$(name: string): $Variable {\r\n\t\tif (!this.has$(name))\r\n\t\t\tthrow this.error(`$ variable ${name} is not defined`);\r\n\r\n\t\treturn this.$Map.has(name)\r\n\t\t\t? this.$Map.get(name)\r\n\t\t\t: (!!this.parent && this.parent.get$(name))\r\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\treturn s.has$(name)\r\n\t\t\t\t})[0].get$(name);\r\n\t}\r\n}","export default class StackTrace {\r\n\tpublic readonly stack: any[];\r\n\r\n\tconstructor (stack?: any[]) {\r\n\t\tthis.stack = stack || [];\r\n\t}\r\n\r\n\tpublic extend(type, name, location): StackTrace {\r\n\t\treturn new StackTrace([[type, name, location]].concat(this.stack));\r\n\t}\r\n\r\n\tpublic error(message: string) {\r\n\t\tvar filename = typeof process != 'undefined' && process.argv[2];\r\n\r\n\t\treturn new Error(\r\n\t\t\tmessage\r\n\t\t\t+ '\\n\\tat '\r\n\t\t\t+ (\r\n\t\t\t\tthis.stack.length\r\n\t\t\t\t\t? this.stack.map(([type, name, location]) => {\r\n\t\t\t\t\t\treturn `${type} ${name || '<anonymous>'} (${filename || '<unknown>'}:${location.start.line}:${location.start.column})`;\r\n\t\t\t\t\t}).join('\\n\\tat ')\r\n\t\t\t\t\t: `<root> (${filename || '<unknown>'}:1:1)`\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*\r\n * PEG.js의 출력과 적절한 클래스 사이를 잇는 인터페이스.\r\n * PEG.js의 출력은 여기에서만 처리해야 한다.\r\n */\r\n\r\nimport ObjectType from './nodes/ObjectType';\r\nimport Variable from './nodes/Variable';\r\nimport Tee from './nodes/Tee';\r\nimport Fun from './nodes/Fun';\r\nimport Funcall from './nodes/Funcall';\r\nimport Reduction from './nodes/Reduction';\r\nimport { Def$Object, DefschemaObject, DefunObject, DefvObject, Expr0Object, FuncallObject, FunexprObject, MetaexprObject, ReductionObject, SchemacallObject, SchemaexprObject, StypeObject, TeeObject, TypedefObject, TypeObject, VarObject } from './PegInterfaceDefinitions';\r\nimport Scope, { NestedTypeInput } from './Scope';\r\nimport $Variable from './nodes/$Variable';\r\nimport Metaexpr from './nodes/Metaexpr';\r\nimport Expr0 from './nodes/Expr0';\r\nimport Schema from './nodes/Schema';\r\nimport ObjectFun from './nodes/ObjectFun';\r\n\r\nfunction typeObjToString(obj: TypeObject): string {\r\n\tif (obj._type != 'type')\r\n\t\tthrow Error('Assertion failed');\r\n\r\n\tif (!obj.ftype) return (obj as StypeObject).name;\r\n\treturn '[' + obj.from.map(typeObjToString).join(', ') + ' -> '\r\n\t\t\t+ typeObjToString(obj.to) + ']';\r\n}\r\n\r\n/*\r\n * Scope#getType이나 Scope#hasType 등의 입력 형태로 바꾼다.\r\n * st\t\t\t\t\t\t-> 'st'\r\n * [cls -> st]\t\t\t\t-> ['cls', 'st']\r\n * [(cls, cls) -> st]\t\t-> ['cls', 'cls', 'st']\r\n * [[cls -> st] -> st]\t\t-> [['cls', 'st'], 'st']\r\n */\r\nfunction typeObjToNestedArr(obj: TypeObject): NestedTypeInput {\r\n\tif (obj._type != 'type')\r\n\t\tthrow Error('Assertion failed');\r\n\r\n\tif (!obj.ftype) {\r\n\t\tobj = obj as StypeObject;\r\n\r\n\t\tif (!obj.name)\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\treturn obj.name;\r\n\t} else {\r\n\t\tif (!obj.from || !obj.to)\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\treturn obj.from.map(typeObjToNestedArr).concat(\r\n\t\t\t[typeObjToNestedArr(obj.to)]\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction varObjToString(obj: VarObject): string {\r\n\tswitch (obj.type) {\r\n\t\tcase '@':\r\n\t\t\treturn `@${obj.name}`;\r\n\t\tcase '$':\r\n\t\t\treturn `${obj.name}`;\r\n\t\tcase 'normal':\r\n\t\t\treturn `${obj.name}`;\r\n\t\tdefault:\r\n\t\t\tthrow Error(`Unknown type ${obj.type}`);\r\n\t}\r\n}\r\n\r\nexport default class PI {\r\n\tpublic static type(obj: TypedefObject, parentScope: Scope): ObjectType {\r\n\t\tif (obj._type != 'typedef')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope: Scope = parentScope.extend('type', obj.name, obj.location);\r\n\r\n\t\tvar origin: ObjectType = obj.origin ? scope.getType(typeObjToNestedArr(obj.origin)) : null;\r\n\r\n\t\tvar name: string = obj.name;\r\n\t\tvar doc: string = obj.doc;\r\n\t\tvar base: boolean = obj.base;\r\n\r\n\t\tif (base && origin) {\r\n\t\t\tthrow scope.error('Base type should not be an alias');\r\n\t\t}\r\n\r\n\t\tif (origin) {\r\n\t\t\treturn new ObjectType({\r\n\t\t\t\tname,\r\n\t\t\t\tdoc,\r\n\t\t\t\tbase,\r\n\t\t\t\torigin\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn new ObjectType({\r\n\t\t\tfunctional: false,\r\n\t\t\tname,\r\n\t\t\tdoc,\r\n\t\t\tbase\r\n\t\t});\r\n\t}\r\n\r\n\tpublic static variable(obj: DefvObject | VarObject, parentScope: Scope): Variable | Fun {\r\n\t\tif (!['defv', 'var'].includes(obj._type)) {\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('variable', obj.name, obj.location);\r\n\r\n\t\tif (obj._type == 'var') {\r\n\t\t\tif (obj.type != 'normal') {\r\n\t\t\t\tthrow scope.error(`Variable type ${obj.type} not allowed`);\r\n\t\t\t}\r\n\r\n\t\t\tif (!scope.hasVariable(obj.name))\r\n\t\t\t\tthrow scope.error(`Undefined identifier ${obj.name}`);\r\n\t\t\treturn scope.getVariable(obj.name);\r\n\t\t}\r\n\r\n\t\tif (!scope.hasType(typeObjToNestedArr(obj.type)))\r\n\t\t\tthrow scope.error(`Type ${typeObjToString(obj.type)} is not defined`);\r\n\r\n\t\tvar type = scope.getType(typeObjToNestedArr(obj.type));\r\n\r\n\t\treturn new Variable({\r\n\t\t\ttype,\r\n\t\t\tisParam: !!obj.isParam,\r\n\t\t\tguess: obj.guess || null,\r\n\t\t\tname: obj.name,\r\n\t\t\tdoc: obj.doc,\r\n\t\t\ttex: obj.tex\r\n\t\t}, scope);\r\n\t}\r\n\r\n\tpublic static fun(obj: DefunObject | FunexprObject, parentScope: Scope): Fun {\r\n\t\tif (obj._type != 'defun' && obj._type != 'funexpr')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar name = null,\r\n\t\t\tdoc = null,\r\n\t\t\ttex = null;\r\n\r\n\t\tif (obj._type == 'defun') {\r\n\t\t\tobj = obj as DefunObject;\r\n\t\t\tname = obj.name;\r\n\t\t\tdoc = obj.doc;\r\n\t\t\ttex = obj.tex;\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('fun', name, obj.location);\r\n\r\n\t\tvar type = null;\r\n\t\tvar params = obj.params.map(tvo => {\r\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\r\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\r\n\r\n\t\t\tvar tv = PI.variable(tvo, scope);\r\n\r\n\t\t\tif (scope.hasOwnVariable(tv.name))\r\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\r\n\r\n\t\t\treturn scope.addVariable(tv) as Variable;\r\n\t\t});\r\n\t\tvar expr = null;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'defun':\r\n\t\t\t\tif (!scope.hasType(typeObjToNestedArr(obj.rettype)))\r\n\t\t\t\t\tthrow scope.error(`Type ${typeObjToString(obj.rettype)} is not defined`);\r\n\r\n\t\t\t\tvar rettype = scope.getType(typeObjToNestedArr(obj.rettype));\r\n\r\n\t\t\t\tif (obj.expr) {\r\n\t\t\t\t\texpr = PI.expr0(obj.expr, scope);\r\n\t\t\t\t\tif (!rettype.equals(expr.type))\r\n\t\t\t\t\t\tthrow scope.error(`Expression type ${expr.type} failed to match the return type ${rettype} of fun ${name}`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttype = new ObjectType({\r\n\t\t\t\t\t\tfunctional: true,\r\n\t\t\t\t\t\tfrom: params.map(variable => variable.type),\r\n\t\t\t\t\t\tto: rettype\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'funexpr':\r\n\t\t\t\texpr = PI.expr0(obj.expr, scope);\r\n\t\t\t\ttype = null;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\r\n\t\treturn new ObjectFun({annotations: [], name, type, params, expr, doc, tex}, scope);\r\n\t}\r\n\r\n\tpublic static funcall(obj: FuncallObject, parentScope: Scope): Funcall {\r\n\t\tif (obj._type != 'funcall')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('funcall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\r\n\r\n\t\tvar fun = PI.expr0(obj.schema, scope);\r\n\r\n\t\tvar args = obj.args.map(arg => {\r\n\t\t\treturn PI.expr0(arg, scope);\r\n\t\t});\r\n\r\n\t\treturn new Funcall({fun, args}, scope);\r\n\t}\r\n\r\n\tpublic static metaexpr(obj: MetaexprObject, parentScope: Scope): Metaexpr {\r\n\t\tif (!['tee', 'reduction', 'schemacall', 'schemaexpr', 'var'].includes(obj._type))\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'tee':\r\n\t\t\t\treturn PI.tee(obj, scope);\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn PI.reduction(obj, scope);\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\treturn PI.schemacall(obj, scope);\r\n\t\t\tcase 'schemaexpr':\r\n\t\t\t\treturn PI.schema(obj, scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PI.metavar(obj, scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static expr0(obj: Expr0Object, parentScope: Scope): Expr0 {\r\n\t\tif (!['funcall', 'funexpr', 'var'].includes(obj._type)) {\r\n\t\t\tconsole.log(obj);\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'funcall':\r\n\t\t\t\treturn PI.funcall(obj, scope);\r\n\t\t\tcase 'funexpr':\r\n\t\t\t\treturn PI.fun(obj, scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PI.variable(obj, scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static metavar(obj: VarObject, parentScope: Scope): Metaexpr {\r\n\t\tif (obj._type != 'var')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj.type) {\r\n\t\t\tcase '@':\r\n\t\t\t\tif (obj.name.match(/^h[0-9]+$/)) {\r\n\t\t\t\t\tvar hypnum = Number(obj.name.slice(1)) - 1;\r\n\t\t\t\t\tif (hypnum >= scope.hypotheses.length) {\r\n\t\t\t\t\t\tthrow scope.error(`Hypothesis #${hypnum + 1} not found`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn scope.hypotheses[hypnum];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow scope.error(`Unknown selector query @${obj.name}`);\r\n\t\t\tcase '$':\r\n\t\t\t\tif (!scope.has$(obj.name)) {\r\n\t\t\t\t\tthrow scope.error(`${obj.name} is not defined`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn scope.get$(obj.name);\r\n\t\t\tcase 'normal':\r\n\t\t\t\tif (!scope.hasSchema(obj.name))\r\n\t\t\t\t\tthrow scope.error(`Schema ${obj.name} is not defined`);\r\n\r\n\t\t\t\treturn scope.getSchema(obj.name);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow scope.error(`Unknown type ${obj.type}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static tee(obj: TeeObject, parentScope: Scope): Tee {\r\n\t\tif (obj._type != 'tee')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('tee', null, obj.location);\r\n\r\n\t\tvar left = obj.left.map(o => PI.metaexpr(o, scope));\r\n\r\n\t\tvar scopeRight = scope.extend('tee.right', null, obj.right.location);\r\n\t\tleft.forEach(l => scopeRight.hypotheses.push(l));\r\n\r\n\t\tvar def$s = obj.def$s.map($ => {\r\n\t\t\tvar $v = PI.def$($, scopeRight);\r\n\r\n\t\t\tif (scopeRight.hasOwn$($v.name)) {\r\n\t\t\t\tthrow scopeRight.error(`${$.name} has already been declared`);\r\n\t\t\t}\r\n\r\n\t\t\treturn scopeRight.add$($v);\r\n\t\t});\r\n\r\n\t\tvar right = PI.metaexpr(obj.right, scopeRight);\r\n\r\n\t\treturn new Tee({left, def$s, right}, scope);\r\n\t}\r\n\r\n\tpublic static def$(obj: Def$Object, parentScope: Scope): $Variable {\r\n\t\tif (obj._type != 'def$')\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t\r\n\t\tvar scope = parentScope.extend('def$', obj.name, obj.location);\r\n\t\t\r\n\t\tvar expr = PI.metaexpr(obj.expr, scope);\r\n\r\n\t\treturn new $Variable({name: obj.name, expr}, scope);\r\n\t}\r\n\r\n\tpublic static schema(obj: DefschemaObject | SchemaexprObject, parentScope: Scope): Fun {\r\n\t\tif (obj._type != 'defschema' && obj._type != 'schemaexpr')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar name: string = null,\r\n\t\t\taxiomatic: boolean = false,\r\n\t\t\tdoc: string = null,\r\n\t\t\tannotations: string[] = [];\r\n\r\n\t\tif (obj._type == 'defschema') {\r\n\t\t\tname = obj.name; axiomatic = obj.axiomatic;\r\n\t\t\tdoc = obj.doc; annotations = obj.annotations;\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('schema', name, obj.location);\r\n\r\n\t\tvar params = obj.params.map(tvo => {\r\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\r\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\r\n\r\n\t\t\tvar tv = PI.variable(tvo, scope);\r\n\r\n\t\t\tif (scope.hasOwnVariable(tv.name))\r\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\r\n\t\t\t\r\n\t\t\treturn scope.addVariable(tv) as Variable;\r\n\t\t});\r\n\r\n\t\tvar def$s = obj.def$s.map($ => {\r\n\t\t\tvar $v = PI.def$($, scope);\r\n\r\n\t\t\tif (scope.hasOwn$($v.name)) {\r\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\r\n\t\t\t}\r\n\r\n\t\t\treturn scope.add$($v);\r\n\t\t});\r\n\r\n\t\tvar expr = PI.metaexpr(obj.expr, scope);\r\n\r\n\t\treturn new Schema({doc, annotations, axiomatic, name, params, def$s, expr}, scope);\r\n\t}\r\n\r\n\tpublic static schemacall(obj: SchemacallObject, parentScope: Scope): Funcall {\r\n\t\tif (obj._type != 'schemacall')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('schemacall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\r\n\r\n\t\tvar fun = PI.metaexpr(obj.schema, scope);\r\n\r\n\t\tvar args = obj.args.map(obj => {\r\n\t\t\treturn PI.expr0(obj, scope);\r\n\t\t});\r\n\r\n\t\treturn new Funcall({\r\n\t\t\tfun,\r\n\t\t\targs\r\n\t\t}, scope);\r\n\t}\r\n\r\n\tpublic static reduction(obj: ReductionObject, parentScope: Scope): Reduction {\r\n\t\tif (obj._type != 'reduction')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('reduction', 'name' in obj.subject ? obj.subject.name : null, obj.location);\r\n\r\n\t\tvar subject = PI.metaexpr(obj.subject, scope);\r\n\r\n\t\tvar guesses = !obj.guesses\r\n\t\t\t? null\r\n\t\t\t: obj.guesses.map(g => {\r\n\t\t\t\treturn g && PI.expr0(g, scope);\r\n\t\t\t});\r\n\r\n\t\tvar leftargs = obj.leftargs.map(obj => {\r\n\t\t\treturn PI.metaexpr(obj, scope);\r\n\t\t});\r\n\r\n\t\tvar expected = obj.expected && PI.metaexpr(obj.expected, scope);\r\n\r\n\t\treturn new Reduction({\r\n\t\t\tsubject,\r\n\t\t\tguesses,\r\n\t\t\tleftargs,\r\n\t\t\texpected\r\n\t\t}, scope);\r\n\t}\r\n}","import ExpressionResolver from \"./ExpressionResolver\";\r\nimport $Variable from \"./nodes/$Variable\";\r\nimport Fun from \"./nodes/Fun\";\r\nimport Funcall from \"./nodes/Funcall\";\r\nimport Metaexpr from \"./nodes/Metaexpr\";\r\nimport { isNameable } from \"./nodes/Nameable\";\r\nimport ObjectFun from \"./nodes/ObjectFun\";\r\nimport Reduction from \"./nodes/Reduction\";\r\nimport Schema from \"./nodes/Schema\";\r\nimport Tee from \"./nodes/Tee\";\r\nimport Variable from \"./nodes/Variable\";\r\nimport Scope from \"./Scope\";\r\n\r\nexport default class ProofExplorer {\r\n    public static get(scope: Scope, name: string, ktx) {\t\r\n\t\tvar DIAMOND = '&#x25C7;',\r\n\t\t\tDOWN = '&#x25BC;',\r\n\t\t\tUP = '&#x25B2;';\r\n\t\t\r\n\t\tif (!scope.hasSchema(name)) {\r\n\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t\r\n\t\tvar theexpr = scope.getSchema(name);\r\n\t\r\n\t\tvar ncols = (function recurse(expr: Metaexpr) {\r\n\t\t\tif (expr instanceof Reduction) {\r\n\t\t\t\treturn Math.max(\r\n\t\t\t\t\t...expr.leftargs.map(recurse),\r\n\t\t\t\t\t((expr.subject instanceof Fun && expr.subject.name)\r\n\t\t\t\t\t\t|| (expr.subject instanceof Funcall\r\n\t\t\t\t\t\t\t\t&& isNameable(expr.subject.fun)\r\n\t\t\t\t\t\t\t\t&& expr.subject.fun.name)\r\n\t\t\t\t\t\t\t? 0 : recurse(expr.subject)),\r\n\t\t\t\t\t1\r\n\t\t\t\t);\r\n\t\t\t} else if (expr instanceof Schema) {\r\n\t\t\t\treturn Math.max(\r\n\t\t\t\t\t...expr.def$s.map($ => recurse($.expr)),\r\n\t\t\t\t\trecurse(expr.expr)\r\n\t\t\t\t) + 1;\r\n\t\t\t} else if (expr instanceof ObjectFun) {\r\n\t\t\t\treturn recurse(expr.expr) + 1;\r\n\t\t\t} else if (expr instanceof Tee) {\r\n\t\t\t\treturn Math.max(\r\n\t\t\t\t\t...expr.left.map(recurse),\r\n\t\t\t\t\t...expr.def$s.map($ => recurse($.expr)),\r\n\t\t\t\t\trecurse(expr.right)\r\n\t\t\t\t) + 1;\r\n\t\t\t} else {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t})(theexpr);\r\n\r\n\t\tfunction getHtmlLine(ctr: string | number, left: any[], h1: string, h2: string | string[], options?) {\r\n\t\t\tvar padding = left.length;\r\n\r\n\t\t\tvar {bbb=false, rrb=false} = options || {};\r\n\t\r\n\t\t\tvar htmlLeft = left.map((e, i, a) => `<td class=\"${rrb && i == a.length - 1 ? 'rrb' : 'brb'}\">${e.map(f => ktx(f.toTeXStringWithId(true))).join(', ')}</td>`).join('');\r\n\r\n\t\t\tfor (var i = 0; i < left.length; i++)\r\n\t\t\t\twhile(left[i].length) left[i].pop();\r\n\t\r\n\t\t\treturn `<tr><th>${ctr}</th>${htmlLeft}<td ${bbb ? 'class=\"bbb\" ' : ''}colspan=\"${ncols-padding}\">${h1}</td>${h2 instanceof Array ? h2.map(e => `<td>${e}</td>`).join('') : `<td colspan=\"2\">${h2}</td>`}</tr>`;\r\n\t\t}\r\n\r\n\t\tfunction exprToHtml(expr, expand?) {\r\n\t\t\tif (typeof expr == 'number') return `<b>${expr}</b>`;\r\n\t\t\tif (expr instanceof Array) return `<b>${expr[0]}&ndash;${expr[1]}</b>`;\r\n\t\t\tif (expand) return ktx(ExpressionResolver.expandMetaAndFuncalls(expr).toTeXString(true));\r\n\t\t\t\r\n\t\t\treturn ktx(expr.toTeXString(true));\r\n\t\t}\r\n\r\n\t\tvar ctr = 0;\r\n\r\n\t\tvar tree = (function getTree(\r\n\t\t\t\texpr: Metaexpr,\r\n\t\t\t\thypnumMap: Map<Metaexpr, number>,\r\n\t\t\t\t$Map: Map<Metaexpr, number>) {\r\n\t\t\t\r\n\t\t\tif (hypnumMap.has(expr)) {\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'R',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\tnum: hypnumMap.get(expr),\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t}\r\n\r\n\t\t\tif ($Map.has(expr)) {\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'R',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\tnum: $Map.get(expr),\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t}\r\n\r\n\t\t\tif (expr instanceof Reduction) {\r\n\t\t\t\tvar leftarglines = [];\r\n\t\t\t\tvar leftargnums = expr.leftargs.map(l => {\r\n\t\t\t\t\tif (hypnumMap.has(l)) return hypnumMap.get(l);\r\n\t\t\t\t\tif ($Map.has(l)) return $Map.get(l);\r\n\r\n\t\t\t\t\tvar lines = getTree(l, hypnumMap, $Map);\r\n\t\t\t\t\tleftarglines = leftarglines.concat(lines);\r\n\t\t\t\t\treturn lines[lines.length - 1].ctr;\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar args = null;\r\n\t\t\t\tvar subjectlines = [];\r\n\t\t\t\tvar subjectnum = hypnumMap.get(expr.subject)\r\n\t\t\t\t\t|| $Map.get(expr.subject)\r\n\t\t\t\t\t|| (expr.subject instanceof Funcall && $Map.has(expr.subject.fun)\r\n\t\t\t\t\t\t? (args = expr.subject.args, $Map.get(expr.subject.fun))\r\n\t\t\t\t\t\t: false)\r\n\t\t\t\t\t|| ((s => s instanceof Fun && s.name\r\n\t\t\t\t\t\t\t|| s instanceof Funcall && isNameable(s.fun) && s.fun.name)(expr.subject)\r\n\t\t\t\t\t\t? expr.subject\r\n\t\t\t\t\t\t: (subjectlines = getTree(expr.subject, hypnumMap, $Map))[subjectlines.length-1].ctr);\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\t...leftarglines,\r\n\t\t\t\t\t...subjectlines,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_type: 'E',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tsubject: subjectnum,\r\n\t\t\t\t\t\targs,\r\n\t\t\t\t\t\tleftargs: leftargnums,\r\n\t\t\t\t\t\treduced: expr.reduced\r\n\t\t\t\t\t}\r\n\t\t\t\t];\r\n\t\t\t} else if (expr instanceof Funcall) {\r\n\t\t\t\tif (hypnumMap.has(expr.fun)) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RC',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tschema: hypnumMap.get(expr.fun),\r\n\t\t\t\t\t\targs: expr.args,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($Map.has(expr.fun)) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RC',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tschema: $Map.get(expr.fun),\r\n\t\t\t\t\t\targs: expr.args,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (expr.fun instanceof Schema && expr.fun.name) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RCX',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!(expr.fun instanceof Schema)) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'NP',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar schemalines = getTree(expr.fun, hypnumMap, $Map);\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\t...schemalines,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_type: 'RC',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tschema: schemalines[schemalines.length - 1].ctr,\r\n\t\t\t\t\t\targs: expr.args,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}\r\n\t\t\t\t];\r\n\t\t\t} else if (expr instanceof Variable) {\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'NP',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t} else if (expr instanceof Fun) {\r\n\t\t\t\tif (expr instanceof Schema && expr.name && expr != theexpr) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RS',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!expr.expr) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'NP',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$Map = new Map($Map);\r\n\r\n\t\t\t\tvar start = ctr + 1;\r\n\r\n\t\t\t\tvar $lines = [];\r\n\t\t\t\t\r\n\t\t\t\tif (expr instanceof Schema) {\r\n\t\t\t\t\texpr.def$s.forEach($ => {\r\n\t\t\t\t\t\tvar lines = getTree($.expr, hypnumMap, $Map);\r\n\t\t\t\t\t\t$lines = $lines.concat(lines);\r\n\r\n\t\t\t\t\t\tvar $num = lines[lines.length - 1].ctr;\r\n\t\t\t\t\t\t$Map.set($, $num);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'V',\r\n\t\t\t\t\t$lines,\r\n\t\t\t\t\tlines: getTree(expr.expr, hypnumMap, $Map),\r\n\t\t\t\t\t// getHtmlLine 함수가 이 배열을 조작하기 때문에\r\n\t\t\t\t\t// shallow copy 해야 한다.\r\n\t\t\t\t\tparams: expr.params.slice(),\r\n\t\t\t\t\tctr: [start ,ctr]\r\n\t\t\t\t}];\r\n\t\t\t} else if (expr instanceof Tee) {\r\n\t\t\t\thypnumMap = new Map(hypnumMap);\r\n\t\t\t\tvar leftlines = [];\r\n\r\n\t\t\t\tvar start = ctr + 1;\r\n\r\n\t\t\t\texpr.left.forEach(l => {\r\n\t\t\t\t\thypnumMap.set(l, ++ctr);\r\n\t\t\t\t\tleftlines.push({\r\n\t\t\t\t\t\t_type: 'H',\r\n\t\t\t\t\t\tctr,\r\n\t\t\t\t\t\texpr: l\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\t\t\t$Map = new Map($Map);\r\n\r\n\t\t\t\tvar $lines = [];\r\n\t\t\t\texpr.def$s.forEach($ => {\r\n\t\t\t\t\tvar lines = getTree($.expr, hypnumMap, $Map);\r\n\t\t\t\t\t$lines = $lines.concat(lines);\r\n\r\n\t\t\t\t\tvar $num = lines[lines.length - 1].ctr;\r\n\t\t\t\t\t$Map.set($, $num);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'T',\r\n\t\t\t\t\tleftlines,\r\n\t\t\t\t\t$lines,\r\n\t\t\t\t\trightlines: getTree(expr.right, hypnumMap, $Map),\r\n\t\t\t\t\tctr: [start, ctr]\r\n\t\t\t\t}];\r\n\t\t\t} else if (expr instanceof $Variable) {\r\n\t\t\t\tif (!$Map.has(expr)) {\r\n\t\t\t\t\tthrow Error(`${expr.name} is not defined`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'R',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\tnum: $Map.get(expr),\r\n\t\t\t\t\texpr: expr.expr\r\n\t\t\t\t}];\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('Unknown metaexpr', expr);\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: '?',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t}\r\n\t\t})(theexpr, new Map(), new Map());\r\n\r\n\t\tvar html = '<table class=\"explorer\">';\r\n\t\thtml += `<tr><th>#</th><th colspan=\"${ncols}\">expr</th><th colspan=\"2\">rule</th></tr>`;\r\n\t\t\r\n\t\thtml += (function tree2html(lines, left) {\r\n\t\t\treturn lines.map(line => {\r\n\t\t\t\tswitch (line._type) {\r\n\t\t\t\t\tcase 'V':\r\n\t\t\t\t\t\treturn tree2html(line.$lines, left.concat([line.params]))\r\n\t\t\t\t\t\t\t+ tree2html(line.lines, left.concat([line.params]));\r\n\t\t\t\t\tcase 'T':\r\n\t\t\t\t\t\tvar newleft = left.concat([[]]);\r\n\r\n\t\t\t\t\t\tvar ret = '';\r\n\r\n\t\t\t\t\t\tif (line.leftlines.length == 0) {\r\n\t\t\t\t\t\t\tvar emptyleft = Array(left.length + 1).fill([]);\r\n\r\n\t\t\t\t\t\t\tret += getHtmlLine(\r\n\t\t\t\t\t\t\t\t'', emptyleft, '', '', {bbb: true, rrb: true}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tret += line.leftlines.map((line, i, a) => {\r\n\t\t\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\t\t\tnewleft,\r\n\t\t\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t\t\t'assumption',\r\n\t\t\t\t\t\t\t\t\t{bbb: i == a.length - 1, rrb: true}\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}).join('');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tret += tree2html(\r\n\t\t\t\t\t\t\tline.$lines,\r\n\t\t\t\t\t\t\tnewleft\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tret += tree2html(\r\n\t\t\t\t\t\t\tline.rightlines,\r\n\t\t\t\t\t\t\tnewleft\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\treturn ret;\r\n\t\t\t\t\tcase '?':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t'???'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'H':\r\n\t\t\t\t\t\tthrow Error('no');\r\n\t\t\t\t\tcase 'R':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.num)]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'RS':\r\n\t\t\t\t\tcase 'RCX':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.expr)]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'RC':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t[DIAMOND, `${exprToHtml(line.schema)} (${line.args.map(a => exprToHtml(a)).join(', ')})`]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'E':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.reduced, true),\r\n\t\t\t\t\t\t\t[DOWN, `${exprToHtml(line.subject)}${line.args ? ' (' + line.args.map(a => exprToHtml(a)).join(', ') + ')' : ''} [${line.leftargs.map(a => exprToHtml(a)).join(', ')}]`]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'NP':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t'<b class=\"red\">not proved</b>'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\t`Unknown type ${line._type}`,\r\n\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}).join('');\r\n\t\t})(tree[0].$lines.concat(tree[0].lines), []);\r\n\t\t\r\n\t\thtml += '</table>';\r\n\t\r\n\t\treturn html;\r\n\t}\r\n}"],"sourceRoot":""}