{"version":3,"sources":["webpack://math/webpack/universalModuleDefinition","webpack://math/webpack/bootstrap","webpack://math/./src/nodes/Node.ts","webpack://math/./src/nodes/Typevar.ts","webpack://math/./src/nodes/Type.ts","webpack://math/./src/ExpressionResolver.ts","webpack://math/./src/nodes/Schema.ts","webpack://math/./src/nodes/Schemacall.ts","webpack://math/./src/nodes/Tee.ts","webpack://math/./src/nodes/MetaType.ts","webpack://math/./src/nodes/Ruleset.ts","webpack://math/./src/entry.js","webpack://math/./src/grammar.pegjs","webpack://math/./src/Program.ts","webpack://math/./src/Scope.ts","webpack://math/./src/StackTrace.ts","webpack://math/./node_modules/process/browser.js","webpack://math/./src/PegInterface.ts","webpack://math/./src/nodes/Reduction.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","ctr","Node","scope","_id","toIndentedString","message","error","Error","replace","tex","precedence","code","match","g1","hyps","some","hyp","equals","prec","Array","length","console","log","my","normalizePrecedence","your","id","args","ret","shouldConsolidate","_match","PREC_FUNEXPR","PREC_COMMA","PREC_COLONEQQ","Typevar","type","isParam","guess","doc","super","_type","isProved","toSimpleString","indent","escapeTeX","Type","isBaseType","base","origin","isFunctional","isSimple","functional","from","map","f","e","to","resolved","resolve","join","toTeXString","iscall","a","callee","schema","makecall","ER","expr","substitute","arg","params","has","shouldValidate","axiomatic","left","right","reduced","Map","set","expandCallOnce","callee_","native","expandMeta","expandMetaAndFuncalls","b","recurseWrap","recurse","depth","every","_","placeholders","len","push","nequalscall","nequalstrue","tees","tee","reduceRight","newleft","slice","concat","nrecursecall","nrecursetrue","Schema","parseTeX","typevar","proved","repeat","funcallToTeXString","makeTeX","Schemacall","resolvedType","paramTypes","argTypes","Tee","includes","reduce","expanded","MetaType","Ruleset","grammar","default","Program","nativeMap","ruleset","tt","vars","nullary","arityMap","forEach","usedVars","fill","stack","lastIsFull","token","indexOf","pop","filter","parsed","collen","functionMap","N","A","q","O","I","E","varTable","j","constTable","T","F","getColumn","columns","column","col","baseType","typevars","typevarMap","keys","k","v","hasTypevar","getTypevar","funcall","cut","rules","chain","mpu","rule","lines","line","hasType","addType","addTypevar","fun","addFun","hasRuleset","addRuleset","hasSchema","addSchema","typedef","defv","defun","defruleset","defschema","reduction","schemacall","var","schemaexpr","ktx","DOWN","schemaMap","ncols","Math","max","leftargs","subject","html","getHtml","h1","h2","bbb","noctr","padding","htmlLeft","getHypNo","lineno","hypno","leftPrinted","leftarg","start","arr","end","Scope","parent","trace","typedefMap","defMap","rulesetMap","location","extend","hasOwnType","broadcast","getType","hasOwnTypevar","hasOwnRuleset","getRuleset","hasOwnSchema","getSchema","StackTrace","filename","process","argv","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","runClearTimeout","marker","Item","array","noop","nextTick","arguments","apply","title","browser","env","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","typeObjToString","obj","ftype","typeObjToNestedArr","PI","parentScope","tvo","tv","rettype","expr0","metavar","rulesetName","varObjToString","foo","metaexpr","guesses","g","Reduction","derefs","query","leftargTypes","lef","that","node","ptr","test"],"mappings":"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","file":"math.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"math\"] = factory();\n\telse\n\t\troot[\"math\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","var ctr = 0;\r\n\r\nexport type Precedence = boolean | number | [number, number];\r\n\r\ninterface Nodeable {\r\n\ttoIndentedString: (indent: number, root?: boolean) => string;\r\n\ttoTeXString: (prec?: Precedence, root?: boolean) => string;\r\n\tisProved: (hyps) => boolean;\r\n}\r\n\r\nexport default abstract class Node implements Nodeable {\r\n\tpublic readonly _id: number;\r\n\tpublic readonly scope: Scope;\r\n\r\n\tpublic type: Type | MetaType;\r\n\tpublic doc: string;\r\n\tpublic tex: string;\r\n\tpublic precedence: Precedence;\r\n\r\n\tpublic static readonly PREC_FUNEXPR = 1000;\r\n\tpublic static readonly PREC_COMMA = 1000;\r\n\tpublic static readonly PREC_COLONEQQ = 100000;\r\n\r\n\tconstructor (scope?: Scope) {\r\n\t\tthis._id = ++ctr;\r\n\t\tthis.scope = scope;\r\n\t}\r\n\r\n\tpublic toString() {\r\n\t\treturn this.toIndentedString(0);\r\n\t}\r\n\r\n\tpublic abstract toIndentedString(indent: number, root?: boolean): string;\r\n\tpublic abstract toTeXString(prec?: Precedence, root?: boolean): string;\r\n\r\n\tpublic error(message) {\r\n\t\tif (this.scope) {\r\n\t\t\treturn this.scope.error(message);\r\n\t\t} else {\r\n\t\t\treturn new Error(message);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static escapeTeX(s) {\r\n\t\treturn s.replace(/&|%|\\$|#|_|{|}|~|\\^|\\\\/g, m => ({\r\n\t\t\t'&': '\\\\&', '%': '\\\\%', '$': '\\\\$',\r\n\t\t\t'#': '\\\\#', '_': '\\\\_', '{': '\\\\{',\r\n\t\t\t'}': '\\\\}',\r\n\t\t\t'~': '\\\\textasciitilde',\r\n\t\t\t'^': '\\\\textasciicircum',\r\n\t\t\t'\\\\': '\\\\textbackslash'\r\n\t\t})[m]);\r\n\t}\r\n\r\n\tpublic static parseTeX(tex) {\r\n\t\tvar precedence: Precedence = false;\r\n\r\n\t\tvar code = tex.replace(/^!<prec=([0-9]+)>/, (match, g1) => {\r\n\t\t\tprecedence = g1 * 1;\r\n\t\t\treturn '';\r\n\t\t});\r\n\r\n\t\treturn {precedence, code};\r\n\t}\r\n\r\n\tpublic isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\r\n\t\tif (hyps.some(hyp => ExpressionResolver.equals(hyp, this))) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/*\r\n\t* false corresponds to 0.\r\n\t* true corresponds to w * 2.\r\n\t*/\r\n\tpublic static normalizePrecedence(prec: Precedence) {\r\n\t\tif (prec === false) return [0, 0];\r\n\t\tif (prec === true) return [2, 0];\r\n\t\tif (typeof prec == 'number') return [0, prec];\r\n\r\n\t\tif (!(prec instanceof Array && prec.length == 2)) {\r\n\t\t\tconsole.log(prec);\r\n\t\t\tthrow Error('wut');\r\n\t\t}\r\n\r\n\t\treturn prec;\r\n\t}\r\n\r\n\tpublic shouldConsolidate(prec: Precedence) {\r\n\t\tvar my = Node.normalizePrecedence(this.precedence || false),\r\n\t\t\tyour = Node.normalizePrecedence(prec || false);\r\n\r\n\t\tif (my[0] == 0 && my[1] == 0) return false;\r\n\r\n\t\treturn !(my[0] < your[0] || my[0] == your[0] && my[1] < your[1]);\r\n\t}\r\n\r\n\tpublic makeTeX(id, args, prec) {\r\n\t\targs = args || [];\r\n\t\tprec = prec || false;\r\n\t\t\r\n\t\tvar ret = this.tex;\r\n\r\n\t\tif (this.shouldConsolidate(prec)) {\r\n\t\t\tret = '\\\\left(' + ret + '\\\\right)';\r\n\t\t}\r\n\r\n\t\treturn ret.replace(/#([0-9]+)/g, (match, g1) => {\r\n\t\t\treturn args[g1 * 1 - 1] || `\\\\texttt{\\\\textcolor{red}{\\\\#${g1}}}`;\r\n\t\t}).replace(/<<(.+?)>>/, (_match, g1) => {\r\n\t\t\treturn `\\\\href{#${id}}{${g1}}`;\r\n\t\t});\r\n\t}\r\n}\r\n\r\n// 순환 참조를 피하기 위하여 export 후 import 한다.\r\nimport ExpressionResolver from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport MetaType from './MetaType';\r\nimport Type from './Type';","import Scope from '../Scope';\r\nimport Node, {Precedence} from './Node';\r\nimport Type from './Type';\r\n\r\ninterface TypevarArgumentType {\r\n\ttype: Type,\r\n\tisParam?: boolean,\r\n\tguess?: string,\r\n\tname: string,\r\n\tdoc?: string,\r\n\ttex?: string\r\n}\r\n\r\nexport default class Typevar extends Node {\r\n\tpublic readonly _type = 'typevar';\r\n\r\n\tpublic readonly isParam: boolean;\r\n\tpublic readonly guess: string;\r\n\tpublic readonly type: Type;\r\n\tpublic readonly name: string;\r\n\r\n\tconstructor ({type, isParam, guess, name, doc, tex}: TypevarArgumentType, scope?: Scope) {\r\n\t\tsuper(scope);\r\n\r\n\t\tthis.doc = doc;\r\n\t\tthis.tex = tex;\r\n\r\n\t\tthis.isParam = !!isParam;\r\n\t\tthis.guess = guess || null;\r\n\r\n\t\ttype = type as Type;\r\n\r\n\t\tif (typeof name != 'string')\r\n\t\t\tthrow this.error('Assertion failed');\r\n\r\n\t\tthis.type = type;\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tpublic isProved(hyps) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps);\r\n\t}\r\n\r\n\t// pr f\r\n\tpublic toSimpleString() {\r\n\t\treturn this.type.toSimpleString() + ' ' + this.name;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn `${root ? this.type + ' ' : ''}${this.name}<${this._id}>`;\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tvar id = this.isParam ? `id-${this._id}` : `def-${this.name}`;\r\n\r\n\t\tvar tex = this.tex\r\n\t\t\t|| (\r\n\t\t\t\tthis.name.length == 1\r\n\t\t\t\t\t? Node.escapeTeX(this.name)\r\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.name)}}`\r\n\t\t\t);\r\n\t\t\r\n\t\treturn `\\\\href{#${id}}{${tex}}`;\r\n\t}\r\n}","import Node from './Node';\r\n\r\nexport default class Type extends Node {\r\n\tpublic readonly _type = 'type';\r\n\r\n\tpublic readonly isBaseType: boolean;\r\n\tpublic readonly isFunctional: boolean;\r\n\tpublic readonly isSimple: boolean;\r\n\tpublic readonly name: string;\r\n\tpublic readonly origin: Type;\r\n\tpublic readonly from: Type[];\r\n\tpublic readonly to: Type;\r\n\r\n\tconstructor (o) {\r\n\t\tsuper();\r\n\r\n\t\tthis.doc = o.doc;\r\n\t\tthis.isBaseType = !!o.base;\r\n\r\n\t\tif (o.origin) {\r\n\t\t\tif (typeof o.name != 'string')\r\n\t\t\t\tthrow this.error('typeof o.name != \\'string\\'');\r\n\t\t\tthis.name = o.name;\r\n\r\n\t\t\tif (!(o.origin instanceof Type))\r\n\t\t\t\tthrow this.error('!(o.origin instanceof Type)');\r\n\r\n\t\t\tthis.isFunctional = o.origin.isFunctional;\r\n\t\t\tthis.isSimple = o.origin.isSimple;\r\n\t\t\tthis.origin = o.origin;\r\n\t\t} else {\r\n\t\t\tif (typeof o.functional != 'boolean')\r\n\t\t\t\tthrow this.error('typeof o.functional != \\'boolean\\'');\r\n\t\t\tthis.isFunctional = o.functional;\r\n\t\t\tthis.isSimple = !o.functional;\r\n\r\n\t\t\tif (!o.functional) {\r\n\t\t\t\tif (typeof o.name != 'string')\r\n\t\t\t\t\tthrow this.error('typeof o.name != \\'string\\'');\r\n\t\t\t\tthis.name = o.name;\r\n\t\t\t} else {\r\n\t\t\t\tif (o.from.map(f => f instanceof Type).some(e => !e))\r\n\t\t\t\t\tthrow this.error('o.from.map(f => f instanceof Type).some(e => !e)');\r\n\t\t\t\tif (!(o.to instanceof Type))\r\n\t\t\t\t\tthrow this.error('!(o.to instanceof Type)');\r\n\r\n\t\t\t\tthis.from = o.from;\r\n\t\t\t\tthis.to = o.to;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toSimpleString() {\r\n\t\tif (this.name) return this.name;\r\n\r\n\t\tvar resolved = this.resolve();\r\n\r\n\t\treturn `[${resolved.from.map(e => e.toSimpleString()).join(', ')} -> ${resolved.to.toSimpleString()}]`;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent): string {\r\n\t\tif (this.isSimple) return this.name;\r\n\r\n\t\treturn `${this.name ? this.name + ': ' : ''}[${this.resolve().from.join(', ')} -> ${this.resolve().to}]`;\r\n\t}\r\n\r\n\tpublic toTeXString(root?: boolean) {\r\n\t\tif (this.isSimple) return `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\r\n\r\n\t\tif (!root && this.name) {\r\n\t\t\treturn `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\r\n\t\t}\r\n\r\n\t\treturn `${this.name ? `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}: ` : ''}`\r\n\t\t\t+ `\\\\left[${this.resolve().from.map(e => e.toTeXString()).join(' \\\\times ')}`\r\n\t\t\t+ ` \\\\to ${this.resolve().to.toTeXString()} \\\\right]`;\r\n\t}\r\n\r\n\tpublic resolve(): Type {\r\n\t\treturn this.origin ? this.origin.resolve() : this;\r\n\t}\r\n\r\n\tpublic equals(t: object): boolean {\r\n\t\tif (!(t instanceof Type)) return false;\r\n\r\n\t\tif (this.origin) return this.origin.equals(t);\r\n\t\tif (t.origin) return this.equals(t.origin);\r\n\r\n\t\tif (this.isSimple != t.isSimple) return false;\r\n\r\n\t\tif (this.isSimple) return this === t;\r\n\r\n\t\tif (this.from.length != t.from.length) return false;\r\n\r\n\t\tfor (var i = 0; i < this.from.length; i++)\r\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\r\n\r\n\t\treturn this.to.equals(t.to);\r\n\t}\r\n}","export type Expr0 = Schemacall | Schema | Typevar;\r\nexport type Metaexpr = Tee | Reduction | Schemacall | Schema | Expr0;\r\n\r\nfunction iscall(a: Metaexpr): a is Schemacall {\r\n\treturn a._type == 'schemacall';\r\n}\r\n\r\nfunction callee(a: Metaexpr) {\r\n\tif (iscall(a)) return a.schema;\r\n\r\n\tconsole.log(a);\r\n\tthrow Error();\r\n}\r\n\r\nfunction makecall(a: Metaexpr, args: Expr0[]): Schemacall {\r\n\tif (a._type == 'typevar' || a._type == 'schema') {\r\n\t\treturn new Schemacall({\r\n\t\t\tschema: a,\r\n\t\t\targs\r\n\t\t});\r\n\t}\r\n\r\n\tconsole.log(a);\r\n\tthrow Error();\r\n}\r\n\r\nexport default class ER {\r\n\tpublic static substitute(expr: Metaexpr, map: Map<Typevar | Schema, Expr0>): Metaexpr {\r\n\t\tswitch (expr._type) {\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\treturn new Schemacall({\r\n\t\t\t\t\tschema: ER.substitute(expr.schema, map),\r\n\t\t\t\t\targs: expr.args.map(arg => ER.substitute(arg, map))\r\n\t\t\t\t});\r\n\t\t\tcase 'schema':\r\n\t\t\t\tif (!expr.expr) return map.get(expr) || expr;\r\n\r\n\t\t\t\t// 이름이 있는 것은 최상단에만 선언되므로 치환되어야 할 것을 포함하지 않으므로 확인하지 않는다는 생각이 들어 있다.\r\n\t\t\t\tif (expr.name) return map.get(expr) || expr;\r\n\r\n\t\t\t\t// 위의 expr.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\r\n\t\t\t\tif (expr.params.some(e => map.has(e)))\r\n\t\t\t\t\tthrow Error('Parameter collision');\r\n\r\n\t\t\t\treturn new Schema({\r\n\t\t\t\t\tshouldValidate: expr.shouldValidate,\r\n\t\t\t\t\taxiomatic: expr.axiomatic,\r\n\t\t\t\t\tname: null,\r\n\t\t\t\t\tparams: expr.params,\r\n\t\t\t\t\texpr: ER.substitute(expr.expr, map)\r\n\t\t\t\t});\r\n\t\t\tcase 'typevar':\r\n\t\t\t\treturn map.get(expr) || expr;\r\n\t\t\tcase 'tee':\r\n\t\t\t\tvar left = expr.left.map(e => ER.substitute(e, map));\r\n\t\t\t\tvar right = ER.substitute(expr.right, map);\r\n\r\n\t\t\t\treturn new Tee({\r\n\t\t\t\t\tleft, right\r\n\t\t\t\t});\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn ER.substitute(expr.reduced, map);\r\n\t\t\tdefault:\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tthrow Error(`Unknown type ${expr._type}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static call(callee: Metaexpr, args: Expr0[]): Metaexpr {\r\n\t\tif (callee._type != 'schema') {\r\n\t\t\tconsole.log(callee);\r\n\t\t\tthrow Error('Illegal type');\r\n\t\t}\r\n\r\n\t\tif (!callee.expr) {\r\n\t\t\tthrow Error('Cannot call a callable without a body');\r\n\t\t}\r\n\r\n\t\tif (callee.params.length != args.length) {\r\n\t\t\tthrow Error('Illegal arguments length');\r\n\t\t}\r\n\r\n\t\tvar map = new Map();\r\n\r\n\t\tfor (var i = 0; i < callee.params.length; i++) {\r\n\t\t\tmap.set(callee.params[i], args[i]);\r\n\t\t}\r\n\r\n\t\treturn ER.substitute(callee.expr, map);\r\n\t}\r\n\r\n\tpublic static expandCallOnce(expr: Metaexpr): Metaexpr {\r\n\t\tif (!iscall(expr)) {\r\n\t\t\tthrow Error('Illegal type');\r\n\t\t}\r\n\r\n\t\tif (iscall(callee(expr))) {\r\n\t\t\tvar schema = ER.expandCallOnce(callee(expr));\r\n\t\t\treturn makecall(schema, expr.args);\r\n\t\t}\r\n\r\n\t\tvar callee_ = callee(expr);\r\n\r\n\t\tif (callee_._type != 'schema') {\r\n\t\t\tthrow Error('Something\\'s wrong');\r\n\t\t}\r\n\r\n\t\tif (!callee_.expr) {\r\n\t\t\tthrow Error('Could not expand');\r\n\t\t}\r\n\r\n\t\treturn ER.call(callee_, expr.args);\r\n\t}\r\n\r\n\t// expand0은 하지 않는다.\r\n\tpublic static expandMeta(expr: Metaexpr): Metaexpr {\r\n\t\tif ('native' in expr && expr.native) {\r\n\t\t\treturn expr;\r\n\t\t}\r\n\r\n\t\tswitch (expr._type) {\r\n\t\t\tcase 'tee':\r\n\t\t\t\tvar left = expr.left.map(ER.expandMeta);\r\n\t\t\t\tvar right = ER.expandMeta(expr.right);\r\n\r\n\t\t\t\treturn new Tee({left, right});\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\tvar schema = ER.expandMeta(expr.schema),\r\n\t\t\t\t\targs = expr.args;\r\n\t\t\t\t\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tif (!schema.expr || schema.name && !schema.shouldValidate)\r\n\t\t\t \t\treturn new Schemacall({schema, args});\r\n\r\n\t\t\t\treturn ER.expandMeta(ER.call(schema, args));\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn ER.expandMeta(expr.reduced);\r\n\t\t\tcase 'schema':\r\n\t\t\t\tif (!expr.expr) return expr;\r\n\t\t\t\tif (expr.type._type == 'type' && expr.name) return expr;\r\n\r\n\t\t\t\treturn new Schema({\r\n\t\t\t\t\tshouldValidate: expr.shouldValidate,\r\n\t\t\t\t\taxiomatic: expr.axiomatic,\r\n\t\t\t\t\tname: null,\r\n\t\t\t\t\tparams: expr.params,\r\n\t\t\t\t\texpr: ER.expandMeta(expr.expr)\r\n\t\t\t\t});\r\n\t\t\tcase 'typevar':\r\n\t\t\t\treturn expr;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(expr);\r\n\t\t\t\tthrow Error('Unknown metaexpr');\r\n\t\t}\r\n\t}\r\n\r\n\t// expr0의 이름 없는 funcall까지 풀음.\r\n\tpublic static expandMetaAndFuncalls(expr: Metaexpr) {\r\n\t\tswitch (expr._type) {\r\n\t\t\tcase 'tee':\r\n\t\t\t\tvar left = expr.left.map(ER.expandMetaAndFuncalls);\r\n\t\t\t\tvar right = ER.expandMetaAndFuncalls(expr.right);\r\n\r\n\t\t\t\treturn new Tee({left, right});\r\n\t\t\tcase 'schema':\r\n\t\t\t\tif (!expr.expr) return expr;\r\n\t\t\t\tif (expr.type._type == 'type' && expr.name) return expr;\r\n\r\n\t\t\t\treturn new Schema({\r\n\t\t\t\t\tshouldValidate: expr.shouldValidate,\r\n\t\t\t\t\taxiomatic: expr.axiomatic,\r\n\t\t\t\t\tname: null,\r\n\t\t\t\t\tparams: expr.params,\r\n\t\t\t\t\texpr: ER.expandMetaAndFuncalls(expr.expr)\r\n\t\t\t\t});\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\tvar schema = ER.expandMetaAndFuncalls(expr.schema);\r\n\t\t\t\tvar args = expr.args.map(ER.expandMetaAndFuncalls);\r\n\r\n\t\t\t\tif (!schema.expr || schema.name && !schema.shouldValidate)\r\n\t\t\t \t\treturn new Schemacall({schema, args});\r\n\r\n\t\t\t\treturn ER.expandMetaAndFuncalls(ER.call(schema, args));\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn ER.expandMetaAndFuncalls(expr.reduced);\r\n\t\t\tcase 'typevar':\r\n\t\t\t\treturn expr;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(expr);\r\n\t\t\t\tthrow Error('Unknown metaexpr');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static nequalscall = 0;\r\n\tpublic static nequalstrue = 0;\r\n\tpublic static nrecursecall = 0;\r\n\tpublic static nrecursetrue = 0;\r\n\r\n\t/*\r\n\t * 스펙 참조.\r\n\t */\r\n\tpublic static equals(a, b) {\r\n\t\tfunction recurse(a, b, depth) {\r\n\t\t\tif (a == b) return true;\r\n\r\n\t\t\tif (!a.type.equals(b.type)) return false;\r\n\r\n\t\t\tif (a._type == 'reduction') {\r\n\t\t\t\treturn recurseWrap(a.reduced, b, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (b._type == 'reduction') {\r\n\t\t\t\treturn recurseWrap(a, b.reduced, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (iscall(a) && iscall(b)) {\r\n\t\t\t\tif (iscall(callee(a))) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\tER.expandCallOnce(a), b, depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (iscall(callee(b))) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\ta, ER.expandCallOnce(b), depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (callee(a) == callee(b) || !callee(a).expr && !callee(b).expr) {\r\n\t\t\t\t\tif (callee(a) != callee(b)) return false;\r\n\r\n\t\t\t\t\tif (!callee(a).expr && !callee(b).expr) {\r\n\t\t\t\t\t\tfor (var i = 0; i < a.args.length; i++) {\r\n\t\t\t\t\t\t\tif (!recurseWrap(a.args[i], b.args[i], depth + 1)) return false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (a.args.every((_, i) => {\r\n\t\t\t\t\t\treturn recurseWrap(a.args[i], b.args[i], depth + 1);\r\n\t\t\t\t\t})) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (callee(a).expr) {\r\n\t\t\t\t\treturn recurseWrap(ER.expandCallOnce(a), b, depth + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recurseWrap(a, ER.expandCallOnce(b), depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (iscall(a)) {\r\n\t\t\t\tif (iscall(callee(a))) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\tER.expandCallOnce(a), b, depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!callee(a).expr) return false;\r\n\r\n\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\tER.expandCallOnce(a), b, depth + 1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (iscall(b)) {\r\n\t\t\t\tif (iscall(callee(b))) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\ta, ER.expandCallOnce(b), depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!callee(b).expr) return false;\r\n\r\n\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\ta, ER.expandCallOnce(b), depth + 1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (a._type == 'tee') {\r\n\t\t\t\tfor (var i = 0; i < a.left.length; i++) {\r\n\t\t\t\t\tif (!recurseWrap(a.left[i], b.left[i], depth + 1)) return false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recurseWrap(a.right, b.right, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (a.type.isFunctional) {\r\n\t\t\t\tvar placeholders = [];\r\n\t\t\t\tvar len = a.type.resolve().from.length;\r\n\r\n\t\t\t\tfor (var i = 0; i < len; i++) {\r\n\t\t\t\t\tplaceholders.push(new Typevar({\r\n\t\t\t\t\t\ttype: a.type.resolve().from[i],\r\n\t\t\t\t\t\tname: '$' + i\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\tmakecall(a, placeholders), makecall(b, placeholders), depth + 1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar recurseWrap = recurse;\r\n\r\n\t\t// function recurseWrap(a, b, depth) {\r\n\t\t// \tER.nrecursecall++;\r\n\r\n\t\t// \tconsole.log(`depth ${depth}\\n${a}\\n\\n${b}`);\r\n\t\t// \tvar ret = recurse(a, b, depth);\r\n\t\t// \tconsole.log(`depth ${depth} → ${ret}`);\r\n\r\n\t\t// \tif (ret) ER.nrecursetrue++;\r\n\r\n\t\t// \treturn ret;\r\n\t\t// }\r\n\r\n\t\tER.nequalscall++;\r\n\t\tvar ret = recurseWrap(a, b, 0);\r\n\t\tif (ret) ER.nequalstrue++;\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tpublic static chain(tees: Tee[]) {\r\n\t\tif (!tees.every(tee => tee._type == 'tee')) {\r\n\t\t\tthrow Error('no');\r\n\t\t}\r\n\r\n\t\treturn ER.expandMetaAndFuncalls(tees.reduceRight((r, l) => {\r\n\t\t\tfor (var i = 0; i < r.left.length; i++) {\r\n\t\t\t\tif (ER.equals(l.right, r.left[i])) {\r\n\t\t\t\t\tvar newleft = r.left.slice(0, i)\r\n\t\t\t\t\t\t.concat(l.left)\r\n\t\t\t\t\t\t.concat(r.left.slice(i + 1));\r\n\r\n\t\t\t\t\treturn new Tee({\r\n\t\t\t\t\t\tleft: newleft,\r\n\t\t\t\t\t\tright: r.right\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthrow Error(`Chaining failed:\r\n\r\n--- LEFT ---\r\n${l}\r\n------------\r\n\r\n--- RIGHT ---\r\n${r}\r\n-------------`);\r\n\t\t}));\r\n\t}\r\n}\r\n\r\n// 순환 참조를 피하기 위하여 export 후 import 한다.\r\nimport Reduction from \"./nodes/Reduction\";\r\nimport Schema from \"./nodes/Schema\";\r\nimport Schemacall from \"./nodes/Schemacall\";\r\nimport Tee from \"./nodes/Tee\";\r\nimport Typevar from \"./nodes/Typevar\";","import Node, { Precedence } from './Node';\r\nimport Type from './Type';\r\nimport MetaType from './MetaType';\r\n\r\nimport ExpressionResolver from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport Typevar from './Typevar';\r\n\r\ninterface SchemaArgumentType {\r\n\tshouldValidate: boolean;\r\n\taxiomatic?: boolean;\r\n\ttype?: Type | MetaType;\r\n\tname?: string;\r\n\tnative?: object;\r\n\tparams?: (Typevar | Schema)[];\r\n\texpr?: Node;\r\n\tdoc?: string;\r\n\ttex?: string;\r\n}\r\n\r\nexport default class Schema extends Node {\r\n\tpublic readonly _type = 'schema';\r\n\r\n\tpublic readonly shouldValidate;\r\n\tpublic readonly axiomatic: boolean;\r\n\tpublic readonly name: string;\r\n\tpublic readonly native;\r\n\tpublic readonly params;\r\n\tpublic readonly expr;\r\n\tpublic readonly type: Type | MetaType;\r\n\tpublic readonly proved: boolean;\r\n\r\n\t/*\r\n\t * name, expr 중 하나 이상 있어야 하고 type, native, expr 중\r\n\t * 한 개만 있어야 한다.\r\n\t */\r\n\tconstructor ({doc, tex, shouldValidate, axiomatic, type, /* nullable */ name, native, params, expr}: SchemaArgumentType, scope?: Scope) {\r\n\t\tsuper(scope);\r\n\r\n\t\tthis.doc = doc;\r\n\t\tthis.shouldValidate = shouldValidate;\r\n\r\n\t\tif (tex) {\r\n\t\t\tvar {precedence, code} = Node.parseTeX(tex);\r\n\r\n\t\t\tthis.precedence = precedence;\r\n\t\t\tthis.tex = code;\r\n\t\t} else {\r\n\t\t\tthis.precedence = false;\r\n\t\t\tthis.tex = null;\r\n\t\t}\r\n\r\n\t\tif (!name && !native && !expr)\r\n\t\t\tthrow this.error('Anonymous fun cannot be primitive');\r\n\r\n\t\tif (type && expr || expr && native || native && type)\r\n\t\t\tthrow this.error('no');\r\n\r\n\t\tif (!type && !native && !expr)\r\n\t\t\tthrow this.error('Cannot guess the type of a primitive fun');\r\n\r\n\t\tif (name !== null && typeof name != 'string')\r\n\t\t\tthrow this.error('Assertion failed');\r\n\r\n\t\tif (!native && expr && !(expr.type instanceof Type || expr.type instanceof MetaType)) {\r\n\t\t\tthrow this.error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tthis.axiomatic = axiomatic;\r\n\t\tthis.name = name;\r\n\r\n\t\tif (native) {\r\n\t\t\tthis.native = native;\r\n\t\t\tthis.expr = null;\r\n\t\t\tthis.type = null;\r\n\t\t} else {\r\n\t\t\tif (!(params instanceof Array)\r\n\t\t\t\t\t|| params.map(e => e instanceof Typevar).some(e => !e))\r\n\t\t\t\tthrow this.error('Assertion failed');\r\n\t\t\t\r\n\t\t\tif (expr !== null && !(expr instanceof Node))\r\n\t\t\t\tthrow this.error('Assertion failed');\r\n\r\n\t\t\tthis.type = type || new (expr.type instanceof Type ? Type : MetaType)({\r\n\t\t\t\tfunctional: true,\r\n\t\t\t\tfrom: params.map(typevar => typevar.type),\r\n\t\t\t\tto: expr.type\r\n\t\t\t});\r\n\r\n\t\t\tthis.params = params;\r\n\t\t\tthis.expr = expr;\r\n\t\t}\r\n\r\n\t\tthis.proved = this.isProved();\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn this.proved\r\n\t\t\t|| !this.native && super.isProved(hyps)\r\n\t\t\t|| this.axiomatic\r\n\t\t\t|| this.expr && this.expr.isProved(hyps);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tif (this.native)\r\n\t\t\treturn `∫ ${this.name} <native>`;\r\n\r\n\t\treturn [\r\n\t\t\t`∫ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\r\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\r\n\t\t\t'}'\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tif (!this.name) {\r\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\r\n\t\t\treturn [\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\r\n\t\t\t\t(\r\n\t\t\t\t\tthis.params.length == 1\r\n\t\t\t\t\t? this.params[0].toTeXString(false)\r\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\r\n\t\t\t\t),\r\n\t\t\t\t`\\\\mapsto ${ExpressionResolver.expandMetaAndFuncalls(this.expr).toTeXString(false)}`,\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\r\n\t\t\t].join('');\r\n\t\t}\r\n\r\n\t\tif (!this.shouldValidate) {\r\n\t\t\tif (!root)\r\n\t\t\t\treturn `\\\\href{#def-${this.name}}\\\\mathrm{${Node.escapeTeX(this.name)}}`;\r\n\t\t\r\n\t\t\tif (!this.expr)\r\n\t\t\t\treturn this.funcallToTeXString(this.params, prec);\r\n\t\t\r\n\t\t\treturn this.funcallToTeXString(this.params, Node.PREC_COLONEQQ)\r\n\t\t\t\t\t+ `\\\\coloneqq ${this.expr.toTeXString(Node.PREC_COLONEQQ)}`;\r\n\t\t} else {\r\n\t\t\tvar id = `schema-${this.proved ? 'p' : 'np'}-${this.name}`;\r\n\t\t\r\n\t\t\tif (!root)\r\n\t\t\t\treturn `\\\\href{#${id}}\\\\mathsf{${Node.escapeTeX(this.name)}}`;\r\n\t\t\r\n\t\t\tif (this.native)\r\n\t\t\t\treturn `\\\\href{#${id}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}`\r\n\t\t\t\t\t+ '\\\\ (\\\\textrm{native})';\r\n\t\t\r\n\t\t\treturn `\\\\href{#${id}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}(${this.params.map(e => e.toTeXString(Node.PREC_COMMA) + (e.guess ? `: \\\\texttt{@${e.guess}}` : '')).join(', ')}):`\r\n\t\t\t\t\t\t+ '\\\\\\\\\\\\quad' + ExpressionResolver.expandMetaAndFuncalls(this.expr).toTeXString(true);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic funcallToTeXString(args, prec) {\r\n\t\targs = args.map(arg => {\r\n\t\t\treturn arg.toTeXString(this.tex ? this.precedence : Node.PREC_COMMA);\r\n\t\t});\r\n\t\r\n\t\tif (this.tex) {\r\n\t\t\treturn this.makeTeX('def-' + this.name, args, prec);\r\n\t\t}\r\n\t\r\n\t\treturn `${!this.name\r\n\t\t\t\t? this.toTeXString(false)\r\n\t\t\t\t: `\\\\href{#def-${this.name}}{${this.name.length == 1 ? Node.escapeTeX(this.name) : `\\\\mathrm{${Node.escapeTeX(this.name)}}`}}`}`\r\n\t\t\t+ `(${args.join(', ')})`;\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport Typevar from './Typevar';\r\nimport MetaType from './MetaType';\r\nimport Type from './Type';\r\nimport Scope from '../Scope';\r\nimport Schema from './Schema';\r\n\r\nexport default class Schemacall extends Node {\r\n\tpublic readonly _type = 'schemacall';\r\n\r\n\tpublic readonly type: Type | MetaType;\r\n\tpublic readonly schema;\r\n\tpublic readonly args;\r\n\r\n\tconstructor ({schema, args}, scope?: Scope) {\r\n\t\tsuper(scope);\r\n\r\n\t\tif (schema.type.isSimple)\r\n\t\t\tthrow this.error(`${schema.name} is not callable`);\r\n\r\n\t\tif (!(args instanceof Array) || args.map(e => e instanceof Node).some(e => !e))\r\n\t\t\tthrow this.error('Assertion failed');\r\n\t\t\t \r\n\t\tvar resolvedType = schema.type.resolve(),\r\n\t\t\tparamTypes = resolvedType.from,\r\n\t\t\targTypes = args.map(e => e.type);\r\n\r\n\t\tif (paramTypes.length != argTypes.length)\r\n\t\t\tthrow this.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`);\r\n\r\n\t\tfor (var i = 0; i < paramTypes.length; i++) {\r\n\t\t\tif (!paramTypes[i].equals(argTypes[i])) {\r\n\t\t\t\tthrow this.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tthis.schema = schema;\r\n\t\tthis.type = resolvedType.to;\r\n\t\tthis.args = args;\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps) || this.schema.isProved(hyps);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tvar args = this.args.map(arg => {\r\n\t\t\tif (arg instanceof Typevar) return `${arg.name}<${arg._id}>`;\r\n\t\t\treturn arg.toIndentedString(indent + 1);\r\n\t\t});\r\n\t\r\n\t\tif (args.join('').length <= 50) {\r\n\t\t\targs = this.args.map(arg => {\r\n\t\t\t\tif (arg instanceof Typevar) return `${arg.name}<${arg._id}>`;\r\n\t\t\t\treturn arg.toIndentedString(indent);\r\n\t\t\t});\r\n\t\r\n\t\t\targs = args.join(', ');\r\n\t\r\n\t\t\tif (this.schema.shouldValidate) {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t`${this.schema.name || `(${this.schema})`}(`,\r\n\t\t\t\t\targs,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('');\r\n\t\t\t} else {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t`${this.schema._type != 'schema' || !this.schema.name ? '(' + this.schema.toIndentedString(indent) + ')' : this.schema.name}(`,\r\n\t\t\t\t\targs,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('');\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\r\n\t\t\t\r\n\t\t\tif (this.schema.shouldValidate) {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t`${this.schema.name || `(${this.schema.toIndentedString(indent)})`}(`,\r\n\t\t\t\t\t'\\t' + args,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t\t} else {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t`${this.schema._type != 'schema' || !this.schema.name ? '(' + this.schema.toIndentedString(indent) + ')' : this.schema.name}(`,\r\n\t\t\t\t\t'\\t' + args,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tif (this.schema.shouldValidate) {\r\n\t\t\treturn (\r\n\t\t\t\tthis.schema.name\r\n\t\t\t\t\t? `\\\\href{#schema-${this.schema.proved ? 'p' : 'np'}-${this.schema.name}}{\\\\textsf{${Node.escapeTeX(this.schema.name)}}}`\r\n\t\t\t\t\t: this.schema.toTeXString(false)\r\n\t\t\t) + `(${this.args.map(arg => {\r\n\t\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\r\n\t\t\t}).join(', ')})`;\r\n\t\t}\r\n\r\n\t\tif (this.schema instanceof Schema)\r\n\t\t\treturn this.schema.funcallToTeXString(this.args, prec);\r\n\t\t\r\n\t\tvar args = this.args.map(arg => {\r\n\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\r\n\t\t});\r\n\r\n\t\treturn `${!this.schema.name || this.schema._type == 'typevar'\r\n\t\t\t\t? this.schema.toTeXString(false)\r\n\t\t\t\t: this.schema.name.length == 1\r\n\t\t\t\t\t? Node.escapeTeX(this.schema.name)\r\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.schema.name)}}`}`\r\n\t\t\t+ `(${args.join(', ')})`;\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport MetaType from './MetaType';\r\n\r\nimport ExpressionResolver from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\n\r\nexport default class Tee extends Node {\r\n\tpublic readonly _type = 'tee';\r\n\tpublic static precedence = Node.PREC_COMMA;\r\n\r\n\tpublic readonly left;\r\n\tpublic readonly right;\r\n\tpublic readonly type: MetaType;\r\n\r\n\tconstructor ({left, right}, scope?: Scope) {\r\n\t\tsuper(scope);\r\n\t\t\r\n\t\tif (!(left instanceof Array\r\n\t\t\t\t&& left.every(l => ['type', 'metatype'].includes(l.type._type)))) {\r\n\t\t\tconsole.log(left);\r\n\t\t\tthrow this.error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tif (!['type', 'metatype'].includes(right.type._type)) {\r\n\t\t\tconsole.log(right);\r\n\t\t\tthrow this.error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tif (right.type.isFunctional) {\r\n\t\t\tthrow this.error('RHS of a rule cannot be a schema');\r\n\t\t}\r\n\r\n\t\t// antecedent의 contraction\r\n\t\t// 현재 antecedent를 집합처럼 생각하므로 contraction을 자동으로 한다.\r\n\t\t// antecedent가 집합인지 시퀀스인지는 #14 참조.\r\n\t\tthis.left = left.reduce((l, r) => {\r\n\t\t\tfor (var i = 0; i < l.length; i++)\r\n\t\t\t\tif (ExpressionResolver.equals(l[i], r)) return l;\r\n\r\n\t\t\treturn l.push(r), l;\r\n\t\t}, []);\r\n\r\n\t\tthis.right = right;\r\n\r\n\t\tthis.type = new MetaType({\r\n\t\t\tfunctional: false,\r\n\t\t\tleft: left.map(e => e.type),\r\n\t\t\tright: right.type\r\n\t\t});\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps) || this.right.isProved(hyps.concat(this.left));\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tif (!this.left.length) {\r\n\t\t\treturn '|- ' + this.right.toIndentedString(indent);\r\n\t\t}\r\n\t\r\n\t\treturn [\r\n\t\t\t'\\t' + this.left.map(e => e.toIndentedString(indent + 1)).join(',\\n' + '\\t'.repeat(indent + 1)),\r\n\t\t\t'|-',\r\n\t\t\t'\\t' + this.right.toIndentedString(indent + 1)\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tvar expanded = ExpressionResolver.expandMetaAndFuncalls(this);\r\n\r\n\t\treturn [\r\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\r\n\t\t\t`{${expanded.left.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')} \\\\vdash ${expanded.right.toTeXString(Node.PREC_COMMA)}}`,\r\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\r\n\t\t].join('');\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport Type from './Type';\r\n\r\nexport default class MetaType extends Node {\r\n\tpublic readonly _type = 'metatype';\r\n\r\n\tpublic readonly isFunctional: boolean;\r\n\tpublic readonly isSimple: boolean;\r\n\tpublic readonly name: string;\r\n\tpublic readonly left;\r\n\tpublic readonly right;\r\n\tpublic readonly from: Type[];\r\n\tpublic readonly to: MetaType;\r\n\r\n\tconstructor (o) {\r\n\t\tsuper();\r\n\r\n\t\tif (typeof o.functional != 'boolean')\r\n\t\t\tthrow this.error('typeof o.functional != \\'boolean\\'');\r\n\t\t\r\n\t\tthis.isFunctional = o.functional;\r\n\t\tthis.isSimple = !o.functional;\r\n\r\n\t\tif (!o.functional) {\r\n\t\t\tif (!(o.left instanceof Array))\r\n\t\t\t\tthrow this.error('left should be an array');\r\n\r\n\t\t\tthis.left = o.left;\r\n\t\t\tthis.right = o.right;\r\n\t\t} else {\r\n\t\t\tif (o.from.some(f => !(f instanceof Type)))\r\n\t\t\t\tthrow this.error('o.from.some(f => !(f instanceof Type))');\r\n\t\t\tif (!(o.to instanceof MetaType))\r\n\t\t\t\tthrow this.error('!(o.to instanceof MetaType)');\r\n\r\n\t\t\tif (o.to.isFunctional)\r\n\t\t\t\tthrow this.error('Functional metatype in functional metatype is not supported');\r\n\r\n\t\t\tthis.from = o.from;\r\n\t\t\tthis.to = o.to;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic resolve() {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number) {\r\n\t\tif (this.isSimple) return `[${this.left.join(', ')} |- ${this.right}]`;\r\n\r\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tthrow new Error('Method not implemented.');\r\n\t}\r\n\r\n\tpublic equals(t: object): boolean {\r\n\t\tif (!(t instanceof MetaType)) return false;\r\n\r\n\t\tif (this.isSimple != t.isSimple) return false;\r\n\r\n\t\tif (this.isSimple) {\r\n\t\t\tif (this.left.length != t.left.length) return false;\r\n\r\n\t\t\tfor (let i = 0; i < this.left.length; i++) {\r\n\t\t\t\tif (!this.left[i].equals(t.left[i])) return false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.right.equals(t.right)) return false;\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (this.from.length != t.from.length) return false;\r\n\r\n\t\tfor (let i = 0; i < this.from.length; i++)\r\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\r\n\r\n\t\treturn this.to.equals(t.to);\r\n\t}\r\n}","import Scope from '../Scope';\r\nimport Node, { Precedence } from './Node';\r\n\r\nexport default class Ruleset extends Node {\r\n\tpublic readonly _type = 'ruleset';\r\n\r\n\tpublic readonly axiomatic: boolean;\r\n\tpublic readonly name: string;\r\n\tpublic readonly native;\r\n\r\n\tconstructor ({axiomatic, name, native, doc}, scope?: Scope) {\r\n\t\tsuper(scope);\r\n\r\n\t\tthis.doc = doc;\r\n\r\n\t\tif (typeof name != 'string')\r\n\t\t\tthrow this.error('Assertion failed');\r\n\r\n\t\tif (!native)\r\n\t\t\tthrow this.error('Assertion failed');\r\n\t\t\r\n\t\tthis.axiomatic = axiomatic;\r\n\t\tthis.name = name;\r\n\t\tthis.native = native || false;\r\n\t}\r\n\r\n\tpublic isProved(hyps) {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn super.isProved(hyps) || this.axiomatic;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn `RS ${this.name}`\r\n\t\t\t+ (this.native ? ' <native>' : ' <error>');\r\n\t}\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\treturn `\\\\href{#ruleset-${this.name}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}`\r\n\t\t\t+ (this.native ? '\\\\ (\\\\textrm{native})' : '\\\\ (\\\\textit{error})');\r\n\t}\r\n}","var grammar;\r\n\r\nif (process.env.__webpack__) {\r\n\tgrammar = require('raw-loader!./grammar.pegjs').default;\r\n} else {\r\n\tvar fs = require('fs');\r\n\tvar path = require('path');\r\n\r\n\tgrammar = fs.readFileSync(path.join(__dirname, 'grammar.pegjs'), 'utf-8');\r\n}\r\n\r\nvar Program = require('./Program').default;\r\n\r\nmodule.exports = {grammar, Program};","export default \"start =\\r\\n\\t_ lines:(a:line _ {return a})* {return lines}\\r\\n\\r\\nline =\\r\\n\\ttypedef\\r\\n\\t/ defv\\r\\n\\t/ defun\\r\\n\\t/ defruleset\\r\\n\\t/ defschema\\r\\n\\r\\nevaluable =\\r\\n\\t_ e:evaluable_internal _ {return e}\\r\\n\\r\\nevaluable_internal =\\r\\n\\ttypedef\\r\\n\\t/ defv\\r\\n\\t/ defun\\r\\n\\t/ defruleset\\r\\n\\t/ defschema\\r\\n\\t/ metaexpr\\r\\n\\r\\ntypedef =\\r\\n\\tdoc:(documentation __)?\\r\\n\\tbase:(\\\"base\\\" __)?\\r\\n\\t\\\"type\\\" __\\r\\n\\torigin:(o:ftype __ {return o})?\\r\\n\\tname:ident _ sem\\r\\n\\t{\\r\\n\\t\\tdoc = doc && doc[0];\\r\\n\\t\\t\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'typedef',\\r\\n\\t\\t\\tdoc,\\r\\n\\t\\t\\tbase: !!base,\\r\\n\\t\\t\\torigin,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefv =\\r\\n\\tdoc:(documentation __)? tex:(tex __)? type:type __ name:ident _ sem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefparam =\\r\\n\\ttex:(tex __)? type:type __ name:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tisParam: true,\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefschemaparam =\\r\\n\\ttex:(tex __)? type:type __ name:ident\\r\\n\\tguess:(_ ':' _ '@' g:$[a-z0-9_]+ {return g})?\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tisParam: true,\\r\\n\\t\\t\\tguess,\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n \\r\\ndefun =\\r\\n\\tdoc:(documentation __)?\\r\\n\\ttex:(tex __)?\\r\\n\\trettype:type __\\r\\n\\tname:ident _\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\texpr:(\\r\\n\\t\\t\\\"{\\\" _\\r\\n\\t\\texpr:expr0 _\\r\\n\\t\\t\\\"}\\\"\\r\\n\\t\\t{return expr}\\r\\n\\t\\t/ sem {return null}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defun',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\trettype,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefschema =\\r\\n\\t// native schemata\\r\\n\\tdoc:(documentation __)?\\r\\n\\taxiomatic:(\\\"axiomatic\\\" __)?\\r\\n\\t\\\"native\\\" __\\r\\n\\t\\\"schema\\\" __\\r\\n\\tname:ident _\\r\\n\\tsem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defschema',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\taxiomatic: !!axiomatic,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tnative: true,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/\\r\\n\\t// non-native schemata\\r\\n\\tdoc:(documentation __)?\\r\\n\\taxiomatic:(\\\"axiomatic\\\" __)?\\r\\n\\t\\\"schema\\\" __\\r\\n\\tname:ident _\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defschemaparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defschemaparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"{\\\" _\\r\\n\\texpr:metaexpr _\\r\\n\\t\\\"}\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defschema',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\taxiomatic: !!axiomatic,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tnative: false,\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefruleset =\\r\\n\\tdoc:(documentation __)?\\r\\n\\taxiomatic:(\\\"axiomatic\\\" __)?\\r\\n\\t\\\"native\\\" __\\r\\n\\t\\\"ruleset\\\" __\\r\\n\\tname:ident _\\r\\n\\tsem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defruleset',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\taxiomatic: !!axiomatic,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tnative: true,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// var[...]\\r\\n// foo(...)[...]\\r\\n// foo[...][...]\\r\\n// (metaexpr)[...]\\r\\n// schema(?, ...)[...]\\r\\nreduction =\\r\\n\\tsubject:(\\r\\n\\t\\tschemacall\\r\\n\\t\\t/ var\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:metaexpr _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\tguesses:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:('?' {return null} / expr0) _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:('?' {return null} / expr0) _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)?\\r\\n\\tleftargs:(\\r\\n\\t\\t\\\"[\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:metaexpr _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:metaexpr _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\"]\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)+\\r\\n\\t{\\r\\n\\t\\tvar ret = {\\r\\n\\t\\t\\t_type: 'reduction',\\r\\n\\t\\t\\tsubject,\\r\\n\\t\\t\\tguesses,\\r\\n\\t\\t\\tleftargs: leftargs[0],\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfor (var i = 1; i < leftargs.length; i++) {\\r\\n\\t\\t\\tret = {\\r\\n\\t\\t\\t\\t_type: 'reduction',\\r\\n\\t\\t\\t\\tsubject: ret,\\r\\n\\t\\t\\t\\tguesses: null,\\r\\n\\t\\t\\t\\tleftargs: leftargs[i],\\r\\n\\t\\t\\t\\tlocation: location()\\r\\n\\t\\t\\t};\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn ret;\\r\\n\\t}\\r\\n\\r\\n// var(...)\\r\\n// (metaexpr)(...)\\r\\nschemacall =\\r\\n\\tschema:(\\r\\n\\t\\tvar\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:metaexpr _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\targs:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:expr0 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'schemacall',\\r\\n\\t\\t\\tschema,\\r\\n\\t\\t\\targs,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// forall(f, g)\\r\\n// (expr0)(f, g)\\r\\nfuncall =\\r\\n\\tschema:(\\r\\n\\t\\tvar\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:expr0 _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\targs:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:expr0 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'funcall',\\r\\n\\t\\t\\tschema,\\r\\n\\t\\t\\targs,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// (T t) => { expr0 }\\r\\nfunexpr =\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"=>\\\" _\\r\\n\\t\\\"{\\\" _ expr:expr0 _ \\\"}\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'funexpr',\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// (T t) => { metaexpr }\\r\\nschemaexpr =\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"=>\\\" _\\r\\n\\t\\\"{\\\" _ expr:metaexpr _ \\\"}\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'schemaexpr',\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nmetaexpr =\\r\\n\\t// right associativity\\r\\n\\ta:(\\r\\n\\t\\tmetaexpr_internal_1\\r\\n\\t) _ \\\"~\\\" _ b:metaexpr\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'reduction',\\r\\n\\t\\t\\tsubject: {\\r\\n\\t\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\t\\ttype: 'normal',\\r\\n\\t\\t\\t\\tname: 'cut',\\r\\n\\t\\t\\t\\tlocation: location()\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tleftargs: [a, b],\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/ metaexpr_internal_1\\r\\n\\r\\nmetaexpr_internal_1 =\\r\\n\\tleft:(\\r\\n\\t\\tl:(\\r\\n\\t\\t\\thead:metaexpr_internal_2 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:metaexpr_internal_2 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)? {return l || []}\\r\\n\\t)\\r\\n\\t\\\"|-\\\" _\\r\\n\\tright:metaexpr_internal_1\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'tee',\\r\\n\\t\\t\\tleft,\\r\\n\\t\\t\\tright,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/ metaexpr_internal_2\\r\\n\\r\\n/*\\r\\n * 다음이 성립하여야 한다.\\r\\n *\\r\\n * - reduction이 schemacall보다 앞이다.\\r\\n * - schemacall이 var보다 앞이다.\\r\\n *\\r\\n */\\r\\nmetaexpr_internal_2 =\\r\\n\\treduction\\r\\n\\t/ schemacall\\r\\n\\t/ var\\r\\n\\t/ schemaexpr\\r\\n\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\" {return e}\\r\\n\\r\\nexpr0 =\\r\\n\\tfuncall\\r\\n\\t/ funexpr\\r\\n\\t/ var\\r\\n\\t/ \\\"(\\\" _ e:expr0 _ \\\")\\\" {return e}\\r\\n\\r\\ntype =\\r\\n\\tstype\\r\\n\\t/ ftype\\r\\n\\r\\nstype =\\r\\n\\tname:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'type',\\r\\n\\t\\t\\tftype: false,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nftype =\\r\\n\\t\\\"[\\\" _\\r\\n\\tfrom:(\\r\\n\\t\\ttype:type {return [type]}\\r\\n\\t\\t/ (\\r\\n\\t\\t\\ttt:(\\r\\n\\t\\t\\t\\t\\\"(\\\" _\\r\\n\\t\\t\\t\\thead: type\\r\\n\\t\\t\\t\\ttail:(_ \\\",\\\" _ t:type {return t})*\\r\\n\\t\\t\\t\\t_ \\\")\\\"\\r\\n\\t\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t\\t)\\r\\n\\t\\t\\t{return tt}\\r\\n\\t\\t)\\r\\n\\t) _\\r\\n\\t\\\"->\\\" _\\r\\n\\tto:type _\\r\\n\\t\\\"]\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'type',\\r\\n\\t\\t\\tftype: true,\\r\\n\\t\\t\\tfrom,\\r\\n\\t\\t\\tto,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nvar =\\r\\n\\trulesetName:(id:ident _ \\\".\\\" _ {return id})?\\r\\n\\tname:ident\\r\\n\\t{\\r\\n\\t\\treturn rulesetName\\r\\n\\t\\t\\t? {\\r\\n\\t\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\t\\ttype: 'ruleset',\\r\\n\\t\\t\\t\\trulesetName,\\r\\n\\t\\t\\t\\tname,\\r\\n\\t\\t\\t\\tlocation: location()\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t: {\\r\\n\\t\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\t\\ttype: 'normal',\\r\\n\\t\\t\\t\\tname,\\r\\n\\t\\t\\t\\tlocation: location()\\r\\n\\t\\t\\t}\\r\\n\\t}\\r\\n\\r\\nkeyword =\\r\\n\\t\\\"axiomatic\\\"\\r\\n\\t/ \\\"base\\\"\\r\\n\\t/ \\\"native\\\"\\r\\n\\t/ \\\"ruleset\\\"\\r\\n\\t/ \\\"schema\\\"\\r\\n\\t/ \\\"type\\\";\\r\\n\\r\\nident =\\r\\n\\t$(!keyword [a-zA-Z0-9_]+)\\r\\n\\r\\ndocumentation =\\r\\n\\t'\\\"' b:$(!'\\\"' a:. {return a})* '\\\"' {\\r\\n\\t\\treturn b\\r\\n\\t}\\r\\n\\r\\ntex =\\r\\n\\t'$' b:$(!'$' a:. {return a})* '$' {\\r\\n\\t\\treturn b\\r\\n\\t}\\r\\n\\r\\ncomment =\\r\\n\\t\\\"#\\\" (!newline .)*\\r\\n\\t/ \\\"//\\\" (!newline .)*\\r\\n\\t/ \\\"/*\\\" (!\\\"*/\\\" .)* \\\"*/\\\"\\r\\n\\r\\nnewline =\\r\\n\\t\\\"\\\\r\\\\n\\\" / \\\"\\\\r\\\" / \\\"\\\\n\\\"\\r\\n\\r\\n// optional whitespace\\r\\n_ =\\r\\n\\t([ \\\\t\\\\n\\\\r] / comment)*\\r\\n\\r\\n// mandatory whitespace\\r\\n__ =\\r\\n\\t([ \\\\t\\\\n\\\\r] / comment)+\\r\\n\\r\\nsem =\\r\\n\\t\\\";\\\"\";","import Scope from './Scope';\r\nimport PegInterface from './PegInterface';\r\nimport ExpressionResolver from './ExpressionResolver';\r\nimport Schema from './nodes/Schema';\r\nimport Typevar from './nodes/Typevar';\r\nimport Tee from './nodes/Tee';\r\nimport Schemacall from './nodes/Schemacall';\r\nimport Type from './nodes/Type';\r\n\r\nexport default class Program {\r\n\tpublic scope = new Scope(null);\r\n\t\r\n\tconstructor() {}\r\n\r\n\tpublic feed(lines) {\r\n\t\tlines.forEach(line => {\r\n\t\t\tswitch (line._type) {\r\n\t\t\t\tcase 'typedef':\r\n\t\t\t\t\tvar type = PegInterface.type(line, this.scope);\r\n\r\n\t\t\t\t\tif (this.scope.hasType(type.name)) {\r\n\t\t\t\t\t\tthrow type.scope.error(`Type ${type.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.scope.addType(type);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defv':\r\n\t\t\t\t\tvar typevar = PegInterface.typevar(line, this.scope);\r\n\r\n\t\t\t\t\tif (this.scope.hasTypevar(typevar.name)) {\r\n\t\t\t\t\t\tthrow typevar.scope.error(`Definition ${typevar.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.scope.addTypevar(typevar);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defun':\r\n\t\t\t\t\tvar fun = PegInterface.fun(line, this.scope);\r\n\r\n\t\t\t\t\tif (this.scope.hasTypevar(fun.name)) {\r\n\t\t\t\t\t\tthrow fun.scope.error(`Definition ${fun.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.scope.addFun(fun);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defruleset':\r\n\t\t\t\t\tvar ruleset = PegInterface.ruleset(line, this.scope, this.nativeMap);\r\n\r\n\t\t\t\t\tif (this.scope.hasRuleset(ruleset.name)) {\r\n\t\t\t\t\t\tthrow ruleset.scope.error(`Ruleset ${ruleset.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.scope.addRuleset(ruleset);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defschema':\r\n\t\t\t\t\tvar schema = PegInterface.schema(line, this.scope, this.nativeMap);\r\n\r\n\t\t\t\t\tif (this.scope.hasSchema(schema.name)) {\r\n\t\t\t\t\t\tthrow schema.scope.error(`Schema ${schema.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.scope.addSchema(schema);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow Error(`Unknown line type ${line._type}`);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic evaluate(line) {\r\n\t\tswitch (line._type) {\r\n\t\t\tcase 'typedef':\r\n\t\t\tcase 'defv':\r\n\t\t\tcase 'defun':\r\n\t\t\tcase 'defruleset':\r\n\t\t\tcase 'defschema':\r\n\t\t\tcase 'tee':\r\n\t\t\tcase 'reduction':\r\n\t\t\tcase 'schemacall':\r\n\t\t\tcase 'var':\r\n\t\t\tcase 'schemaexpr':\r\n\t\t\t\treturn PegInterface[({\r\n\t\t\t\t\ttypedef: 'type',\r\n\t\t\t\t\tdefv: 'typevar',\r\n\t\t\t\t\tdefun: 'fun',\r\n\t\t\t\t\tdefruleset: 'ruleset',\r\n\t\t\t\t\tdefschema: 'schema',\r\n\t\t\t\t\ttee: 'tee',\r\n\t\t\t\t\treduction: 'reduction',\r\n\t\t\t\t\tschemacall: 'schemacall',\r\n\t\t\t\t\tvar: 'metavar',\r\n\t\t\t\t\tschemaexpr: 'schemaexpr'\r\n\t\t\t\t})[line._type]](line, this.scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error(`Unknown line type ${line._type}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic nativeMap = {\r\n\t\truleset: {\r\n\t\t\ttt: {\r\n\t\t\t\tget: (name: string, scope: Scope): Schema => {\r\n\t\t\t\t\tif (typeof name != 'string')\r\n\t\t\t\t\t\tthrow Error('Assertion failed');\r\n\t\r\n\t\t\t\t\tvar vars = ['p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\r\n\t\t\t\t\tvar nullary = ['T', 'F'].concat(vars);\r\n\t\t\t\t\tvar unary = ['N'];\r\n\t\t\t\t\tvar binary = ['A', 'O', 'I', 'E'];\r\n\t\r\n\t\t\t\t\tvar arityMap = {};\r\n\t\t\t\t\tnullary.forEach(e => arityMap[e] = 0);\r\n\t\t\t\t\tunary.forEach(e => arityMap[e] = 1);\r\n\t\t\t\t\tbinary.forEach(e => arityMap[e] = 2);\r\n\t\r\n\t\t\t\t\tvar usedVars = Array(vars.length).fill(false);\r\n\t\r\n\t\t\t\t\t// 1: 파싱 하기\r\n\t\t\t\t\tvar stack = [];\r\n\t\r\n\t\t\t\t\tfunction lastIsFull() {\r\n\t\t\t\t\t\tif (!stack.length) return true;\r\n\t\t\t\t\t\treturn arityMap[stack[stack.length - 1][0]] == stack[stack.length - 1].length - 1;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tfunction push(token) {\r\n\t\t\t\t\t\tif (arityMap[token] == 0) {\r\n\t\t\t\t\t\t\tif (vars.includes(token))\r\n\t\t\t\t\t\t\t\tusedVars[vars.indexOf(token)] = true;\r\n\t\r\n\t\t\t\t\t\t\tif (lastIsFull()) {\r\n\t\t\t\t\t\t\t\tstack.push(token);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tstack[stack.length - 1].push(token);\r\n\t\r\n\t\t\t\t\t\t\t\twhile (stack.length > 1 && lastIsFull()\r\n\t\t\t\t\t\t\t\t\t\t&& (stack[stack.length - 2] instanceof Array)) {\r\n\t\t\t\t\t\t\t\t\tvar p = stack.pop();\r\n\t\t\t\t\t\t\t\t\tstack[stack.length - 1].push(p);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tstack.push([token]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tfor (var i = 0; i < name.length; i++) {\r\n\t\t\t\t\t\tif (typeof arityMap[name[i]] != 'number')\r\n\t\t\t\t\t\t\tthrow Error(`Unexpected character ${name[i]}`);\r\n\t\r\n\t\t\t\t\t\tpush(name[i]);\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif (stack.length != 1)\r\n\t\t\t\t\t\tthrow Error('Parse failed');\r\n\t\r\n\t\t\t\t\tif (!lastIsFull())\r\n\t\t\t\t\t\tthrow Error('Parse failed');\r\n\t\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tusedVars = usedVars.map((e, i) => e && i).filter(e => e !== false);\r\n\t\r\n\t\t\t\t\tvar parsed = stack[0];\r\n\t\r\n\t\t\t\t\t// 2: 진리표 확인\r\n\t\t\t\t\tvar collen = 2 ** usedVars.length;\r\n\t\r\n\t\t\t\t\tvar functionMap = {\r\n\t\t\t\t\t\tN: p => !p,\r\n\t\t\t\t\t\tA: (p, q) => p && q,\r\n\t\t\t\t\t\tO: (p, q) => p || q,\r\n\t\t\t\t\t\tI: (p, q) => !p || q,\r\n\t\t\t\t\t\tE: (p, q) => p == q\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\tvar varTable = {};\r\n\t\r\n\t\t\t\t\tfor (var i = 0; i < usedVars.length; i++) {\r\n\t\t\t\t\t\tvarTable[vars[usedVars[i]]] = Array(collen).fill(null).map((_, j) => {\r\n\t\t\t\t\t\t\treturn !((j >> (usedVars.length - i - 1)) & 1);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tvar constTable = {\r\n\t\t\t\t\t\tT: Array(collen).fill(true),\r\n\t\t\t\t\t\tF: Array(collen).fill(false)\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\tfunction getColumn(t) {\r\n\t\t\t\t\t\tif (t instanceof Array) {\r\n\t\t\t\t\t\t\tvar columns = t.slice(1).map(getColumn);\r\n\t\r\n\t\t\t\t\t\t\tvar column = Array(collen);\r\n\t\r\n\t\t\t\t\t\t\tfor (var i = 0; i < collen; i++) {\r\n\t\t\t\t\t\t\t\tcolumn[i] = functionMap[t[0]](...columns.map(col => col[i]));\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\treturn column;\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif (['T', 'F'].includes(t)) return constTable[t];\r\n\t\t\t\t\t\treturn varTable[t];\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif (!getColumn(parsed).every(e => e))\r\n\t\t\t\t\t\tthrow Error('Validation failed');\r\n\t\r\n\t\t\t\t\t// 3: 노드 트리 만들기\r\n\t\t\t\t\tif (!scope.baseType)\r\n\t\t\t\t\t\tthrow Error(`Base type not found`);\r\n\t\r\n\t\t\t\t\tvar base = scope.baseType;\r\n\t\r\n\t\t\t\t\tvar typevars = Array(usedVars.length).fill(null).map((_, i) => {\r\n\t\t\t\t\t\treturn new Typevar({\r\n\t\t\t\t\t\t\ttype: base,\r\n\t\t\t\t\t\t\tname: vars[usedVars[i]]\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\r\n\t\t\t\t\tvar typevarMap = {\r\n\t\t\t\t\t\t'T': 'T',\r\n\t\t\t\t\t\t'F': 'F',\r\n\t\t\t\t\t\t'N': 'N',\r\n\t\t\t\t\t\t'A': 'A',\r\n\t\t\t\t\t\t'O': 'O',\r\n\t\t\t\t\t\t'I': 'I',\r\n\t\t\t\t\t\t'E': 'E'\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\tObject.keys(typevarMap).forEach(k => {\r\n\t\t\t\t\t\tvar v = typevarMap[k];\r\n\t\r\n\t\t\t\t\t\tif (!scope.root.hasTypevar(v))\r\n\t\t\t\t\t\t\tthrow Error(`Typevar ${v} not found`);\r\n\t\t\t\t\t\ttypevarMap[k] = scope.root.getTypevar(v);\r\n\t\t\t\t\t});\r\n\t\r\n\t\t\t\t\tfunction recurse(t) {\r\n\t\t\t\t\t\tif (t instanceof Array) {\r\n\t\t\t\t\t\t\treturn new Schemacall({\r\n\t\t\t\t\t\t\t\tschema: recurse(t[0]),\r\n\t\t\t\t\t\t\t\targs: t.slice(1).map(recurse)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif (vars.includes(t)) return typevars[vars.indexOf(t)];\r\n\t\t\t\t\t\treturn typevarMap[t];\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tvar funcall = recurse(parsed);\r\n\t\r\n\t\t\t\t\tvar tee = new Tee({\r\n\t\t\t\t\t\tleft: [],\r\n\t\t\t\t\t\tright: funcall\r\n\t\t\t\t\t});\r\n\t\r\n\t\t\t\t\tvar schema = new Schema({\r\n\t\t\t\t\t\tshouldValidate: true,\r\n\t\t\t\t\t\taxiomatic: true,\r\n\t\t\t\t\t\tname: 'tt.' + name,\r\n\t\t\t\t\t\tparams: typevars,\r\n\t\t\t\t\t\texpr: tee\r\n\t\t\t\t\t});\r\n\t\r\n\t\t\t\t\treturn schema;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tschema: {\r\n\t\t\tcut: {\r\n\t\t\t\tget: (rules, scope: Scope) => {\r\n\t\t\t\t\treturn ExpressionResolver.chain(rules.map(ExpressionResolver.expandMeta));\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tmpu: {\r\n\t\t\t\tget: (rules, scope: Scope) => {\r\n\t\t\t\t\tif (rules.length != 1) throw Error('wut');\r\n\t\t\t\t\tvar rule = rules[0];\r\n\t\r\n\t\t\t\t\tif (!scope.baseType)\r\n\t\t\t\t\t\tthrow Error(`Base type not found`);\r\n\t\r\n\t\t\t\t\tvar base = scope.baseType;\r\n\t\r\n\t\t\t\t\tvar tee = ExpressionResolver.expandMeta(rule) as Tee;\r\n\t\r\n\t\t\t\t\tvar right = ExpressionResolver.expandMetaAndFuncalls(tee.right);\r\n\t\r\n\t\t\t\t\tif (tee._type != 'tee')\r\n\t\t\t\t\t\tthrow Error('wut');\r\n\t\r\n\t\t\t\t\tif (!scope.hasTypevar('I'))\r\n\t\t\t\t\t\tthrow Error(`Typevar I not found`);\r\n\t\r\n\t\t\t\t\tvar I = scope.getTypevar('I');\r\n\t\r\n\t\t\t\t\tif (!I.type.equals(new Type({\r\n\t\t\t\t\t\tfunctional: true,\r\n\t\t\t\t\t\tfrom: [base, base],\r\n\t\t\t\t\t\tto: base\r\n\t\t\t\t\t})))\r\n\t\t\t\t\t\tthrow Error(`Wrong type for I`);\r\n\t\r\n\t\t\t\t\tif (right._type != 'schemacall' || right.schema != I) {\r\n\t\t\t\t\t\tconsole.log(right);\r\n\t\t\t\t\t\tthrow Error('wut');\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\treturn new Tee({\r\n\t\t\t\t\t\tleft: tee.left.concat([right.args[0]]),\r\n\t\t\t\t\t\tright: right.args[1]\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tpublic getProofExplorer(name: string, ktx) {\r\n\t\tvar ctr = 0;\r\n\t\r\n\t\tvar DIAMOND = '&#x25C7;',\r\n\t\t\tDOWN = '&#x25BC;',\r\n\t\t\tUP = '&#x25B2;';\r\n\t\t\r\n\t\tif (!this.scope.schemaMap.has(name)) {\r\n\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t\r\n\t\tvar expr = this.scope.schemaMap.get(name).expr;\r\n\t\r\n\t\tvar ncols = (function recurse(expr) {\r\n\t\t\tswitch (expr._type) {\r\n\t\t\t\tcase 'reduction':\r\n\t\t\t\t\treturn Math.max(\r\n\t\t\t\t\t\t...expr.leftargs.map(recurse),\r\n\t\t\t\t\t\t((expr.subject._type == 'schema' && expr.subject.name)\r\n\t\t\t\t\t\t\t|| (expr.subject._type == 'schemacall' && expr.subject.schema.name)\r\n\t\t\t\t\t\t\t\t? 0 : recurse(expr.subject)),\r\n\t\t\t\t\t\t1\r\n\t\t\t\t\t);\r\n\t\t\t\tcase 'schema':\r\n\t\t\t\t\treturn recurse(expr.expr) + 1;\r\n\t\t\t\tcase 'tee':\r\n\t\t\t\t\treturn Math.max(\r\n\t\t\t\t\t\t...expr.left.map(recurse),\r\n\t\t\t\t\t\trecurse(expr.right)\r\n\t\t\t\t\t) + 1;\r\n\t\t\t\tcase 'schemacall':\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t})(expr);\r\n\t\r\n\t\tvar html = '<table class=\"explorer\">';\r\n\t\thtml += `<tr><th>#</th><th colspan=\"${ncols}\">expr</th><th colspan=\"2\">rule</th></tr>`;\r\n\t\r\n\t\tfunction getHtml(left, h1, h2, bbb?: boolean, noctr?: boolean) {\r\n\t\t\tvar padding = left.length;\r\n\t\r\n\t\t\tvar htmlLeft = left.map(e => `<td class=\"brb\">${e.map(f => ktx(f.toTeXString(true))).join(', ')}</td>`).join('');\r\n\t\r\n\t\t\treturn `<tr><th>${noctr ? '' : ++ctr}</th>${htmlLeft}<td ${bbb ? 'class=\"bbb\"' : ''} colspan=\"${ncols-padding}\">${h1}</td>${h2}</tr>`;\r\n\t\t}\r\n\t\r\n\t\tfunction getHypNo(hyps, expr) {\r\n\t\t\tfor (var i = 0; i < hyps.length; i++) {\r\n\t\t\t\tvar [hyp, lineno] = hyps[i];\r\n\t\r\n\t\t\t\tif (ExpressionResolver.equals(hyp, expr)) {\r\n\t\t\t\t\treturn lineno;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\r\n\t\thtml += (function recurse(expr, left, hyps) {\r\n\t\t\tvar hypno = getHypNo(hyps, expr);\r\n\t\r\n\t\t\tif (hypno) {\r\n\t\t\t\treturn getHtml(\r\n\t\t\t\t\tleft,\r\n\t\t\t\t\tktx(expr.toTeXString(true)),\r\n\t\t\t\t\t`<td>${DIAMOND}</td><td>[<b>${hypno}</b>]</td>`\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\r\n\t\t\tswitch (expr._type) {\r\n\t\t\t\tcase 'reduction':\r\n\t\t\t\t\tvar leftPrinted = false;\r\n\t\r\n\t\t\t\t\tvar leftargs = expr.leftargs.map(leftarg => {\r\n\t\t\t\t\t\tvar hypno = getHypNo(hyps, leftarg);\r\n\t\r\n\t\t\t\t\t\tif (hypno) {\r\n\t\t\t\t\t\t\treturn [false, hypno];\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif (!leftPrinted) {\r\n\t\t\t\t\t\t\tleftPrinted = true;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tleft = Array(left.length).fill([]);\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\treturn [\r\n\t\t\t\t\t\t\trecurse(\r\n\t\t\t\t\t\t\t\tleftarg,\r\n\t\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\t\thyps\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\tctr\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\t});\r\n\t\r\n\t\t\t\t\tif (leftPrinted) {\r\n\t\t\t\t\t\tleft = Array(left.length).fill([]);\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ((expr.subject._type == 'schema' && expr.subject.name)\r\n\t\t\t\t\t\t\t|| (expr.subject._type == 'schemacall' && expr.subject.schema.name)) {\r\n\t\t\t\t\t\treturn [\r\n\t\t\t\t\t\t\tleftargs.map(e => e[0]).filter(e => e).join(''),\r\n\t\t\t\t\t\t\tgetHtml(\r\n\t\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\t\tktx(expr.reduced.toTeXString(true)),\r\n\t\t\t\t\t\t\t\t`<td>${DOWN}</td><td>${ktx(expr.subject.toTeXString(true))} [${leftargs.map(e => `<b>${e[1]}</b>`).join(', ')}]</td>`\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t].join('');\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tvar subject = (() => {\r\n\t\t\t\t\t\tvar hypno = getHypNo(hyps, expr.subject);\r\n\t\r\n\t\t\t\t\t\tif (hypno) {\r\n\t\t\t\t\t\t\treturn [false, hypno];\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif (!leftPrinted) {\r\n\t\t\t\t\t\t\tleftPrinted = true;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tleft = Array(left.length).fill([]);\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\treturn [\r\n\t\t\t\t\t\t\trecurse(\r\n\t\t\t\t\t\t\t\texpr.subject,\r\n\t\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\t\thyps\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\tctr\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\t})();\r\n\t\r\n\t\t\t\t\tif (leftPrinted) {\r\n\t\t\t\t\t\tleft = Array(left.length).fill([]);\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\treturn [\r\n\t\t\t\t\t\tleftargs.map(e => e[0]).filter(e => e).join(''),\r\n\t\t\t\t\t\tsubject[0] || '',\r\n\t\t\t\t\t\tgetHtml(\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\tktx(expr.reduced.toTeXString(true)),\r\n\t\t\t\t\t\t\t`<td>${DOWN}</td><td><b>${subject[1]}</b> [${leftargs.map(e => `<b>${e[1]}</b>`).join(', ')}]</td>`\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t].join('');\r\n\t\t\t\tcase 'schemacall':\r\n\t\t\t\t\tvar callee = expr.schema;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar expanded = ExpressionResolver.expandMetaAndFuncalls(expr);\r\n\t\r\n\t\t\t\t\tif (callee.shouldValidate && callee.name) {\r\n\t\t\t\t\t\treturn getHtml(\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\tktx(expanded.toTeXString(true)),\r\n\t\t\t\t\t\t\t`<td>${DIAMOND}</td><td>${ktx(expr.toTeXString(true))}</td>`\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tvar hypno = getHypNo(hyps, callee);\r\n\t\r\n\t\t\t\t\tif (hypno) {\r\n\t\t\t\t\t\treturn getHtml(\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\tktx(expanded.toTeXString(true)),\r\n\t\t\t\t\t\t\t`<td>${DIAMOND}</td><td><b>${hypno}</b> (${expr.args.map(arg => ktx(arg.toTeXString(true))).join(', ')})</td>`\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\treturn getHtml(\r\n\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\tktx(expanded.toTeXString(true)),\r\n\t\t\t\t\t\t'<td colspan=\"2\"><b class=\"red\">not proved</b></td>'\r\n\t\t\t\t\t);\r\n\t\t\t\tcase 'typevar':\r\n\t\t\t\t\tvar hypno = getHypNo(hyps, expr);\r\n\t\r\n\t\t\t\t\tif (hypno) {\r\n\t\t\t\t\t\treturn getHtml(\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\tktx(expr.toTeXString(true)),\r\n\t\t\t\t\t\t\t`<td>${DIAMOND}</td><td><b>${hypno}</b></td>`\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\treturn getHtml(\r\n\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\tktx(expr.toTeXString(true)),\r\n\t\t\t\t\t\t'<td colspan=\"2\"><b class=\"red\">not proved</b></td>'\r\n\t\t\t\t\t);\r\n\t\t\t\tcase 'schema':\r\n\t\t\t\t\tif (expr.name) {\r\n\t\t\t\t\t\treturn getHtml(\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\tktx(expr.toTeXString(true, true)),\r\n\t\t\t\t\t\t\t`<td>${DIAMOND}</td><td>${ktx(expr.toTeXString(true))}</td>`\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\treturn recurse(\r\n\t\t\t\t\t\texpr.expr,\r\n\t\t\t\t\t\tleft.concat([expr.params]),\r\n\t\t\t\t\t\thyps\r\n\t\t\t\t\t);\r\n\t\t\t\tcase 'tee':\r\n\t\t\t\t\tvar start = ctr + 1;\r\n\t\t\t\t\tvar arr = [\r\n\t\t\t\t\t\t...(\r\n\t\t\t\t\t\t\texpr.left.length\r\n\t\t\t\t\t\t\t\t? expr.left.map((e, i, a) => getHtml(\r\n\t\t\t\t\t\t\t\t\t(i == 0 ? left.concat([[]]) : Array(left.length + 1).fill([])),\r\n\t\t\t\t\t\t\t\t\tktx(e.toTeXString(true)),\r\n\t\t\t\t\t\t\t\t\t'<td colspan=\"2\">assumption</td>',\r\n\t\t\t\t\t\t\t\t\ti == a.length - 1\r\n\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t: [getHtml(\r\n\t\t\t\t\t\t\t\t\tArray(left.length + 1).fill([]),\r\n\t\t\t\t\t\t\t\t\t'',\r\n\t\t\t\t\t\t\t\t\t'<td colspan=\"2\"></td>',\r\n\t\t\t\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t\t\t\ttrue\r\n\t\t\t\t\t\t\t\t)]\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\trecurse(\r\n\t\t\t\t\t\t\texpr.right,\r\n\t\t\t\t\t\t\t(expr.left.length == 0 ? left.concat([[]]) : Array(left.length + 1).fill([])),\r\n\t\t\t\t\t\t\thyps.concat(expr.left.map((e, i) => [e, start + i]))\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t];\r\n\t\t\t\t\tvar end = ctr;\r\n\t\r\n\t\t\t\t\treturn [\r\n\t\t\t\t\t\t...arr,\r\n\t\t\t\t\t\tgetHtml(\r\n\t\t\t\t\t\t\tArray(left.length).fill([]),\r\n\t\t\t\t\t\t\tktx(expr.toTeXString(true)),\r\n\t\t\t\t\t\t\t`<td>${UP}</td><td>[<b>${start}</b>&ndash;<b>${end}</b>]</td>`\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t].join('');\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.error(expr.error(`Unknown type ${expr._type}`));\r\n\t\r\n\t\t\t\t\treturn getHtml(\r\n\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\tktx(expr.toTeXString(true)),\r\n\t\t\t\t\t\t'<td colspan=\"2\">???</td>'\r\n\t\t\t\t\t);\r\n\t\t\t}\r\n\t\t})(expr, [], []);\r\n\t\r\n\t\thtml += '</table>';\r\n\t\r\n\t\treturn html;\r\n\t}\r\n}","import Type from './nodes/Type';\r\nimport Typevar from './nodes/Typevar';\r\nimport Ruleset from './nodes/Ruleset';\r\nimport Schema from './nodes/Schema';\r\n\r\nimport StackTrace from './StackTrace';\r\n\r\nexport type NestedTypeInput = string | NestedTypeInput[];\r\n\r\nexport default class Scope {\r\n\tpublic readonly typedefMap: Map<string, Type> = new Map();\r\n\tpublic readonly defMap: Map<string, Typevar | Schema> = new Map();\r\n\tpublic readonly schemaMap: Map<string, Schema> = new Map();\r\n\tpublic readonly rulesetMap: Map<string, Ruleset> = new Map();\r\n\r\n\tpublic readonly parent: Scope;\r\n\tpublic readonly root: Scope;\r\n\r\n\tpublic readonly trace: StackTrace;\r\n\tpublic baseType: Type;\r\n\r\n\tconstructor (parent: Scope, trace?: StackTrace) {\r\n\t\tthis.parent = parent;\r\n\t\tthis.root = parent ? parent.root : this;\r\n\r\n\t\tif (trace && !(trace instanceof StackTrace)) {\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tthis.trace = trace || new StackTrace();\r\n\r\n\t\tthis.baseType = parent ? parent.baseType : null;\r\n\t}\r\n\r\n\tpublic extend(type, name, location): Scope {\r\n\t\treturn new Scope(this, this.trace.extend(type, name, location));\r\n\t}\r\n\r\n\tpublic error(message: string): Error {\r\n\t\treturn this.trace.error(message);\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic hasOwnType(name: NestedTypeInput): boolean {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\treturn this.typedefMap.has(name);\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\treturn name.map(e => {\r\n\t\t\treturn this.hasOwnType(e);\r\n\t\t}).every(e => e);\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic hasType(name: NestedTypeInput): boolean {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\treturn this.hasOwnType(name)\r\n\t\t\t\t|| (!!this.parent && this.parent.hasType(name));\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\treturn name.map(e => {\r\n\t\t\treturn this.hasType(e);\r\n\t\t}).every(e => e);\r\n\t}\r\n\r\n\tpublic addType(type: Type): Type {\r\n\t\tif (!(type instanceof Type))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (!type.name)\r\n\t\t\tthrow this.error('Something\\'s wrong');\r\n\r\n\t\tif (this.hasOwnType(type.name))\r\n\t\t\tthrow this.error(`Type ${type.name} has already been declared`);\r\n\r\n\t\tif (type.isBaseType) {\r\n\t\t\tif (this.baseType) {\r\n\t\t\t\tthrow this.error('A base type already exists');\r\n\t\t\t}\r\n\r\n\t\t\t(function broadcast(scope: Scope) {\r\n\t\t\t\tscope.baseType = type;\r\n\t\t\t\tif (scope.parent) broadcast(scope.parent);\r\n\t\t\t})(this);\r\n\t\t}\r\n\r\n\t\tthis.typedefMap.set(type.name, type);\r\n\t\treturn type;\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic getType(name: NestedTypeInput): Type {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\tif (!this.hasType(name))\r\n\t\t\t\tthrow this.error(`Type ${name} is not defined`);\r\n\r\n\t\t\treturn this.typedefMap.has(name)\r\n\t\t\t\t? this.typedefMap.get(name) : (!!this.parent && this.parent.getType(name));\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\tvar from = name.slice(0, name.length - 1).map(e => {\r\n\t\t\treturn this.getType(e);\r\n\t\t});\r\n\r\n\t\tvar to = this.getType(name[name.length - 1]);\r\n\r\n\t\treturn new Type({\r\n\t\t\tfunctional: true,\r\n\t\t\tfrom,\r\n\t\t\tto\r\n\t\t});\r\n\t}\r\n\r\n\tpublic hasOwnTypevar(name: string): boolean {\r\n\t\treturn this.defMap.has(name);\r\n\t}\r\n\r\n\tpublic hasTypevar(name: string): boolean {\r\n\t\treturn this.hasOwnTypevar(name) ||\r\n\t\t\t(!!this.parent && this.parent.hasTypevar(name));\r\n\t}\r\n\r\n\tpublic addTypevar(typevar: Typevar | Schema): Typevar | Schema {\r\n\t\tif (!(typevar instanceof Typevar))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwnTypevar(typevar.name))\r\n\t\t\tthrow this.error(`Definition ${typevar.name} has already been declared`);\r\n\r\n\t\tthis.defMap.set(typevar.name, typevar);\r\n\t\treturn typevar;\r\n\t}\r\n\r\n\tpublic addFun(fun: Schema): Schema {\r\n\t\tif (!(fun instanceof Schema))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (!fun.name)\r\n\t\t\tthrow this.error('Cannot add anonymous fun to scope');\r\n\r\n\t\tif (this.hasOwnTypevar(fun.name))\r\n\t\t\tthrow this.error(`Definition ${fun.name} has already been declared`);\r\n\r\n\t\tthis.defMap.set(fun.name, fun);\r\n\t\treturn fun;\r\n\t}\r\n\r\n\tpublic getTypevar(name: string): Typevar | Schema {\r\n\t\tif (!this.hasTypevar(name))\r\n\t\t\tthrow this.error(`Definition ${name} is not defined`);\r\n\r\n\t\treturn this.defMap.has(name)\r\n\t\t\t? this.defMap.get(name) : (!!this.parent && this.parent.getTypevar(name));\r\n\t}\r\n\r\n\tpublic hasOwnRuleset(name: string): boolean {\r\n\t\treturn this.rulesetMap.has(name);\r\n\t}\r\n\r\n\tpublic hasRuleset(name: string): boolean {\r\n\t\treturn this.hasOwnRuleset(name)\r\n\t\t\t|| (!!this.parent && this.parent.hasRuleset(name));\r\n\t}\r\n\r\n\tpublic addRuleset(ruleset: Ruleset): Ruleset {\r\n\t\tif (!(ruleset instanceof Ruleset))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwnRuleset(ruleset.name))\r\n\t\t\tthrow this.error(`Ruleset ${ruleset.name} has already been declared`);\r\n\r\n\t\tthis.rulesetMap.set(ruleset.name, ruleset);\r\n\t\treturn ruleset;\r\n\t}\r\n\r\n\tpublic getRuleset(name: string): Ruleset {\r\n\t\tif (!this.hasRuleset(name))\r\n\t\t\tthrow this.error(`Ruleset ${name} is not defined`);\r\n\r\n\t\treturn this.rulesetMap.has(name)\r\n\t\t\t? this.rulesetMap.get(name) : (!!this.parent && this.parent.getRuleset(name));\r\n\t}\r\n\r\n\tpublic hasOwnSchema(name: string): boolean {\r\n\t\treturn this.schemaMap.has(name) || this.defMap.has(name);\r\n\t}\r\n\r\n\tpublic hasSchema(name: string): boolean {\r\n\t\treturn this.hasOwnSchema(name)\r\n\t\t\t|| (!!this.parent && this.parent.hasSchema(name));\r\n\t}\r\n\r\n\tpublic addSchema(schema: Schema): Schema {\r\n\t\tif (!(schema instanceof Schema))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwnSchema(schema.name))\r\n\t\t\tthrow this.error(`Schema ${schema.name} has already been declared`);\r\n\r\n\t\tthis.schemaMap.set(schema.name, schema);\r\n\t\treturn schema;\r\n\t}\r\n\r\n\tpublic getSchema(name: string): Typevar | Schema {\r\n\t\tif (!this.hasSchema(name))\r\n\t\t\tthrow this.error(`Schema ${name} is not defined`);\r\n\r\n\t\treturn this.schemaMap.has(name)\r\n\t\t\t? this.schemaMap.get(name)\r\n\t\t\t: this.defMap.has(name)\r\n\t\t\t\t? this.defMap.get(name)\r\n\t\t\t\t: (!!this.parent && this.parent.getSchema(name));\r\n\t}\r\n}","export default class StackTrace {\r\n\tpublic readonly stack: any[];\r\n\r\n\tconstructor (stack?: any[]) {\r\n\t\tthis.stack = stack || [];\r\n\t}\r\n\r\n\tpublic extend(type, name, location): StackTrace {\r\n\t\treturn new StackTrace([[type, name, location]].concat(this.stack));\r\n\t}\r\n\r\n\tpublic error(message: string) {\r\n\t\tvar filename = typeof process != 'undefined' && process.argv[2];\r\n\r\n\t\treturn new Error(\r\n\t\t\tmessage\r\n\t\t\t+ '\\n\\tat '\r\n\t\t\t+ (\r\n\t\t\t\tthis.stack.length\r\n\t\t\t\t\t? this.stack.map(([type, name, location]) => {\r\n\t\t\t\t\t\treturn `${type} ${name || '<anonymous>'} (${filename || 'code.math'}:${location.start.line}:${location.start.column})`;\r\n\t\t\t\t\t}).join('\\n\\tat ')\r\n\t\t\t\t\t: `<root> (${filename || 'code.math'}:1:1)`\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*\r\n * PEG.js의 출력과 적절한 클래스 사이를 잇는 인터페이스.\r\n * PEG.js의 출력은 여기에서만 처리해야 한다.\r\n */\r\n\r\nimport Type from './nodes/Type';\r\nimport Typevar from './nodes/Typevar';\r\nimport Tee from './nodes/Tee';\r\nimport Ruleset from './nodes/Ruleset';\r\nimport Schema from './nodes/Schema';\r\nimport Schemacall from './nodes/Schemacall';\r\nimport Reduction from './nodes/Reduction';\r\n\r\nimport { Expr0, Metaexpr } from './ExpressionResolver';\r\nimport { DefrulesetObject, DefschemaObject, DefunObject, DefvObject, Expr0Object, FuncallObject, FunexprObject, MetaexprObject, ReductionObject, SchemacallObject, SchemaexprObject, StypeObject, TeeObject, TypedefObject, TypeObject, VarObject } from './PegInterfaceDefinitions';\r\nimport Scope, { NestedTypeInput } from './Scope';\r\n\r\nfunction typeObjToString(obj: TypeObject): string {\r\n\tif (obj._type != 'type')\r\n\t\tthrow Error('Assertion failed');\r\n\r\n\tif (!obj.ftype) return (obj as StypeObject).name;\r\n\treturn '[' + obj.from.map(typeObjToString).join(', ') + ' -> '\r\n\t\t\t+ typeObjToString(obj.to) + ']';\r\n}\r\n\r\n/*\r\n * Scope#getType이나 Scope#hasType 등의 입력 형태로 바꾼다.\r\n * st\t\t\t\t\t\t-> 'st'\r\n * [cls -> st]\t\t\t\t-> ['cls', 'st']\r\n * [(cls, cls) -> st]\t\t-> ['cls', 'cls', 'st']\r\n * [[cls -> st] -> st]\t\t-> [['cls', 'st'], 'st']\r\n */\r\nfunction typeObjToNestedArr(obj: TypeObject): NestedTypeInput {\r\n\tif (obj._type != 'type')\r\n\t\tthrow Error('Assertion failed');\r\n\r\n\tif (!obj.ftype) {\r\n\t\tobj = obj as StypeObject;\r\n\r\n\t\tif (!obj.name)\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\treturn obj.name;\r\n\t} else {\r\n\t\tif (!obj.from || !obj.to)\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\treturn obj.from.map(typeObjToNestedArr).concat(\r\n\t\t\t[typeObjToNestedArr(obj.to)]\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction varObjToString(obj: VarObject): string {\r\n\tswitch (obj.type) {\r\n\t\tcase 'ruleset':\r\n\t\t\treturn `${obj.rulesetName}.${obj.name}`;\r\n\t\tcase 'normal':\r\n\t\t\treturn `${obj.name}`;\r\n\t\tdefault:\r\n\t\t\tthrow Error(`Unknown type ${obj.type}`);\r\n\t}\r\n}\r\n\r\nexport default class PI {\r\n\tpublic static type(obj: TypedefObject, parentScope: Scope): Type {\r\n\t\tif (obj._type != 'typedef')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope: Scope = parentScope.extend('type', obj.name, obj.location);\r\n\r\n\t\tvar origin: Type = obj.origin ? scope.getType(typeObjToNestedArr(obj.origin)) : null;\r\n\r\n\t\tvar name: string = obj.name;\r\n\t\tvar doc: string = obj.doc;\r\n\t\tvar base: boolean = obj.base;\r\n\r\n\t\tif (base && origin) {\r\n\t\t\tthrow scope.error('Base type should not be an alias');\r\n\t\t}\r\n\r\n\t\tif (origin) {\r\n\t\t\treturn new Type({\r\n\t\t\t\tname,\r\n\t\t\t\tdoc,\r\n\t\t\t\tbase,\r\n\t\t\t\torigin\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn new Type({\r\n\t\t\tfunctional: false,\r\n\t\t\tname,\r\n\t\t\tdoc,\r\n\t\t\tbase\r\n\t\t});\r\n\t}\r\n\r\n\tpublic static typevar(obj: DefvObject | VarObject, parentScope: Scope): Typevar | Schema {\r\n\t\tif (!['defv', 'var'].includes(obj._type)) {\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('typevar', obj.name, obj.location);\r\n\r\n\t\tif (obj._type == 'var') {\r\n\t\t\tif (!scope.hasTypevar(obj.name))\r\n\t\t\t\tthrow scope.error(`Undefined identifier ${obj.name}`);\r\n\t\t\treturn scope.getTypevar(obj.name);\r\n\t\t}\r\n\r\n\t\tif (!scope.hasType(typeObjToNestedArr(obj.type)))\r\n\t\t\tthrow scope.error(`Type ${typeObjToString(obj.type)} is not defined`);\r\n\r\n\t\tvar type = scope.getType(typeObjToNestedArr(obj.type));\r\n\r\n\t\treturn new Typevar({\r\n\t\t\ttype,\r\n\t\t\tisParam: !!obj.isParam,\r\n\t\t\tguess: obj.guess || null,\r\n\t\t\tname: obj.name,\r\n\t\t\tdoc: obj.doc,\r\n\t\t\ttex: obj.tex\r\n\t\t}, scope);\r\n\t}\r\n\r\n\tpublic static fun(obj: DefunObject | FunexprObject, parentScope: Scope): Schema {\r\n\t\tif (obj._type != 'defun' && obj._type != 'funexpr')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar name = null,\r\n\t\t\tdoc = null,\r\n\t\t\ttex = null;\r\n\r\n\t\tif (obj._type == 'defun') {\r\n\t\t\tobj = obj as DefunObject;\r\n\t\t\tname = obj.name;\r\n\t\t\tdoc = obj.doc;\r\n\t\t\ttex = obj.tex;\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('fun', name, obj.location);\r\n\r\n\t\tvar type = null;\r\n\t\tvar params = obj.params.map(tvo => {\r\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\r\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\r\n\r\n\t\t\tvar tv = PI.typevar(tvo, scope);\r\n\r\n\t\t\tif (scope.hasOwnTypevar(tv.name))\r\n\t\t\t\tthrow tv.scope.error(`Parameter ${tv.name} has already been declared`);\r\n\r\n\t\t\treturn scope.addTypevar(tv);\r\n\t\t});\r\n\t\tvar expr = null;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'defun':\r\n\t\t\t\tif (!scope.hasType(typeObjToNestedArr(obj.rettype)))\r\n\t\t\t\t\tthrow scope.error(`Type ${typeObjToString(obj.rettype)} is not defined`);\r\n\r\n\t\t\t\tvar rettype = scope.getType(typeObjToNestedArr(obj.rettype));\r\n\r\n\t\t\t\tif (obj.expr) {\r\n\t\t\t\t\texpr = PI.expr0(obj.expr, scope);\r\n\t\t\t\t\tif (!rettype.equals(expr.type))\r\n\t\t\t\t\t\tthrow scope.error(`Expression type ${expr.type} failed to match the return type ${rettype} of fun ${name}`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttype = new Type({\r\n\t\t\t\t\t\tfunctional: true,\r\n\t\t\t\t\t\tfrom: params.map(typevar => typevar.type),\r\n\t\t\t\t\t\tto: rettype\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'funexpr':\r\n\t\t\t\texpr = PI.expr0(obj.expr, scope);\r\n\t\t\t\ttype = null;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\r\n\t\treturn new Schema({shouldValidate: false, name, type, params, expr, doc, tex}, scope);\r\n\t}\r\n\r\n\tpublic static funcall(obj: FuncallObject, parentScope: Scope): Schemacall {\r\n\t\tif (obj._type != 'funcall')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('funcall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\r\n\r\n\t\tvar schema = PI.expr0(obj.schema, scope);\r\n\r\n\t\tvar args = obj.args.map(arg => {\r\n\t\t\treturn PI.expr0(arg, scope);\r\n\t\t});\r\n\r\n\t\treturn new Schemacall({schema, args}, scope);\r\n\t}\r\n\r\n\tpublic static metaexpr(obj: MetaexprObject, parentScope: Scope): Metaexpr {\r\n\t\tif (!['tee', 'reduction', 'schemacall', 'schemaexpr', 'var'].includes(obj._type))\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'tee':\r\n\t\t\t\treturn PI.tee(obj, scope);\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn PI.reduction(obj, scope);\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\treturn PI.schemacall(obj, scope);\r\n\t\t\tcase 'schemaexpr':\r\n\t\t\t\treturn PI.schema(obj, scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PI.metavar(obj, scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static expr0(obj: Expr0Object, parentScope: Scope): Expr0 {\r\n\t\tif (!['funcall', 'funexpr', 'var'].includes(obj._type)) {\r\n\t\t\tconsole.log(obj);\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'funcall':\r\n\t\t\t\treturn PI.funcall(obj, scope);\r\n\t\t\tcase 'funexpr':\r\n\t\t\t\treturn PI.fun(obj, scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PI.typevar(obj, scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static metavar(obj: VarObject, parentScope: Scope): Schema | Typevar {\r\n\t\tif (obj._type != 'var')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj.type) {\r\n\t\t\tcase 'ruleset':\r\n\t\t\t\tif (!scope.hasRuleset(obj.rulesetName))\r\n\t\t\t\t\tthrow scope.error(`Ruleset ${obj.rulesetName} is not defined`);\r\n\r\n\t\t\t\tvar ruleset = scope.getRuleset(obj.rulesetName);\r\n\r\n\t\t\t\tif (!ruleset.native)\r\n\t\t\t\t\tthrow scope.error('Behavior undefined for non-native rulesets');\r\n\r\n\t\t\t\tvar schema = ruleset.native.get(obj.name, scope);\r\n\r\n\t\t\t\tif (!schema)\r\n\t\t\t\t\tthrow scope.error(`Schema ${varObjToString(obj)} is not defined`);\r\n\t\t\t\t\r\n\t\t\t\treturn schema;\r\n\t\t\tcase 'normal':\r\n\t\t\t\tif (!scope.hasSchema(obj.name))\r\n\t\t\t\t\tthrow scope.error(`Schema ${obj.name} is not defined`);\r\n\r\n\t\t\t\treturn scope.getSchema(obj.name);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow scope.error(`Unknown type ${obj.type}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static tee(obj: TeeObject, parentScope: Scope): Tee {\r\n\t\tif (obj._type != 'tee')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('tee', null, obj.location);\r\n\r\n\t\tvar foo = obj => PI.metaexpr(obj, scope);\r\n\r\n\t\tvar left = obj.left.map(foo);\r\n\t\tvar right = foo(obj.right);\r\n\r\n\t\treturn new Tee({left, right}, scope);\r\n\t}\r\n\r\n\tpublic static schema(obj: DefschemaObject | SchemaexprObject, parentScope: Scope, nativeMap?): Schema {\r\n\t\tif (obj._type != 'defschema' && obj._type != 'schemaexpr')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tnativeMap = nativeMap || {};\r\n\r\n\t\tvar name = null, axiomatic = false, doc = null;\r\n\r\n\t\tif (obj._type == 'defschema') {\r\n\t\t\tname = obj.name; axiomatic = obj.axiomatic;\r\n\t\t\tdoc = obj.doc;\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('schema', name, obj.location);\r\n\r\n\t\tif (obj._type == 'defschema' && obj.native) {\r\n\t\t\tif (!nativeMap.schema[name])\r\n\t\t\t\tthrow scope.error(`Native code for native schema ${name} not found`);\r\n\r\n\t\t\tvar native = {\r\n\t\t\t\tget: args => nativeMap.schema[name].get(args, scope)\r\n\t\t\t};\r\n\r\n\t\t\treturn new Schema({shouldValidate: true, axiomatic, name, native, doc: obj.doc}, scope);\r\n\t\t}\r\n\r\n\t\tvar params = obj.params.map(tvo => {\r\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\r\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\r\n\r\n\t\t\tvar tv = PI.typevar(tvo, scope);\r\n\r\n\t\t\tif (scope.hasOwnTypevar(tv.name))\r\n\t\t\t\tthrow tv.scope.error(`Parameter ${tv.name} has already been declared`);\r\n\t\t\t\r\n\t\t\treturn scope.addTypevar(tv);\r\n\t\t});\r\n\r\n\t\tvar expr = PI.metaexpr(obj.expr, scope);\r\n\r\n\t\treturn new Schema({shouldValidate: true, axiomatic, name, params, expr, doc}, scope);\r\n\t}\r\n\r\n\tpublic static schemacall(obj: SchemacallObject, parentScope: Scope): Schemacall {\r\n\t\tif (obj._type != 'schemacall')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('schemacall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\r\n\r\n\t\tvar schema = PI.metaexpr(obj.schema, scope);\r\n\r\n\t\tvar args = obj.args.map(obj => {\r\n\t\t\treturn PI.expr0(obj, scope);\r\n\t\t});\r\n\r\n\t\treturn new Schemacall({\r\n\t\t\tschema,\r\n\t\t\targs\r\n\t\t}, scope);\r\n\t}\r\n\r\n\tpublic static ruleset(obj: DefrulesetObject, parentScope: Scope, nativeMap?): Ruleset {\r\n\t\tif (obj._type != 'defruleset')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tnative = native || {};\r\n\r\n\t\tvar scope = parentScope.extend('ruleset', obj.name, obj.location);\r\n\r\n\t\tvar axiomatic = obj.axiomatic;\r\n\t\tvar name = obj.name;\r\n\r\n\t\tif (!obj.native)\r\n\t\t\tthrow scope.error('Assertion failed');\r\n\r\n\t\tif (!nativeMap.ruleset[name])\r\n\t\t\tthrow scope.error(`Native code for native ruleset ${name} not found`);\r\n\r\n\t\tvar native = nativeMap.ruleset[name];\r\n\r\n\t\treturn new Ruleset({axiomatic, name, native, doc: obj.doc}, scope);\r\n\t}\r\n\r\n\tpublic static reduction(obj: ReductionObject, parentScope: Scope): Reduction {\r\n\t\tif (obj._type != 'reduction')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('reduction', 'name' in obj.subject ? obj.subject.name : null, obj.location);\r\n\r\n\t\tvar subject = PI.metaexpr(obj.subject, scope);\r\n\r\n\t\tvar guesses = !obj.guesses\r\n\t\t\t? null\r\n\t\t\t: obj.guesses.map(g => {\r\n\t\t\t\treturn g && PI.expr0(g, scope);\r\n\t\t\t});\r\n\r\n\t\tvar leftargs = obj.leftargs.map(obj => {\r\n\t\t\treturn PI.metaexpr(obj, scope);\r\n\t\t});\r\n\r\n\t\treturn new Reduction({\r\n\t\t\tsubject,\r\n\t\t\tguesses,\r\n\t\t\tleftargs\r\n\t\t}, scope);\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport Schemacall from './Schemacall';\r\n\r\nimport ExpressionResolver from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport Tee from './Tee';\r\n\r\nexport default class Reduction extends Node {\r\n\tpublic readonly _type = 'reduction';\r\n\r\n\tpublic readonly subject: Node;\r\n\tpublic readonly guesses;\r\n\tpublic readonly leftargs;\r\n\tpublic readonly reduced;\r\n\tpublic readonly type;\r\n\r\n\tconstructor ({subject, guesses, leftargs}, scope?: Scope) {\r\n\t\tsuper(scope);\r\n\r\n\t\tif (!subject.native && subject._type == 'schema') {\r\n\t\t\tsubject.params.forEach((p, i) => {\r\n\t\t\t\tif (!(guesses && guesses[i]) && !p.guess) {\r\n\t\t\t\t\tthrow this.error(`Argument #${i + 1} could not be guessed`);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\r\n\t\t\tvar derefs = subject.params.map((p, i) => {\r\n\t\t\t\tif (guesses && guesses[i]) return guesses[i];\r\n\t\r\n\t\t\t\treturn this.query(\r\n\t\t\t\t\tp.guess,\r\n\t\t\t\t\t(ExpressionResolver.expandMeta(subject.expr) as Tee).left,\r\n\t\t\t\t\tleftargs\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\r\n\t\t\tsubject = new Schemacall({\r\n\t\t\t\tschema: subject,\r\n\t\t\t\targs: derefs,\r\n\t\t\t}, scope);\r\n\t\t} else if (guesses) {\r\n\t\t\tthrow this.error('Something\\'s wrong');\r\n\t\t}\r\n\t\r\n\t\tif (!subject.native\r\n\t\t\t\t&& !(subject.type._type == 'metatype' && subject.type.isSimple))\r\n\t\t\tthrow this.error('Subject is not reducible');\r\n\t\r\n\t\tif (!(leftargs instanceof Array)\r\n\t\t\t\t|| leftargs.map(e => e instanceof Node).some(e => !e))\r\n\t\t\tthrow this.error('Assertion failed');\r\n\t\t\r\n\t\tthis.subject = subject;\r\n\t\tthis.leftargs = leftargs;\r\n\t\r\n\t\tif (subject.native) {\r\n\t\t\tthis.reduced = subject.native.get(leftargs);\r\n\t\t\tthis.type = this.reduced.type;\r\n\t\t} else {\r\n\t\t\tvar paramTypes = subject.type.left,\r\n\t\t\t\tleftargTypes = leftargs.map(e => e.type);\r\n\t\r\n\t\t\tif (paramTypes.length != leftargTypes.length)\r\n\t\t\t\tthrow this.error(`Invalid number of arguments (expected ${paramTypes.length}): ${leftargTypes.length}`);\r\n\t\r\n\t\t\tfor (let i = 0; i < paramTypes.length; i++) {\r\n\t\t\t\tif (!paramTypes[i].equals(leftargTypes[i]))\r\n\t\t\t\t\tthrow this.error(`Illegal argument type (expected ${paramTypes[i]}): ${leftargTypes[i]}`);\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.type = subject.type.right;\r\n\t\r\n\t\t\tvar tee = ExpressionResolver.expandMetaAndFuncalls(subject);\r\n\t\r\n\t\t\tif (tee._type != 'tee') {\r\n\t\t\t\tthrow this.error('Assertion failed');\r\n\t\t\t}\r\n\t\r\n\t\t\tfor (let i = 0; i < tee.left.length; i++) {\r\n\t\t\t\tif (!ExpressionResolver.equals(tee.left[i], leftargs[i])) {\r\n\t\t\t\t\tthrow this.error(`LHS #${i + 1} failed to match:\r\n\r\n--- EXPECTED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(tee.left[i])}\r\n----------------\r\n\r\n--- RECEIVED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(leftargs[i])}\r\n----------------`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.reduced = tee.right;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn super.isProved(hyps)\r\n\t\t\t|| this.subject.isProved(hyps)\r\n\t\t\t\t&& this.leftargs.every(l => l.isProved(hyps));\r\n\t}\r\n\r\n\tpublic query(guess, left, leftargs) {\r\n\t\tif (guess.length == 0) throw this.error('wut');\r\n\r\n\t\tif (!(1 <= guess[0] * 1 && guess[0] * 1 <= leftargs.length))\r\n\t\t\tthrow this.error(`Cannot dereference @${guess}: antecedent index out of range`);\r\n\r\n\t\tvar lef = left[guess[0] * 1 - 1];\r\n\t\tvar ret = leftargs[guess[0] * 1 - 1];\r\n\r\n\t\tvar that = this;\r\n\r\n\t\treturn (function recurse(guess, lef, node, ptr) {\r\n\t\t\tnode = ExpressionResolver.expandMetaAndFuncalls(node);\r\n\t\t\t\r\n\t\t\tif (guess.length <= ptr) return node;\r\n\r\n\t\t\tif (/[0-9]/.test(guess[ptr])) {\r\n\t\t\t\tvar n = guess[ptr] * 1;\r\n\r\n\t\t\t\tif (lef._type == 'tee' && node._type == 'tee') {\r\n\t\t\t\t\tif (lef.left.length != node.left.length) {\r\n\t\t\t\t\t\tthrow that.error(`Cannot dereference @${guess}: antecedent length mismatch`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!(1 <= n && n <= node.left.length)) {\r\n\t\t\t\t\t\tthrow that.error(`Cannot dereference @${guess}: antecedent index out of range`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn recurse(guess, lef.left[n - 1], node.left[n - 1], ptr + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tif (!lef.schema || !node.schema) {\r\n\t\t\t\t\t\tthrow that.error(`Cannot dereference @${guess}`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (ExpressionResolver.equals(lef.schema, node.schema)) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!node.schema.expr) {\r\n\t\t\t\t\t\tthrow that.error(`Cannot dereference @${guess}`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnode = ExpressionResolver.expandCallOnce(node);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!node.args || !(1 <= n && n <= node.args.length))\r\n\t\t\t\t\tthrow that.error(`Cannot dereference @${guess}`);\r\n\r\n\t\t\t\treturn recurse(guess, lef.args[n - 1], node.args[n - 1], ptr + 1);\r\n\t\t\t} else if (guess[ptr] == 'r') {\r\n\t\t\t\tif (lef._type == 'tee' && node._type == 'tee') {\r\n\t\t\t\t\treturn recurse(guess, lef.right, node.right, ptr + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow that.error(`Cannot dereference @${guess}`);\r\n\t\t\t}\r\n\r\n\t\t\tthrow that.error(`Cannot dereference @${guess}`);\r\n\t\t})(guess, lef, ret, 1);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tvar leftargs = this.leftargs.map(arg => {\r\n\t\t\treturn arg.toIndentedString(indent + 1);\r\n\t\t});\r\n\t\r\n\t\tif (leftargs.join('').length <= 50) {\r\n\t\t\tleftargs = this.leftargs.map(arg => {\r\n\t\t\t\treturn arg.toIndentedString(indent);\r\n\t\t\t});\r\n\t\r\n\t\t\tleftargs = leftargs.join(', ');\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\r\n\t\t\t\tleftargs,\r\n\t\t\t\t']'\r\n\t\t\t].join('');\r\n\t\t}\r\n\t\telse {\r\n\t\t\tleftargs = leftargs.join(',\\n' + '\\t'.repeat(indent + 1));\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\r\n\t\t\t\t'\\t' + leftargs,\r\n\t\t\t\t']'\r\n\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\treturn `${this.subject.toTeXString(false)}[${this.leftargs.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}]`;\r\n\t}\r\n}"],"sourceRoot":""}