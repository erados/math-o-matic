{"version":3,"sources":["webpack://math/webpack/universalModuleDefinition","webpack://math/webpack/bootstrap","webpack://math/./src/nodes/Node.ts","webpack://math/./src/nodes/ObjectType.ts","webpack://math/./src/nodes/Variable.ts","webpack://math/./src/nodes/Fun.ts","webpack://math/./src/nodes/$Variable.ts","webpack://math/./src/nodes/Metaexpr.ts","webpack://math/./src/ExpressionResolver.ts","webpack://math/./src/nodes/Funcall.ts","webpack://math/./src/nodes/Tee.ts","webpack://math/./src/nodes/Expr0.ts","webpack://math/./src/nodes/MetaType.ts","webpack://math/./src/nodes/Reduction.ts","webpack://math/./src/nodes/Nameable.ts","webpack://math/./src/entry.js","webpack://math/./src/grammar.pegjs","webpack://math/./src/Program.ts","webpack://math/./src/Scope.ts","webpack://math/./src/StackTrace.ts","webpack://math/./node_modules/process/browser.js","webpack://math/./src/PegInterface.ts","webpack://math/./src/ProofExplorer.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","ctr","Node","scope","doc","tex","_id","toIndentedString","message","error","Error","replace","precedence","code","match","g1","hyps","length","prec","Array","console","log","my","normalizePrecedence","your","id","args","ret","shouldConsolidate","_match","PREC_FUNEXPR","PREC_COMMA","PREC_COLONEQQ","ObjectType","super","isBaseType","base","origin","isFunctional","isSimple","functional","from","map","f","some","e","to","resolved","resolve","toSimpleString","join","indent","toTeXString","equals","Variable","type","isParam","guess","isProved","escapeTeX","Fun","isSchema","annotations","axiomatic","params","def$s","expr","parsed","parseTeX","variable","proved","repeat","expandMetaAndFuncalls","toTeXStringWithId","funcallToTeXString","arg","makeTeX","$Variable","Metaexpr","obj","iscall","a","makecall","fun","ExpressionResolver","substitute","has","left","right","reduced","callee","Map","set","expandCallOnce","callee_","expandMeta","b","recurseWrap","recurse","depth","aHasFunExpr","bHasFunExpr","every","_","placeholders","len","push","nequalscall","nequalstrue","nrecursecall","nrecursetrue","Funcall","isNameable","resolvedType","paramTypes","argTypes","Tee","$","concat","expanded","Expr0","MetaType","Reduction","subject","guesses","leftargs","expected","forEach","derefs","tee","query","leftargTypes","lef","node","ptr","test","grammar","default","Program","parser","scopeMap","filename","loader","loadModuleInternal","parse","feed","lines","line","_type","scope2","importMap","hasType","addType","hasVariable","addVariable","addFun","schema","hasSchema","addSchema","reduction","schemacall","metavar","ktx","Scope","parent","trace","typedefMap","defMap","schemaMap","$Map","hypotheses","baseType","location","child","extend","h","values","hasOwnType","broadcast","getType","filter","slice","hasOwnVariable","getVariable","hasOwnSchema","getSchema","hasOwn$","has$","get$","StackTrace","stack","process","argv","start","column","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","runClearTimeout","marker","Item","array","noop","nextTick","arguments","apply","title","browser","env","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","typeObjToString","ftype","typeObjToNestedArr","PI","parentScope","includes","tvo","tv","rettype","expr0","funcall","hypnum","Number","metaexpr","scopeRight","$v","def$","add$","g","ProofExplorer","DIAMOND","theexpr","ncols","Math","max","getHtmlLine","h1","h2","options","padding","bbb","rrb","htmlLeft","pop","exprToHtml","expand","tree","getTree","hypnumMap","num","leftarglines","leftargnums","subjectlines","subjectnum","schemalines","$lines","$num","leftlines","rightlines","html","tree2html","newleft","fill"],"mappings":"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","file":"math.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"math\"] = factory();\n\telse\n\t\troot[\"math\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","import Scope from '../Scope';\r\n\r\nvar ctr = 0;\r\n\r\nexport type Precedence = boolean | number | [number, number];\r\n\r\nexport default abstract class Node {\r\n\tpublic readonly _id: number;\r\n\r\n\tpublic readonly doc: string;\r\n\tpublic readonly tex: string;\r\n\tpublic precedence: Precedence;\r\n\r\n\tpublic static readonly PREC_FUNEXPR = 1000;\r\n\tpublic static readonly PREC_COMMA = 1000;\r\n\tpublic static readonly PREC_COLONEQQ = 100000;\r\n\r\n\tconstructor (scope: Scope, doc: string, tex: string) {\r\n\t\tthis._id = ++ctr;\r\n\t\tthis.doc = doc;\r\n\t\tthis.tex = tex;\r\n\t}\r\n\r\n\tpublic toString() {\r\n\t\treturn this.toIndentedString(0);\r\n\t}\r\n\r\n\tpublic abstract toIndentedString(indent: number, root?: boolean): string;\r\n\tpublic abstract toTeXString(prec?: Precedence, root?: boolean): string;\r\n\r\n\tpublic static error(message: string, scope: Scope) {\r\n\t\tif (scope) {\r\n\t\t\treturn scope.error(message);\r\n\t\t} else {\r\n\t\t\treturn new Error(message);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static escapeTeX(s) {\r\n\t\treturn s.replace(/&|%|\\$|#|_|{|}|~|\\^|\\\\/g, m => ({\r\n\t\t\t'&': '\\\\&', '%': '\\\\%', '$': '\\\\$',\r\n\t\t\t'#': '\\\\#', '_': '\\\\_', '{': '\\\\{',\r\n\t\t\t'}': '\\\\}',\r\n\t\t\t'~': '\\\\textasciitilde',\r\n\t\t\t'^': '\\\\textasciicircum',\r\n\t\t\t'\\\\': '\\\\textbackslash'\r\n\t\t})[m]);\r\n\t}\r\n\r\n\tpublic static parseTeX(tex) {\r\n\t\tvar precedence: Precedence = false;\r\n\r\n\t\tvar code = tex.replace(/^!<prec=([0-9]+)>/, (match, g1) => {\r\n\t\t\tprecedence = g1 * 1;\r\n\t\t\treturn '';\r\n\t\t});\r\n\r\n\t\treturn {precedence, code};\r\n\t}\r\n\r\n\tpublic isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\r\n\t\tfor (var i = 0; i < hyps.length; i++) {\r\n\t\t\tif (hyps[i] == this) return true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/*\r\n\t* false corresponds to 0.\r\n\t* true corresponds to w * 2.\r\n\t*/\r\n\tpublic static normalizePrecedence(prec: Precedence) {\r\n\t\tif (prec === false) return [0, 0];\r\n\t\tif (prec === true) return [2, 0];\r\n\t\tif (typeof prec == 'number') return [0, prec];\r\n\r\n\t\tif (!(prec instanceof Array && prec.length == 2)) {\r\n\t\t\tconsole.log(prec);\r\n\t\t\tthrow Error('wut');\r\n\t\t}\r\n\r\n\t\treturn prec;\r\n\t}\r\n\r\n\tpublic shouldConsolidate(prec: Precedence) {\r\n\t\tvar my = Node.normalizePrecedence(this.precedence || false),\r\n\t\t\tyour = Node.normalizePrecedence(prec || false);\r\n\r\n\t\tif (my[0] == 0 && my[1] == 0) return false;\r\n\r\n\t\treturn !(my[0] < your[0] || my[0] == your[0] && my[1] < your[1]);\r\n\t}\r\n\r\n\tpublic makeTeX(id, args, prec) {\r\n\t\targs = args || [];\r\n\t\tprec = prec || false;\r\n\t\t\r\n\t\tvar ret = this.tex;\r\n\r\n\t\tif (this.shouldConsolidate(prec)) {\r\n\t\t\tret = '\\\\left(' + ret + '\\\\right)';\r\n\t\t}\r\n\r\n\t\treturn ret.replace(/#([0-9]+)/g, (match, g1) => {\r\n\t\t\treturn args[g1 * 1 - 1] || `\\\\texttt{\\\\textcolor{red}{\\\\#${g1}}}`;\r\n\t\t}).replace(/<<(.+?)>>/, (_match, g1) => {\r\n\t\t\treturn `\\\\href{#${id}}{${g1}}`;\r\n\t\t});\r\n\t}\r\n}","import Nameable from './Nameable';\r\nimport Node from './Node';\r\n\r\nexport default class ObjectType extends Node implements Nameable {\r\n\tpublic readonly isBaseType: boolean;\r\n\tpublic readonly isFunctional: boolean;\r\n\tpublic readonly isSimple: boolean;\r\n\tpublic readonly name: string;\r\n\tpublic readonly origin: ObjectType;\r\n\tpublic readonly from: ObjectType[];\r\n\tpublic readonly to: ObjectType;\r\n\r\n\tconstructor (o) {\r\n\t\tsuper(null, o.doc, null);\r\n\r\n\t\tthis.isBaseType = !!o.base;\r\n\r\n\t\tif (o.origin) {\r\n\t\t\tif (typeof o.name != 'string')\r\n\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\r\n\t\t\tthis.name = o.name;\r\n\r\n\t\t\tif (!(o.origin instanceof ObjectType))\r\n\t\t\t\tthrow Node.error('!(o.origin instanceof ObjectType)', null);\r\n\r\n\t\t\tthis.isFunctional = o.origin.isFunctional;\r\n\t\t\tthis.isSimple = o.origin.isSimple;\r\n\t\t\tthis.origin = o.origin;\r\n\t\t} else {\r\n\t\t\tif (typeof o.functional != 'boolean')\r\n\t\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\r\n\t\t\tthis.isFunctional = o.functional;\r\n\t\t\tthis.isSimple = !o.functional;\r\n\r\n\t\t\tif (!o.functional) {\r\n\t\t\t\tif (typeof o.name != 'string')\r\n\t\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\r\n\t\t\t\tthis.name = o.name;\r\n\t\t\t} else {\r\n\t\t\t\tif (o.from.map(f => f instanceof ObjectType).some(e => !e))\r\n\t\t\t\t\tthrow Node.error('o.from.map(f => f instanceof ObjectType).some(e => !e)', null);\r\n\t\t\t\tif (!(o.to instanceof ObjectType))\r\n\t\t\t\t\tthrow Node.error('!(o.to instanceof ObjectType)', null);\r\n\r\n\t\t\t\tthis.from = o.from;\r\n\t\t\t\tthis.to = o.to;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toSimpleString() {\r\n\t\tif (this.name) return this.name;\r\n\r\n\t\tvar resolved = this.resolve();\r\n\r\n\t\treturn `[${resolved.from.map(e => e.toSimpleString()).join(', ')} -> ${resolved.to.toSimpleString()}]`;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent): string {\r\n\t\tif (this.isSimple) return this.name;\r\n\r\n\t\treturn `${this.name ? this.name + ': ' : ''}[${this.resolve().from.join(', ')} -> ${this.resolve().to}]`;\r\n\t}\r\n\r\n\tpublic toTeXString(root?: boolean) {\r\n\t\tif (this.isSimple) return `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\r\n\r\n\t\tif (!root && this.name) {\r\n\t\t\treturn `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\r\n\t\t}\r\n\r\n\t\treturn `${this.name ? `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}: ` : ''}`\r\n\t\t\t+ `\\\\left[${this.resolve().from.map(e => e.toTeXString()).join(' \\\\times ')}`\r\n\t\t\t+ ` \\\\to ${this.resolve().to.toTeXString()} \\\\right]`;\r\n\t}\r\n\r\n\tpublic resolve(): ObjectType {\r\n\t\treturn this.origin ? this.origin.resolve() : this;\r\n\t}\r\n\r\n\tpublic equals(t: object): boolean {\r\n\t\tif (!(t instanceof ObjectType)) return false;\r\n\r\n\t\tif (this.origin) return this.origin.equals(t);\r\n\t\tif (t.origin) return this.equals(t.origin);\r\n\r\n\t\tif (this.isSimple != t.isSimple) return false;\r\n\r\n\t\tif (this.isSimple) return this === t;\r\n\r\n\t\tif (this.from.length != t.from.length) return false;\r\n\r\n\t\tfor (var i = 0; i < this.from.length; i++)\r\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\r\n\r\n\t\treturn this.to.equals(t.to);\r\n\t}\r\n}","import Scope from '../Scope';\r\nimport Expr0 from './Expr0';\r\nimport Nameable from './Nameable';\r\nimport Node, {Precedence} from './Node';\r\nimport ObjectType from './ObjectType';\r\n\r\ninterface VariableArgumentType {\r\n\tdoc?: string;\r\n\ttex?: string;\r\n\ttype: ObjectType;\r\n\tname: string;\r\n\tisParam: boolean;\r\n\tguess?: string;\r\n}\r\n\r\nexport default class Variable extends Expr0 implements Nameable {\r\n\tpublic readonly isParam: boolean;\r\n\tpublic readonly guess: string;\r\n\tpublic readonly type: ObjectType;\r\n\tpublic readonly name: string;\r\n\r\n\tconstructor ({doc, tex, type, name, isParam, guess}: VariableArgumentType, scope?: Scope) {\r\n\t\tsuper(scope, doc, tex, type);\r\n\r\n\t\tthis.isParam = !!isParam;\r\n\t\tthis.guess = guess || null;\r\n\r\n\t\tif (typeof name != 'string')\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tpublic isProved(hyps) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps);\r\n\t}\r\n\r\n\t// pr f\r\n\tpublic toSimpleString() {\r\n\t\treturn this.type.toSimpleString() + ' ' + this.name;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn `${root ? this.type + ' ' : ''}${this.name}<${this._id}>`;\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tvar id = this.isParam ? `id-${this._id}` : `def-${this.name}`;\r\n\r\n\t\tvar tex = this.tex\r\n\t\t\t|| (\r\n\t\t\t\tthis.name.length == 1\r\n\t\t\t\t\t? Node.escapeTeX(this.name)\r\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.name)}}`\r\n\t\t\t);\r\n\t\t\r\n\t\treturn `\\\\href{#${id}}{${tex}}`;\r\n\t}\r\n\r\n\tpublic toTeXStringWithId(prec?: Precedence, root?: boolean): string {\r\n\t\tif (!this.isParam) throw Error('wut');\r\n\r\n\t\tvar id =`id-${this._id}`;\r\n\r\n\t\treturn [\r\n\t\t\t`\\\\htmlId{${id}}{`,\r\n\t\t\tthis.toTeXString(prec, root),\r\n\t\t\t`}`\r\n\t\t].join('');\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport ObjectType from './ObjectType';\r\nimport MetaType from './MetaType';\r\nimport ExpressionResolver from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport Variable from './Variable';\r\nimport $Variable from './$Variable';\r\nimport Expr0 from './Expr0';\r\nimport Metaexpr from './Metaexpr';\r\nimport Nameable from './Nameable';\r\n\r\ninterface FunArgumentType {\r\n\tisSchema: boolean;\r\n\tannotations: string[];\r\n\taxiomatic?: boolean;\r\n\ttype?: ObjectType | MetaType;\r\n\tname?: string;\r\n\tparams?: Variable[];\r\n\tdef$s?: $Variable[];\r\n\texpr?: Metaexpr;\r\n\tdoc?: string;\r\n\ttex?: string;\r\n}\r\n\r\nexport default class Fun extends Expr0 implements Nameable {\r\n\r\n\tpublic readonly isSchema: boolean;\r\n\tpublic readonly annotations: string[];\r\n\tpublic readonly axiomatic: boolean;\r\n\tpublic readonly name: string;\r\n\tpublic readonly params: Variable[];\r\n\tpublic readonly def$s: $Variable[];\r\n\tpublic readonly expr: Metaexpr;\r\n\tpublic readonly proved: boolean;\r\n\r\n\t/*\r\n\t * name, expr 중 하나 이상 있어야 하고 type, expr 중\r\n\t * 한 개만 있어야 한다.\r\n\t */\r\n\tconstructor ({doc, tex, isSchema, annotations, axiomatic, type, /* nullable */ name, params, def$s, expr}: FunArgumentType, scope?: Scope) {\r\n\t\tif (!name && !expr)\r\n\t\t\tthrow Node.error('Anonymous fun cannot be primitive', scope);\r\n\r\n\t\tif (type && expr)\r\n\t\t\tthrow Node.error('no', scope);\r\n\r\n\t\tif (!type && !expr)\r\n\t\t\tthrow Node.error('Cannot guess the type of a primitive fun', scope);\r\n\r\n\t\tif (name !== null && typeof name != 'string')\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\r\n\t\tif (!(params instanceof Array)\r\n\t\t\t\t|| params.map(e => e instanceof Variable).some(e => !e))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\r\n\t\tif (expr !== null && !(expr instanceof Node))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\r\n\t\tvar precedence = false;\r\n\r\n\t\tif (tex) {\r\n\t\t\tvar parsed = Node.parseTeX(tex);\r\n\t\t\tprecedence = parsed.precedence;\r\n\t\t\ttex = parsed.code;\r\n\t\t} else {\r\n\t\t\ttex = null;\r\n\t\t}\r\n\t\t\r\n\t\tsuper(\r\n\t\t\tscope, doc, tex,\r\n\t\t\ttype || new (expr.type instanceof ObjectType ? ObjectType : MetaType)({\r\n\t\t\t\tfunctional: true,\r\n\t\t\t\tfrom: params.map(variable => variable.type),\r\n\t\t\t\tto: expr.type\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tthis.isSchema = isSchema;\r\n\t\tthis.annotations = annotations;\r\n\t\tthis.precedence = precedence;\r\n\t\tthis.axiomatic = axiomatic;\r\n\t\tthis.name = name;\r\n\t\tthis.params = params;\r\n\t\tthis.def$s = def$s || [];\r\n\t\tthis.expr = expr;\r\n\t\tthis.proved = this.isProved();\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn this.proved\r\n\t\t\t|| super.isProved(hyps)\r\n\t\t\t|| this.axiomatic\r\n\t\t\t|| this.expr && this.expr.isProved(hyps);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn [\r\n\t\t\t`∫ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\r\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\r\n\t\t\t'}'\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tif (!this.name) {\r\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\r\n\t\t\treturn [\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\r\n\r\n\t\t\t\t(\r\n\t\t\t\t\tthis.params.length == 1\r\n\t\t\t\t\t? this.params[0].toTeXString(false)\r\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\r\n\t\t\t\t),\r\n\t\t\t\t'\\\\mapsto ',\r\n\t\t\t\tExpressionResolver.expandMetaAndFuncalls(this.expr).toTeXString(false),\r\n\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\r\n\t\t\t].join('');\r\n\t\t}\r\n\r\n\t\tif (!this.isSchema) {\r\n\t\t\tif (!root)\r\n\t\t\t\treturn `\\\\href{#def-${this.name}}\\\\mathrm{${Node.escapeTeX(this.name)}}`;\r\n\t\t\r\n\t\t\tif (!this.expr)\r\n\t\t\t\treturn this.funcallToTeXString(this.params, prec);\r\n\t\t\r\n\t\t\treturn this.funcallToTeXString(this.params, Node.PREC_COLONEQQ)\r\n\t\t\t\t\t+ `\\\\coloneqq ${this.expr.toTeXString(Node.PREC_COLONEQQ)}`;\r\n\t\t} else {\r\n\t\t\tvar id = `schema-${this.proved ? 'p' : 'np'}-${this.name}`;\r\n\t\t\r\n\t\t\tif (!root)\r\n\t\t\t\treturn `\\\\href{#${id}}\\\\mathsf{${Node.escapeTeX(this.name)}}`;\r\n\t\t\r\n\t\t\treturn `\\\\href{#${id}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}\\\\mathord{\\\\left(${this.params.map(e => e.toTeXStringWithId(Node.PREC_COMMA) + (e.guess ? `: \\\\texttt{@${e.guess}}` : '')).join(', ')}\\\\right)}:\\\\\\\\\\\\quad`\r\n\t\t\t\t+ ExpressionResolver.expandMetaAndFuncalls(this.expr).toTeXString(true);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic funcallToTeXString(args, prec) {\r\n\t\targs = args.map(arg => {\r\n\t\t\treturn arg.toTeXString(this.tex ? this.precedence : Node.PREC_COMMA);\r\n\t\t});\r\n\t\r\n\t\tif (this.tex) {\r\n\t\t\treturn this.makeTeX('def-' + this.name, args, prec);\r\n\t\t}\r\n\t\r\n\t\treturn (\r\n\t\t\t!this.name\r\n\t\t\t\t? this.toTeXString(false)\r\n\t\t\t\t: `\\\\href{#def-${this.name}}{${this.name.length == 1 ? Node.escapeTeX(this.name) : `\\\\mathrm{${Node.escapeTeX(this.name)}}`}}`\r\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\r\n\t}\r\n}","import Scope from \"../Scope\";\r\nimport Metaexpr from \"./Metaexpr\";\r\nimport MetaType from \"./MetaType\";\r\nimport Nameable from \"./Nameable\";\r\nimport Node, { Precedence } from \"./Node\";\r\nimport ObjectType from \"./ObjectType\";\r\n\r\ninterface $VariableArgumentType {\r\n    name: string;\r\n    expr: Metaexpr;\r\n}\r\n\r\nexport default class $Variable extends Metaexpr implements Nameable {\r\n\r\n    public readonly name: string;\r\n    public readonly expr: Metaexpr;\r\n\r\n    constructor ({name, expr}: $VariableArgumentType, scope?: Scope) {\r\n        super(scope, null, null, expr.type);\r\n\r\n        if (!name || !expr) {\r\n            throw Node.error('Assertion failed', scope);\r\n        }\r\n\r\n        this.name = name;\r\n        this.expr = expr;\r\n    }\r\n\r\n    public isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn super.isProved(hyps)\r\n\t\t\t|| this.expr.isProved(hyps);\r\n\t}\r\n\r\n    public toIndentedString(indent: number, root?: boolean): string {\r\n        return this.name;\r\n    }\r\n    \r\n    public toTeXString(prec?: Precedence, root?: boolean): string {\r\n        return `\\\\mathtt{${Node.escapeTeX(this.name)}}`;\r\n    }\r\n}","import Scope from \"../Scope\";\r\nimport MetaType from \"./MetaType\";\r\nimport Node from \"./Node\";\r\nimport ObjectType from \"./ObjectType\";\r\n\r\nexport default abstract class Metaexpr extends Node {\r\n    public readonly type: ObjectType | MetaType;\r\n\r\n    constructor(scope: Scope, doc: string, tex: string, type: ObjectType | MetaType) {\r\n        super(scope, doc, tex);\r\n\r\n        if (!type) throw Node.error('Assertion failed', scope);\r\n\r\n        this.type = type;\r\n    }\r\n\r\n    public equals(obj: Metaexpr): boolean {\r\n        return this === obj;\r\n    }\r\n}","import $Variable from \"./nodes/$Variable\";\r\nimport Reduction from \"./nodes/Reduction\";\r\nimport Fun from \"./nodes/Fun\";\r\nimport Funcall from \"./nodes/Funcall\";\r\nimport Tee from \"./nodes/Tee\";\r\nimport Variable from \"./nodes/Variable\";\r\nimport ObjectType from \"./nodes/ObjectType\";\r\nimport Metaexpr from \"./nodes/Metaexpr\";\r\nimport Expr0 from \"./nodes/Expr0\";\r\n\r\nfunction iscall(a: Metaexpr): a is Funcall {\r\n\treturn a instanceof Funcall;\r\n}\r\n\r\nfunction makecall(a: Metaexpr, args: Expr0[]): Funcall {\r\n\tif (a instanceof Variable || a instanceof Fun) {\r\n\t\treturn new Funcall({\r\n\t\t\tfun: a,\r\n\t\t\targs\r\n\t\t});\r\n\t}\r\n\r\n\tconsole.log(a);\r\n\tthrow Error();\r\n}\r\n\r\nexport default class ExpressionResolver {\r\n\tpublic static substitute(expr: Metaexpr, map: Map<Variable | Fun, Expr0>): Metaexpr {\r\n\t\tif (expr instanceof Funcall) {\r\n\t\t\treturn new Funcall({\r\n\t\t\t\tfun: ExpressionResolver.substitute(expr.fun, map),\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\targs: expr.args.map(arg => ExpressionResolver.substitute(arg, map))\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Fun) {\r\n\t\t\tif (!expr.expr) return expr;\r\n\r\n\t\t\t// 이름이 있는 것은 최상단에만 선언되므로 치환되어야 할 것을 포함하지 않으므로 확인하지 않는다는 생각이 들어 있다.\r\n\t\t\tif (expr.name) return expr;\r\n\r\n\t\t\t// 위의 expr.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\r\n\t\t\tif (expr.params.some(e => map.has(e)))\r\n\t\t\t\tthrow Error('Parameter collision');\r\n\r\n\t\t\treturn new Fun({\r\n\t\t\t\tisSchema: expr.isSchema,\r\n\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\taxiomatic: expr.axiomatic,\r\n\t\t\t\tname: null,\r\n\t\t\t\tparams: expr.params,\r\n\t\t\t\texpr: ExpressionResolver.substitute(expr.expr, map)\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Variable) {\r\n\t\t\treturn map.get(expr) || expr;\r\n\t\t} else if (expr instanceof Tee) {\r\n\t\t\tvar left = expr.left.map(e => ExpressionResolver.substitute(e, map));\r\n\t\t\tvar right = ExpressionResolver.substitute(expr.right, map);\r\n\r\n\t\t\treturn new Tee({\r\n\t\t\t\tleft, right\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Reduction) {\r\n\t\t\treturn ExpressionResolver.substitute(expr.reduced, map);\r\n\t\t} else if (expr instanceof $Variable) {\r\n\t\t\treturn ExpressionResolver.substitute(expr.expr, map);\r\n\t\t} else {\r\n\t\t\tconsole.log(expr);\r\n\t\t\tthrow Error('Unknown metaexpr');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static call(callee: Metaexpr, args: Expr0[]): Metaexpr {\r\n\t\tif (!(callee instanceof Fun)) {\r\n\t\t\tconsole.log(callee);\r\n\t\t\tthrow Error('Illegal type');\r\n\t\t}\r\n\r\n\t\tif (!callee.expr) {\r\n\t\t\tthrow Error('Cannot call a callable without a body');\r\n\t\t}\r\n\r\n\t\tif (callee.params.length != args.length) {\r\n\t\t\tthrow Error('Illegal arguments length');\r\n\t\t}\r\n\r\n\t\tvar map = new Map();\r\n\r\n\t\tfor (var i = 0; i < callee.params.length; i++) {\r\n\t\t\tmap.set(callee.params[i], args[i]);\r\n\t\t}\r\n\r\n\t\treturn ExpressionResolver.substitute(callee.expr, map);\r\n\t}\r\n\r\n\tpublic static expandCallOnce(expr: Metaexpr): Metaexpr {\r\n\t\tif (!iscall(expr)) {\r\n\t\t\tthrow Error('Illegal type');\r\n\t\t}\r\n\r\n\t\tif (iscall(expr.fun)) {\r\n\t\t\tvar fun = ExpressionResolver.expandCallOnce(expr.fun);\r\n\t\t\treturn makecall(fun, expr.args);\r\n\t\t}\r\n\r\n\t\tvar callee_: Metaexpr = expr.fun;\r\n\r\n\t\twhile (callee_ instanceof $Variable) {\r\n\t\t\tcallee_ = callee_.expr;\r\n\t\t}\r\n\r\n\t\tif (!(callee_ instanceof Fun)) {\r\n\t\t\tthrow Error('Something\\'s wrong');\r\n\t\t}\r\n\r\n\t\tif (!callee_.expr) {\r\n\t\t\tthrow Error('Could not expand');\r\n\t\t}\r\n\r\n\t\treturn ExpressionResolver.call(callee_, expr.args);\r\n\t}\r\n\r\n\t// expand0은 하지 않는다.\r\n\tpublic static expandMeta(expr: Metaexpr): Metaexpr {\r\n\t\tif (expr instanceof Tee) {\r\n\t\t\tvar left = expr.left.map(ExpressionResolver.expandMeta);\r\n\t\t\tvar right = ExpressionResolver.expandMeta(expr.right);\r\n\r\n\t\t\treturn new Tee({left, right});\r\n\t\t} else if (expr instanceof Funcall) {\r\n\t\t\tvar fun = ExpressionResolver.expandMeta(expr.fun),\r\n\t\t\t\targs = expr.args;\r\n\t\t\t\r\n\t\t\t// @ts-ignore\r\n\t\t\tif (!fun.expr || fun.name && !fun.isSchema)\r\n\t\t\t\treturn new Funcall({fun, args});\r\n\r\n\t\t\treturn ExpressionResolver.expandMeta(ExpressionResolver.call(fun, args));\r\n\t\t} else if (expr instanceof Reduction) {\r\n\t\t\treturn ExpressionResolver.expandMeta(expr.reduced);\r\n\t\t} else if (expr instanceof Fun) {\r\n\t\t\tif (!expr.expr) return expr;\r\n\t\t\tif (expr.type instanceof ObjectType && expr.name) return expr;\r\n\r\n\t\t\treturn new Fun({\r\n\t\t\t\tisSchema: expr.isSchema,\r\n\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\taxiomatic: expr.axiomatic,\r\n\t\t\t\tname: null,\r\n\t\t\t\tparams: expr.params,\r\n\t\t\t\texpr: ExpressionResolver.expandMeta(expr.expr)\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Variable) {\r\n\t\t\treturn expr;\r\n\t\t} else if (expr instanceof $Variable) {\r\n\t\t\treturn ExpressionResolver.expandMeta(expr.expr);\r\n\t\t} else {\r\n\t\t\tconsole.log(expr);\r\n\t\t\tthrow Error('Unknown metaexpr');\r\n\t\t}\r\n\t}\r\n\r\n\t// expr0의 이름 없는 funcall까지 풀음.\r\n\tpublic static expandMetaAndFuncalls(expr: Metaexpr) {\r\n\t\tif (expr instanceof Tee) {\r\n\t\t\tvar left = expr.left.map(ExpressionResolver.expandMetaAndFuncalls);\r\n\t\t\tvar right = ExpressionResolver.expandMetaAndFuncalls(expr.right);\r\n\r\n\t\t\treturn new Tee({left, right});\r\n\t\t} else if (expr instanceof Fun) {\r\n\t\t\tif (!expr.expr) return expr;\r\n\t\t\tif (expr.type instanceof ObjectType && expr.name) return expr;\r\n\r\n\t\t\treturn new Fun({\r\n\t\t\t\tisSchema: expr.isSchema,\r\n\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\taxiomatic: expr.axiomatic,\r\n\t\t\t\tname: null,\r\n\t\t\t\tparams: expr.params,\r\n\t\t\t\texpr: ExpressionResolver.expandMetaAndFuncalls(expr.expr)\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Funcall) {\r\n\t\t\tvar fun = ExpressionResolver.expandMetaAndFuncalls(expr.fun);\r\n\t\t\tvar args = expr.args.map(ExpressionResolver.expandMetaAndFuncalls);\r\n\r\n\t\t\tif (!fun.expr || fun.name && !fun.isSchema)\r\n\t\t\t\treturn new Funcall({fun, args});\r\n\r\n\t\t\treturn ExpressionResolver.expandMetaAndFuncalls(ExpressionResolver.call(fun, args));\r\n\t\t} else if (expr instanceof Reduction) {\r\n\t\t\treturn ExpressionResolver.expandMetaAndFuncalls(expr.reduced);\r\n\t\t} else if (expr instanceof Variable) {\r\n\t\t\treturn expr;\r\n\t\t} else if (expr instanceof $Variable) {\r\n\t\t\treturn ExpressionResolver.expandMetaAndFuncalls(expr.expr);\r\n\t\t} else {\r\n\t\t\tconsole.log(expr);\r\n\t\t\tthrow Error('Unknown metaexpr');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static nequalscall = 0;\r\n\tpublic static nequalstrue = 0;\r\n\tpublic static nrecursecall = 0;\r\n\tpublic static nrecursetrue = 0;\r\n\r\n\t/*\r\n\t * 스펙 참조.\r\n\t */\r\n\tpublic static equals(a: Metaexpr, b: Metaexpr) {\r\n\t\tfunction recurse(a: Metaexpr, b: Metaexpr, depth: number) {\r\n\t\t\tif (a == b) return true;\r\n\r\n\t\t\tif (!a.type.equals(b.type)) return false;\r\n\r\n\t\t\tif (a instanceof Reduction) {\r\n\t\t\t\treturn recurseWrap(a.reduced, b, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (b instanceof Reduction) {\r\n\t\t\t\treturn recurseWrap(a, b.reduced, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (a instanceof $Variable) {\r\n\t\t\t\treturn recurseWrap(a.expr, b, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (b instanceof $Variable) {\r\n\t\t\t\treturn recurseWrap(a, b.expr, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (iscall(a) && iscall(b)) {\r\n\t\t\t\tif (iscall(a.fun)) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\tExpressionResolver.expandCallOnce(a), b, depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (iscall(b.fun)) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\ta, ExpressionResolver.expandCallOnce(b), depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar aHasFunExpr = (a.fun instanceof Fun) && a.fun.expr,\r\n\t\t\t\t\tbHasFunExpr = (b.fun instanceof Fun) && b.fun.expr;\r\n\r\n\t\t\t\tif (a.fun == b.fun || !aHasFunExpr && !bHasFunExpr) {\r\n\t\t\t\t\tif (a.fun != b.fun) return false;\r\n\r\n\t\t\t\t\tif (!aHasFunExpr && !bHasFunExpr) {\r\n\t\t\t\t\t\tfor (var i = 0; i < a.args.length; i++) {\r\n\t\t\t\t\t\t\tif (!recurseWrap(a.args[i], b.args[i], depth + 1)) return false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (a.args.every((_, i) => {\r\n\t\t\t\t\t\treturn recurseWrap(a.args[i], (b as Funcall).args[i], depth + 1);\r\n\t\t\t\t\t})) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (aHasFunExpr) {\r\n\t\t\t\t\treturn recurseWrap(ExpressionResolver.expandCallOnce(a), b, depth + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recurseWrap(a, ExpressionResolver.expandCallOnce(b), depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (iscall(a)) {\r\n\t\t\t\tif (iscall(a.fun)) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\tExpressionResolver.expandCallOnce(a), b, depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!(a.fun instanceof Fun && a.fun.expr)) return false;\r\n\r\n\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\tExpressionResolver.expandCallOnce(a), b, depth + 1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (iscall(b)) {\r\n\t\t\t\tif (iscall(b.fun)) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\ta, ExpressionResolver.expandCallOnce(b), depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!(b.fun instanceof Fun && b.fun.expr)) return false;\r\n\r\n\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\ta, ExpressionResolver.expandCallOnce(b), depth + 1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (a instanceof Tee) {\r\n\t\t\t\tif (!(b instanceof Tee)) {\r\n\t\t\t\t\tthrow Error('Assertion failed');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (var i = 0; i < a.left.length; i++) {\r\n\t\t\t\t\tif (!recurseWrap(a.left[i], b.left[i], depth + 1)) return false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recurseWrap(a.right, b.right, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (a.type.isFunctional) {\r\n\t\t\t\tvar placeholders = [];\r\n\t\t\t\tvar len = a.type.resolve().from.length;\r\n\r\n\t\t\t\tfor (var i = 0; i < len; i++) {\r\n\t\t\t\t\tplaceholders.push(new Variable({\r\n\t\t\t\t\t\tisParam: true,\r\n\t\t\t\t\t\ttype: a.type.resolve().from[i],\r\n\t\t\t\t\t\tname: '$' + i\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\tmakecall(a, placeholders), makecall(b, placeholders), depth + 1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar recurseWrap = recurse;\r\n\r\n\t\t// function recurseWrap(a, b, depth) {\r\n\t\t// \tER.nrecursecall++;\r\n\r\n\t\t// \tconsole.log(`depth ${depth}\\n${a}\\n\\n${b}`);\r\n\t\t// \tvar ret = recurse(a, b, depth);\r\n\t\t// \tconsole.log(`depth ${depth} → ${ret}`);\r\n\r\n\t\t// \tif (ret) ER.nrecursetrue++;\r\n\r\n\t\t// \treturn ret;\r\n\t\t// }\r\n\r\n\t\tExpressionResolver.nequalscall++;\r\n\t\tvar ret = recurseWrap(a, b, 0);\r\n\t\tif (ret) ExpressionResolver.nequalstrue++;\r\n\t\treturn ret;\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport Variable from './Variable';\r\nimport Scope from '../Scope';\r\nimport Fun from './Fun';\r\nimport Expr0 from './Expr0';\r\nimport Metaexpr from './Metaexpr';\r\nimport { isNameable } from './Nameable';\r\n\r\ninterface FuncallArgumentType {\r\n\tfun: Metaexpr;\r\n\targs: Expr0[];\r\n}\r\n\r\nexport default class Funcall extends Expr0 {\r\n\t\r\n\tpublic readonly fun: Metaexpr;\r\n\tpublic readonly args: Expr0[];\r\n\r\n\tconstructor ({fun, args}: FuncallArgumentType, scope?: Scope) {\r\n\t\tif (fun.type.isSimple) {\r\n\t\t\tvar name = isNameable(fun) ? fun.name : '<anonymous>';\r\n\t\t\tthrow Node.error(`${name} is not callable`, scope);\r\n\t\t}\r\n\r\n\t\tif (!(args instanceof Array) || args.map(e => e instanceof Node).some(e => !e))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\t \r\n\t\tvar resolvedType = fun.type.resolve(),\r\n\t\t\tparamTypes = resolvedType.from,\r\n\t\t\targTypes = args.map(e => e.type);\r\n\r\n\t\tif (paramTypes.length != argTypes.length)\r\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, scope);\r\n\r\n\t\tfor (var i = 0; i < paramTypes.length; i++) {\r\n\t\t\tif (!paramTypes[i].equals(argTypes[i])) {\r\n\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, scope);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper(scope, null, null, resolvedType.to);\r\n\t\t\r\n\t\tthis.fun = fun;\r\n\t\tthis.args = args;\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps) || this.fun.isProved(hyps);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tvar args: any = this.args.map(arg => {\r\n\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\r\n\t\t\treturn arg.toIndentedString(indent + 1);\r\n\t\t});\r\n\t\r\n\t\tif (args.join('').length <= 50) {\r\n\t\t\targs = this.args.map(arg => {\r\n\t\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\r\n\t\t\t\treturn arg.toIndentedString(indent);\r\n\t\t\t});\r\n\t\r\n\t\t\targs = args.join(', ');\r\n\t\t\t\r\n\t\t\tif (this.fun instanceof Fun && this.fun.isSchema) {\r\n\t\t\t\treturn `${this.fun.name || `(${this.fun})`}(${args})`;\r\n\t\t\t} else {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t!(this.fun instanceof Fun) || !this.fun.name\r\n\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\r\n\t\t\t\t\t\t: this.fun.name,\r\n\t\t\t\t\t`(${args})`\r\n\t\t\t\t].join('');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\r\n\t\t\t\r\n\t\t\tif (this.fun instanceof Fun && this.fun.isSchema) {\r\n\t\t\t\treturn [\r\n\t\t\t\t\tthis.fun.name || `(${this.fun.toIndentedString(indent)})`,\r\n\t\t\t\t\t'(',\r\n\t\t\t\t\t'\\t' + args,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t\t} else {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\t!(this.fun instanceof Fun) || !('name' in this.fun && this.fun.name)\r\n\t\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\r\n\t\t\t\t\t\t\t: this.fun.name\r\n\t\t\t\t\t) + '(',\r\n\t\t\t\t\t'\\t' + args,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tif (this.fun instanceof Fun && this.fun.isSchema) {\r\n\t\t\treturn (\r\n\t\t\t\tthis.fun.name\r\n\t\t\t\t\t? `\\\\href{#schema-${this.fun.proved ? 'p' : 'np'}-${this.fun.name}}{\\\\textsf{${Node.escapeTeX(this.fun.name)}}}`\r\n\t\t\t\t\t: this.fun.toTeXString(false)\r\n\t\t\t) + `\\\\mathord{\\\\left(${this.args.map(arg => {\r\n\t\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\r\n\t\t\t}).join(', ')}\\\\right)}`;\r\n\t\t}\r\n\r\n\t\tif (this.fun instanceof Fun)\r\n\t\t\treturn this.fun.funcallToTeXString(this.args, prec);\r\n\t\t\r\n\t\tvar args = this.args.map(arg => {\r\n\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t!(isNameable(this.fun) && this.fun.name) || this.fun instanceof Variable\r\n\t\t\t\t? this.fun.toTeXString(false)\r\n\t\t\t\t: this.fun.name.length == 1\r\n\t\t\t\t\t? Node.escapeTeX(this.fun.name)\r\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.fun.name)}}`\r\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport MetaType from './MetaType';\r\nimport ExpressionResolver from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport $Variable from './$Variable';\r\nimport ObjectType from './ObjectType';\r\nimport Metaexpr from './Metaexpr';\r\n\r\ninterface TeeArgumentType {\r\n\tleft: Metaexpr[];\r\n\tdef$s?: $Variable[];\r\n\tright: Metaexpr;\r\n}\r\n\r\nexport default class Tee extends Metaexpr {\r\n\r\n\tpublic readonly left;\r\n\tpublic readonly def$s: $Variable[];\r\n\tpublic readonly right;\r\n\r\n\tconstructor ({left, def$s, right}: TeeArgumentType, scope?: Scope) {\r\n\t\tif (!(left instanceof Array\r\n\t\t\t\t&& left.every(l => {\r\n\t\t\t\t\treturn l.type instanceof ObjectType\r\n\t\t\t\t\t\t|| l.type instanceof MetaType;\r\n\t\t\t\t}))) {\r\n\t\t\tconsole.log(left);\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t}\r\n\r\n\t\tif (def$s && !(def$s instanceof Array && def$s.every($ => $ instanceof $Variable)))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\r\n\t\tif (!(right.type instanceof ObjectType || right.type instanceof MetaType)) {\r\n\t\t\tconsole.log(right);\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t}\r\n\r\n\t\tif (right.type.isFunctional) {\r\n\t\t\tthrow Node.error('RHS of a rule cannot be a schema', scope);\r\n\t\t}\r\n\r\n\t\tsuper(scope, null, null, new MetaType({\r\n\t\t\tfunctional: false,\r\n\t\t\tleft: left.map(e => e.type),\r\n\t\t\tright: right.type\r\n\t\t}));\r\n\r\n\t\tthis.left = left;\r\n\t\tthis.def$s = def$s || [];\r\n\t\tthis.right = right;\r\n\t\tthis.precedence = Node.PREC_COMMA;\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps) || this.right.isProved(hyps.concat(this.left));\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tif (!this.left.length) {\r\n\t\t\treturn '|- ' + this.right.toIndentedString(indent);\r\n\t\t}\r\n\t\r\n\t\treturn [\r\n\t\t\t'\\t' + this.left.map(e => e.toIndentedString(indent + 1)).join(',\\n' + '\\t'.repeat(indent + 1)),\r\n\t\t\t'|-',\r\n\t\t\t'\\t' + this.right.toIndentedString(indent + 1)\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n\t\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tvar expanded = ExpressionResolver.expandMetaAndFuncalls(this);\r\n\r\n\t\treturn [\r\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\r\n\t\t\t`{${expanded.left.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')} \\\\vdash ${expanded.right.toTeXString(Node.PREC_COMMA)}}`,\r\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\r\n\t\t].join('');\r\n\t}\r\n}","import Metaexpr from \"./Metaexpr\";\r\n\r\nexport default abstract class Expr0 extends Metaexpr {\r\n    \r\n}","import Nameable from './Nameable';\r\nimport Node, { Precedence } from './Node';\r\nimport ObjectType from './ObjectType';\r\n\r\nexport default class MetaType extends Node implements Nameable {\r\n\tpublic readonly isFunctional: boolean;\r\n\tpublic readonly isSimple: boolean;\r\n\tpublic readonly name: string;\r\n\tpublic readonly left: (ObjectType | MetaType)[];\r\n\tpublic readonly right: ObjectType | MetaType;\r\n\tpublic readonly from: ObjectType[];\r\n\tpublic readonly to: MetaType;\r\n\r\n\tconstructor (o) {\r\n\t\tsuper(null, null, null);\r\n\r\n\t\tif (typeof o.functional != 'boolean')\r\n\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\r\n\t\t\r\n\t\tthis.isFunctional = o.functional;\r\n\t\tthis.isSimple = !o.functional;\r\n\r\n\t\tif (!o.functional) {\r\n\t\t\tif (!(o.left instanceof Array))\r\n\t\t\t\tthrow Node.error('left should be an array', null);\r\n\r\n\t\t\tthis.left = o.left;\r\n\t\t\tthis.right = o.right;\r\n\t\t} else {\r\n\t\t\tif (o.from.some(f => !(f instanceof ObjectType)))\r\n\t\t\t\tthrow Node.error('o.from.some(f => !(f instanceof ObjectType))', null);\r\n\t\t\tif (!(o.to instanceof MetaType))\r\n\t\t\t\tthrow Node.error('!(o.to instanceof MetaType)', null);\r\n\r\n\t\t\tif (o.to.isFunctional)\r\n\t\t\t\tthrow Node.error('Functional metatype in functional metatype is not supported', null);\r\n\r\n\t\t\tthis.from = o.from;\r\n\t\t\tthis.to = o.to;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic resolve() {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number) {\r\n\t\tif (this.isSimple) return `[${this.left.join(', ')} |- ${this.right}]`;\r\n\r\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tthrow new Error('Method not implemented.');\r\n\t}\r\n\r\n\tpublic equals(t: object): boolean {\r\n\t\tif (!(t instanceof MetaType)) return false;\r\n\r\n\t\tif (this.isSimple != t.isSimple) return false;\r\n\r\n\t\tif (this.isSimple) {\r\n\t\t\tif (this.left.length != t.left.length) return false;\r\n\r\n\t\t\tfor (let i = 0; i < this.left.length; i++) {\r\n\t\t\t\tif (!this.left[i].equals(t.left[i])) return false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.right.equals(t.right)) return false;\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (this.from.length != t.from.length) return false;\r\n\r\n\t\tfor (let i = 0; i < this.from.length; i++)\r\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\r\n\r\n\t\treturn this.to.equals(t.to);\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport Funcall from './Funcall';\r\nimport ExpressionResolver from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport Tee from './Tee';\r\nimport Fun from './Fun';\r\nimport MetaType from './MetaType';\r\nimport Metaexpr from './Metaexpr';\r\nimport Expr0 from './Expr0';\r\n\r\ninterface ReductionArgumentType {\r\n\tsubject: Metaexpr;\r\n\tguesses: Expr0[];\r\n\tleftargs: Metaexpr[];\r\n\texpected: Metaexpr;\r\n}\r\n\r\nexport default class Reduction extends Metaexpr {\r\n\tpublic readonly subject: Metaexpr;\r\n\tpublic readonly guesses;\r\n\tpublic readonly leftargs;\r\n\tpublic readonly reduced;\r\n\tpublic readonly type;\r\n\r\n\tconstructor ({subject, guesses, leftargs, expected}: ReductionArgumentType, scope?: Scope) {\r\n\t\tif (guesses) {\r\n\t\t\tlet resolvedType = subject.type.resolve(),\r\n\t\t\t\tparamTypes = resolvedType.from,\r\n\t\t\t\targTypes = guesses.map(e => e && e.type);\r\n\r\n\t\t\tif (paramTypes.length != argTypes.length)\r\n\t\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, scope);\r\n\r\n\t\t\tfor (var i = 0; i < paramTypes.length; i++) {\r\n\t\t\t\tif (argTypes[i] && !paramTypes[i].equals(argTypes[i])) {\r\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, scope);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (subject instanceof Fun) {\r\n\t\t\tsubject.params.forEach((p, i) => {\r\n\t\t\t\tif (!(guesses && guesses[i]) && !p.guess) {\r\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} could not be guessed`, scope);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\r\n\t\t\tvar derefs = subject.params.map((p, i) => {\r\n\t\t\t\tif (guesses && guesses[i]) return guesses[i];\r\n\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tvar tee = ExpressionResolver.expandMeta(subject.expr) as Tee;\r\n\t\r\n\t\t\t\treturn Reduction.query(\r\n\t\t\t\t\tp.guess,\r\n\t\t\t\t\ttee.left,\r\n\t\t\t\t\tleftargs,\r\n\t\t\t\t\ttee.right,\r\n\t\t\t\t\texpected,\r\n\t\t\t\t\tscope\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\r\n\t\t\tsubject = new Funcall({\r\n\t\t\t\tfun: subject,\r\n\t\t\t\targs: derefs,\r\n\t\t\t}, scope);\r\n\t\t} else if (guesses) {\r\n\t\t\tthrow Node.error('Something\\'s wrong', scope);\r\n\t\t}\r\n\t\r\n\t\tif (!(subject.type instanceof MetaType && subject.type.isSimple))\r\n\t\t\tthrow Node.error('Subject is not reducible', scope);\r\n\t\r\n\t\tif (!(leftargs instanceof Array)\r\n\t\t\t\t|| leftargs.map(e => e instanceof Node).some(e => !e))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\r\n\t\tvar paramTypes = subject.type.left,\r\n\t\t\tleftargTypes = leftargs.map(e => e.type);\r\n\r\n\t\tif (paramTypes.length != leftargTypes.length)\r\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${leftargTypes.length}`, scope);\r\n\r\n\t\tfor (let i = 0; i < paramTypes.length; i++) {\r\n\t\t\tif (!paramTypes[i].equals(leftargTypes[i]))\r\n\t\t\t\tthrow Node.error(`Illegal argument type (expected ${paramTypes[i]}): ${leftargTypes[i]}`, scope);\r\n\t\t}\r\n\r\n\t\tsuper(scope, null, null, subject.type.right);\r\n\r\n\t\tthis.subject = subject;\r\n\t\tthis.leftargs = leftargs;\r\n\r\n\t\tvar tee = ExpressionResolver.expandMetaAndFuncalls(subject);\r\n\r\n\t\tif (!(tee instanceof Tee)) {\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < tee.left.length; i++) {\r\n\t\t\tif (!ExpressionResolver.equals(tee.left[i], leftargs[i])) {\r\n\t\t\t\tthrow Node.error(`LHS #${i + 1} failed to match:\r\n\r\n--- EXPECTED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(tee.left[i])}\r\n----------------\r\n\r\n--- RECEIVED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(leftargs[i])}\r\n----------------`, scope);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (expected) {\r\n\t\t\tif (!ExpressionResolver.equals(tee.right, expected)) {\r\n\t\t\t\tthrow Node.error(`RHS failed to match:\r\n\r\n--- EXPECTED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(tee.right)}\r\n----------------\r\n\r\n--- RECEIVED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(expected)}\r\n----------------`, scope);\r\n\t\t\t}\r\n\r\n\t\t\tthis.reduced = expected;\r\n\t\t} else {\r\n\t\t\tthis.reduced = tee.right;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn super.isProved(hyps)\r\n\t\t\t|| this.subject.isProved(hyps)\r\n\t\t\t\t&& this.leftargs.every(l => l.isProved(hyps));\r\n\t}\r\n\r\n\tpublic static query(guess, left, leftargs, right, expected, scope: Scope) {\r\n\t\tif (guess.length == 0) throw Node.error('wut', scope);\r\n\r\n\t\tvar lef, ret;\r\n\r\n\t\tif (guess[0] == 'r') {\r\n\t\t\tif (!expected) {\r\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t}\r\n\r\n\t\t\tlef = right;\r\n\t\t\tret = expected;\r\n\t\t} else {\r\n\t\t\tif (!(1 <= guess[0] * 1 && guess[0] * 1 <= leftargs.length))\r\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent index out of range`, scope);\r\n\r\n\t\t\tlef = left[guess[0] * 1 - 1];\r\n\t\t\tret = leftargs[guess[0] * 1 - 1];\r\n\t\t}\r\n\r\n\t\treturn (function recurse(guess, lef, node, ptr) {\r\n\t\t\tnode = ExpressionResolver.expandMetaAndFuncalls(node);\r\n\t\t\t\r\n\t\t\tif (guess.length <= ptr) return node;\r\n\r\n\t\t\tif (/[0-9]/.test(guess[ptr])) {\r\n\t\t\t\tvar n = guess[ptr] * 1;\r\n\r\n\t\t\t\tif (lef instanceof Tee && node instanceof Tee) {\r\n\t\t\t\t\tif (lef.left.length != node.left.length) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent length mismatch`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!(1 <= n && n <= node.left.length)) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent index out of range`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn recurse(guess, lef.left[n - 1], node.left[n - 1], ptr + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tif (!lef.fun || !node.fun) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (ExpressionResolver.equals(lef.fun, node.fun)) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!node.fun.expr) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnode = ExpressionResolver.expandCallOnce(node);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!node.args || !(1 <= n && n <= node.args.length))\r\n\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\r\n\t\t\t\treturn recurse(guess, lef.args[n - 1], node.args[n - 1], ptr + 1);\r\n\t\t\t} else if (guess[ptr] == 'r') {\r\n\t\t\t\tif (lef instanceof Tee && node instanceof Tee) {\r\n\t\t\t\t\treturn recurse(guess, lef.right, node.right, ptr + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t}\r\n\r\n\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t})(guess, lef, ret, 1);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tvar leftargs = this.leftargs.map(arg => {\r\n\t\t\treturn arg.toIndentedString(indent + 1);\r\n\t\t});\r\n\t\r\n\t\tif (leftargs.join('').length <= 50) {\r\n\t\t\tleftargs = this.leftargs.map(arg => {\r\n\t\t\t\treturn arg.toIndentedString(indent);\r\n\t\t\t});\r\n\t\r\n\t\t\tleftargs = leftargs.join(', ');\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\r\n\t\t\t\tleftargs,\r\n\t\t\t\t']'\r\n\t\t\t].join('');\r\n\t\t}\r\n\t\telse {\r\n\t\t\tleftargs = leftargs.join(',\\n' + '\\t'.repeat(indent + 1));\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\r\n\t\t\t\t'\\t' + leftargs,\r\n\t\t\t\t']'\r\n\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\treturn `${this.subject.toTeXString(false)}[${this.leftargs.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}]`;\r\n\t}\r\n}","export default interface Nameable {\r\n    name: string;\r\n}\r\n\r\nexport function isNameable(obj: object): obj is Nameable {\r\n    return 'name' in obj;\r\n}","var grammar;\r\n\r\nif (process.env.__webpack__) {\r\n\tgrammar = require('raw-loader!./grammar.pegjs').default;\r\n} else {\r\n\tvar fs = require('fs');\r\n\tvar path = require('path');\r\n\r\n\tgrammar = fs.readFileSync(path.join(__dirname, 'grammar.pegjs'), 'utf-8');\r\n}\r\n\r\nvar Program = require('./Program').default;\r\n\r\nmodule.exports = {grammar, Program};","export default \"start =\\r\\n\\t_ lines:(a:line _ {return a})* {return lines}\\r\\n\\r\\nline =\\r\\n\\timport\\r\\n\\t/ typedef\\r\\n\\t/ defv\\r\\n\\t/ defun\\r\\n\\t/ defschema\\r\\n\\r\\nevaluable =\\r\\n\\t_ e:evaluable_internal _ {return e}\\r\\n\\r\\nevaluable_internal =\\r\\n\\ttypedef\\r\\n\\t/ defv\\r\\n\\t/ defun\\r\\n\\t/ defschema\\r\\n\\t/ metaexpr\\r\\n\\r\\nimport =\\r\\n\\t'import' __\\r\\n\\tfilename:ident _\\r\\n\\tsem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'import',\\r\\n\\t\\t\\tfilename,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ntypedef =\\r\\n\\tdoc:(documentation __)?\\r\\n\\tbase:(\\\"base\\\" __)?\\r\\n\\t\\\"type\\\" __\\r\\n\\torigin:(o:ftype __ {return o})?\\r\\n\\tname:ident _ sem\\r\\n\\t{\\r\\n\\t\\tdoc = doc && doc[0];\\r\\n\\t\\t\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'typedef',\\r\\n\\t\\t\\tdoc,\\r\\n\\t\\t\\tbase: !!base,\\r\\n\\t\\t\\torigin,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefv =\\r\\n\\tdoc:(documentation __)? tex:(tex __)? type:type __ name:ident _ sem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefparam =\\r\\n\\ttex:(tex __)? type:type __ name:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tisParam: true,\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefschemaparam =\\r\\n\\ttex:(tex __)? type:type __ name:ident\\r\\n\\tguess:(_ ':' _ '@' g:$[a-z0-9_]+ {return g})?\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tisParam: true,\\r\\n\\t\\t\\tguess,\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n \\r\\ndefun =\\r\\n\\tdoc:(documentation __)?\\r\\n\\ttex:(tex __)?\\r\\n\\trettype:type __\\r\\n\\tname:ident _\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\texpr:(\\r\\n\\t\\t\\\"{\\\" _\\r\\n\\t\\texpr:expr0 _\\r\\n\\t\\t\\\"}\\\"\\r\\n\\t\\t{return expr}\\r\\n\\t\\t/ sem {return null}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defun',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\trettype,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefschema =\\r\\n\\tdoc:(documentation __)?\\r\\n\\tannotations: (a:annotation __ {return a})*\\r\\n\\taxiomatic:(\\\"axiomatic\\\" __)?\\r\\n\\t\\\"schema\\\" __\\r\\n\\tname:ident _\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defschemaparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defschemaparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"{\\\" _\\r\\n\\tdefdollars: (d:defdollar _ {return d})* _\\r\\n\\texpr:metaexpr _\\r\\n\\t\\\"}\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defschema',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\tannotations,\\r\\n\\t\\t\\taxiomatic: !!axiomatic,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\tdef$s: defdollars,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// var[...]\\r\\n// foo(...)[...]\\r\\n// foo[...][...]\\r\\n// (metaexpr)[...]\\r\\n// schema(?, ...)[...]\\r\\nreduction =\\r\\n\\tsubject:(\\r\\n\\t\\tschemacall\\r\\n\\t\\t/ var\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:metaexpr _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\tguesses:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:('?' {return null} / expr0) _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:('?' {return null} / expr0) _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)?\\r\\n\\tleftargs:(\\r\\n\\t\\t\\\"[\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:metaexpr _\\r\\n\\t\\t\\ttail:(\\\";\\\" _ e:metaexpr _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\"]\\\"\\r\\n\\t\\tb:(\\r\\n\\t\\t\\t_ '[' _\\r\\n\\t\\t\\t'as' __\\r\\n\\t\\t\\tm:metaexpr\\r\\n\\t\\t\\t']'\\r\\n\\t\\t\\t{return m}\\r\\n\\t\\t)?\\r\\n\\t\\t{return {a: a || [], b: b || null}}\\r\\n\\t)+\\r\\n\\t{\\r\\n\\t\\tvar ret = {\\r\\n\\t\\t\\t_type: 'reduction',\\r\\n\\t\\t\\tsubject,\\r\\n\\t\\t\\tguesses,\\r\\n\\t\\t\\tleftargs: leftargs[0].a,\\r\\n\\t\\t\\texpected: leftargs[0].b,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfor (var i = 1; i < leftargs.length; i++) {\\r\\n\\t\\t\\tret = {\\r\\n\\t\\t\\t\\t_type: 'reduction',\\r\\n\\t\\t\\t\\tsubject: ret,\\r\\n\\t\\t\\t\\tguesses: null,\\r\\n\\t\\t\\t\\tleftargs: leftargs[i].a,\\r\\n\\t\\t\\t\\texpected: leftargs[i].b,\\r\\n\\t\\t\\t\\tlocation: location()\\r\\n\\t\\t\\t};\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn ret;\\r\\n\\t}\\r\\n\\r\\n// var(...)\\r\\n// (metaexpr)(...)\\r\\nschemacall =\\r\\n\\tschema:(\\r\\n\\t\\tvar\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:metaexpr _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\targs:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:expr0 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'schemacall',\\r\\n\\t\\t\\tschema,\\r\\n\\t\\t\\targs,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// forall(f, g)\\r\\n// (expr0)(f, g)\\r\\nfuncall =\\r\\n\\tschema:(\\r\\n\\t\\tvar\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:expr0 _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\targs:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:expr0 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'funcall',\\r\\n\\t\\t\\tschema,\\r\\n\\t\\t\\targs,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// (T t) => expr0\\r\\n// (T t) => { expr0 }\\r\\nfunexpr =\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"=>\\\" _\\r\\n\\texpr:(\\r\\n\\t\\texpr0\\r\\n\\t\\t/ \\\"{\\\" _ e:expr0 _ \\\"}\\\" {return e}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'funexpr',\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// (T t) => metaexpr_internal_1\\r\\n// (T t) => { $foo = ...; metaexpr }\\r\\nschemaexpr =\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"=>\\\" _\\r\\n\\tfoo:(\\r\\n\\t\\texpr:metaexpr_internal_1\\r\\n\\t\\t{return {defdollars: [], expr}}\\r\\n\\t\\t/ \\\"{\\\" _\\r\\n\\t\\tdefdollars: (d:defdollar _ {return d})* _\\r\\n\\t\\texpr:metaexpr _\\r\\n\\t\\t\\\"}\\\"\\r\\n\\t\\t{return {defdollars, expr}}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'schemaexpr',\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\tdef$s: foo.defdollars,\\r\\n\\t\\t\\texpr: foo.expr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nmetaexpr =\\r\\n\\tleft:(\\r\\n\\t\\tl:(\\r\\n\\t\\t\\thead:metaexpr_internal_1 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:metaexpr_internal_1 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)? {return l || []}\\r\\n\\t)\\r\\n\\t\\\"|-\\\" _\\r\\n\\tdefdollars: (d:defdollar _ {return d})* _\\r\\n\\tright:metaexpr\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'tee',\\r\\n\\t\\t\\tdef$s: defdollars,\\r\\n\\t\\t\\tleft,\\r\\n\\t\\t\\tright,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/ metaexpr_internal_1\\r\\n\\r\\n/*\\r\\n * 다음이 성립하여야 한다.\\r\\n *\\r\\n * - reduction이 schemacall보다 앞이다.\\r\\n * - schemacall이 var보다 앞이다.\\r\\n *\\r\\n */\\r\\nmetaexpr_internal_1 =\\r\\n\\treduction\\r\\n\\t/ schemacall\\r\\n\\t/ var\\r\\n\\t/ schemaexpr\\r\\n\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\" {return e}\\r\\n\\r\\nexpr0 =\\r\\n\\tfuncall\\r\\n\\t/ funexpr\\r\\n\\t/ var\\r\\n\\t/ \\\"(\\\" _ e:expr0 _ \\\")\\\" {return e}\\r\\n\\r\\ndefdollar =\\r\\n\\tname:dollar_ident _\\r\\n\\t'=' _\\r\\n\\texpr:metaexpr _\\r\\n\\tsem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'def$',\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t};\\r\\n\\t}\\r\\n\\r\\ntype =\\r\\n\\tstype\\r\\n\\t/ ftype\\r\\n\\r\\nstype =\\r\\n\\tname:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'type',\\r\\n\\t\\t\\tftype: false,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nftype =\\r\\n\\t\\\"[\\\" _\\r\\n\\tfrom:(\\r\\n\\t\\ttype:type {return [type]}\\r\\n\\t\\t/ (\\r\\n\\t\\t\\ttt:(\\r\\n\\t\\t\\t\\t\\\"(\\\" _\\r\\n\\t\\t\\t\\thead: type\\r\\n\\t\\t\\t\\ttail:(_ \\\",\\\" _ t:type {return t})*\\r\\n\\t\\t\\t\\t_ \\\")\\\"\\r\\n\\t\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t\\t)\\r\\n\\t\\t\\t{return tt}\\r\\n\\t\\t)\\r\\n\\t) _\\r\\n\\t\\\"->\\\" _\\r\\n\\tto:type _\\r\\n\\t\\\"]\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'type',\\r\\n\\t\\t\\tftype: true,\\r\\n\\t\\t\\tfrom,\\r\\n\\t\\t\\tto,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nvar =\\r\\n\\tat_var\\r\\n\\t/ dollar_var\\r\\n\\t/ plain_var\\r\\n\\r\\nat_var =\\r\\n\\tname:at_ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\ttype: '@',\\r\\n\\t\\t\\tname: name.slice(1),\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndollar_var =\\r\\n\\tname:dollar_ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\ttype: '$',\\r\\n\\t\\t\\tname: name,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nplain_var =\\r\\n\\tname:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\ttype: 'normal',\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nkeyword =\\r\\n\\t\\\"as\\\"\\r\\n\\t/ \\\"axiomatic\\\"\\r\\n\\t/ \\\"base\\\"\\r\\n\\t/ \\\"import\\\"\\r\\n\\t/ \\\"schema\\\"\\r\\n\\t/ \\\"type\\\";\\r\\n\\r\\nannotation =\\r\\n\\t'@discouraged'\\r\\n\\t/ '@deprecated'\\r\\n\\r\\nident =\\r\\n\\t$(!(keyword ![a-zA-Z0-9_]) [a-zA-Z0-9_]+)\\r\\n\\r\\nat_ident =\\r\\n\\t$('@' [a-zA-Z0-9_]+)\\r\\n\\r\\ndollar_ident =\\r\\n\\t$('$' [a-zA-Z0-9_]+)\\r\\n\\r\\ndocumentation =\\r\\n\\t'\\\"' b:$(!'\\\"' a:. {return a})* '\\\"' {\\r\\n\\t\\treturn b\\r\\n\\t}\\r\\n\\r\\ntex =\\r\\n\\t'$' b:$(!'$' a:. {return a})* '$' {\\r\\n\\t\\treturn b\\r\\n\\t}\\r\\n\\r\\ncomment =\\r\\n\\t\\\"#\\\" (!newline .)*\\r\\n\\t/ \\\"//\\\" (!newline .)*\\r\\n\\t/ \\\"/*\\\" (!\\\"*/\\\" .)* \\\"*/\\\"\\r\\n\\r\\nnewline =\\r\\n\\t\\\"\\\\r\\\\n\\\" / \\\"\\\\r\\\" / \\\"\\\\n\\\"\\r\\n\\r\\n// optional whitespace\\r\\n_ =\\r\\n\\t([ \\\\t\\\\n\\\\r] / comment)*\\r\\n\\r\\n// mandatory whitespace\\r\\n__ =\\r\\n\\t([ \\\\t\\\\n\\\\r] / comment)+\\r\\n\\r\\nsem =\\r\\n\\t\\\";\\\"\";","import Scope from './Scope';\r\nimport PegInterface from './PegInterface';\r\nimport { EvaluableObject, LineObject } from './PegInterfaceDefinitions';\r\nimport ProofExplorer from './ProofExplorer';\r\n\r\nexport default class Program {\r\n\tpublic scope = new Scope(null);\r\n\tpublic readonly parser;\r\n\tpublic readonly scopeMap: Map<string, Scope> = new Map();\r\n\t\r\n\tconstructor (parser) {\r\n\t\tif (!parser) throw Error('no');\r\n\t\tthis.parser = parser;\r\n\t}\r\n\r\n\tpublic async loadModule(filename, loader): Promise<Scope> {\r\n\t\treturn this.scope = await this.loadModuleInternal(filename, loader);\r\n\t}\r\n\r\n\tprivate async loadModuleInternal(filename, loader): Promise<Scope> {\r\n\t\tif (this.scopeMap.has(filename)) {\r\n\t\t\treturn this.scopeMap.get(filename);\r\n\t\t}\r\n\r\n\t\tvar scope = new Scope(null);\r\n\r\n\t\tvar code = await loader(filename);\r\n\t\tvar parsed = this.parser.parse(code);\r\n\t\tawait this.feed(parsed, scope, loader);\r\n\r\n\t\tthis.scopeMap.set(filename, scope);\r\n\t\treturn scope;\r\n\t}\r\n\r\n\tpublic async feed(lines: LineObject[], scope: Scope=this.scope, loader) {\r\n\t\tfor (var i = 0; i < lines.length; i++) {\r\n\t\t\tvar line = lines[i];\r\n\t\t\t\r\n\t\t\tswitch (line._type) {\r\n\t\t\t\tcase 'import':\r\n\t\t\t\t\tvar scope2 = await this.loadModuleInternal(line.filename, loader);\r\n\t\t\t\t\tscope.importMap.set(line.filename, scope2);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'typedef':\r\n\t\t\t\t\tvar type = PegInterface.type(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasType(type.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Type ${type.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addType(type);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defv':\r\n\t\t\t\t\tvar variable = PegInterface.variable(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasVariable(variable.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Definition ${variable.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addVariable(variable);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defun':\r\n\t\t\t\t\tvar fun = PegInterface.fun(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasVariable(fun.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Definition ${fun.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addFun(fun);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defschema':\r\n\t\t\t\t\tvar schema = PegInterface.schema(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasSchema(schema.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Schema ${schema.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addSchema(schema);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tthrow Error(`Unknown line type ${line._type}`);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tpublic evaluate(line: EvaluableObject) {\r\n\t\tswitch (line._type) {\r\n\t\t\tcase 'typedef':\r\n\t\t\t\treturn PegInterface.type(line, this.scope);\r\n\t\t\tcase 'defv':\r\n\t\t\t\treturn PegInterface.variable(line, this.scope);\r\n\t\t\tcase 'defun':\r\n\t\t\t\treturn PegInterface.fun(line, this.scope);\r\n\t\t\tcase 'defschema':\r\n\t\t\tcase 'schemaexpr':\r\n\t\t\t\treturn PegInterface.schema(line, this.scope);\r\n\t\t\tcase 'tee':\r\n\t\t\t\treturn PegInterface.tee(line, this.scope);\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn PegInterface.reduction(line, this.scope);\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\treturn PegInterface.schemacall(line, this.scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PegInterface.metavar(line, this.scope);\r\n\t\t\tdefault:\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tthrow Error(`Unknown line type ${line._type}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getProofExplorer(name: string, ktx) {\r\n\t\treturn ProofExplorer.get(this.scope, name, ktx);\r\n\t}\r\n}","import ObjectType from './nodes/ObjectType';\r\nimport Variable from './nodes/Variable';\r\nimport Fun from './nodes/Fun';\r\nimport StackTrace from './StackTrace';\r\nimport $Variable from './nodes/$Variable';\r\nimport Metaexpr from './nodes/Metaexpr';\r\n\r\nexport type NestedTypeInput = string | NestedTypeInput[];\r\n\r\nexport default class Scope {\r\n\tpublic readonly importMap: Map<string, Scope> = new Map();\r\n\r\n\tpublic readonly typedefMap: Map<string, ObjectType> = new Map();\r\n\tpublic readonly defMap: Map<string, Variable | Fun> = new Map();\r\n\tpublic readonly schemaMap: Map<string, Fun> = new Map();\r\n\tpublic readonly $Map: Map<string, $Variable> = new Map();\r\n\tpublic readonly hypotheses: Metaexpr[] = [];\r\n\r\n\tpublic readonly parent: Scope;\r\n\tpublic readonly root: Scope;\r\n\r\n\tpublic readonly trace: StackTrace;\r\n\tpublic baseType: ObjectType;\r\n\r\n\tconstructor (parent: Scope, trace?: StackTrace) {\r\n\t\tthis.parent = parent;\r\n\t\tthis.root = parent ? parent.root : this;\r\n\r\n\t\tif (trace && !(trace instanceof StackTrace)) {\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tthis.trace = trace || new StackTrace();\r\n\r\n\t\tthis.baseType = parent ? parent.baseType : null;\r\n\t}\r\n\r\n\tpublic extend(type, name, location): Scope {\r\n\t\tvar child = new Scope(this, this.trace.extend(type, name, location));\r\n\t\tthis.hypotheses.forEach(h => child.hypotheses.push(h));\r\n\t\treturn child;\r\n\t}\r\n\r\n\tpublic error(message: string): Error {\r\n\t\treturn this.trace.error(message);\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic hasOwnType(name: NestedTypeInput): boolean {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\treturn this.typedefMap.has(name)\r\n\t\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnType(name));\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\treturn name.map(e => {\r\n\t\t\treturn this.hasOwnType(e);\r\n\t\t}).every(e => e);\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic hasType(name: NestedTypeInput): boolean {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\treturn this.hasOwnType(name)\r\n\t\t\t\t|| (!!this.parent && this.parent.hasType(name));\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\treturn name.map(e => {\r\n\t\t\treturn this.hasType(e);\r\n\t\t}).every(e => e);\r\n\t}\r\n\r\n\tpublic addType(type: ObjectType): ObjectType {\r\n\t\tif (!(type instanceof ObjectType))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (!type.name)\r\n\t\t\tthrow this.error('Something\\'s wrong');\r\n\r\n\t\tif (this.hasOwnType(type.name))\r\n\t\t\tthrow this.error(`Type ${type.name} has already been declared`);\r\n\r\n\t\tif (type.isBaseType) {\r\n\t\t\tif (this.baseType) {\r\n\t\t\t\tthrow this.error('A base type already exists');\r\n\t\t\t}\r\n\r\n\t\t\t(function broadcast(scope: Scope) {\r\n\t\t\t\tscope.baseType = type;\r\n\t\t\t\tif (scope.parent) broadcast(scope.parent);\r\n\t\t\t})(this);\r\n\t\t}\r\n\r\n\t\tthis.typedefMap.set(type.name, type);\r\n\t\treturn type;\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic getType(name: NestedTypeInput): ObjectType {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\tif (!this.hasType(name))\r\n\t\t\t\tthrow this.error(`Type ${name} is not defined`);\r\n\r\n\t\t\treturn this.typedefMap.has(name)\r\n\t\t\t\t? this.typedefMap.get(name)\r\n\t\t\t\t: (!!this.parent && this.parent.getType(name))\r\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\t\treturn s.hasType(name)\r\n\t\t\t\t\t})[0].getType(name);\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\tvar from = name.slice(0, name.length - 1).map(e => {\r\n\t\t\treturn this.getType(e);\r\n\t\t});\r\n\r\n\t\tvar to = this.getType(name[name.length - 1]);\r\n\r\n\t\treturn new ObjectType({\r\n\t\t\tfunctional: true,\r\n\t\t\tfrom,\r\n\t\t\tto\r\n\t\t});\r\n\t}\r\n\r\n\tpublic hasOwnVariable(name: string): boolean {\r\n\t\treturn this.defMap.has(name)\r\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnVariable(name));\r\n\t}\r\n\r\n\tpublic hasVariable(name: string): boolean {\r\n\t\treturn this.hasOwnVariable(name)\r\n\t\t\t|| (!!this.parent && this.parent.hasVariable(name));\r\n\t}\r\n\r\n\tpublic addVariable(variable: Variable | Fun): Variable | Fun {\r\n\t\tif (!(variable instanceof Variable))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwnVariable(variable.name))\r\n\t\t\tthrow this.error(`Definition ${variable.name} has already been declared`);\r\n\r\n\t\tthis.defMap.set(variable.name, variable);\r\n\t\treturn variable;\r\n\t}\r\n\r\n\tpublic addFun(fun: Fun): Fun {\r\n\t\tif (!(fun instanceof Fun))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (!fun.name)\r\n\t\t\tthrow this.error('Cannot add anonymous fun to scope');\r\n\r\n\t\tif (this.hasOwnVariable(fun.name))\r\n\t\t\tthrow this.error(`Definition ${fun.name} has already been declared`);\r\n\r\n\t\tthis.defMap.set(fun.name, fun);\r\n\t\treturn fun;\r\n\t}\r\n\r\n\tpublic getVariable(name: string): Variable | Fun {\r\n\t\tif (!this.hasVariable(name))\r\n\t\t\tthrow this.error(`Definition ${name} is not defined`);\r\n\r\n\t\treturn this.defMap.has(name)\r\n\t\t\t? this.defMap.get(name)\r\n\t\t\t: (!!this.parent && this.parent.getVariable(name))\r\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\treturn s.hasVariable(name)\r\n\t\t\t\t})[0].getVariable(name);\r\n\t}\r\n\r\n\tpublic hasOwnSchema(name: string): boolean {\r\n\t\treturn this.schemaMap.has(name) || this.defMap.has(name)\r\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnSchema(name));\r\n\t}\r\n\r\n\tpublic hasSchema(name: string): boolean {\r\n\t\treturn this.hasOwnSchema(name)\r\n\t\t\t|| (!!this.parent && this.parent.hasSchema(name));\r\n\t}\r\n\r\n\tpublic addSchema(schema: Fun): Fun {\r\n\t\tif (!(schema instanceof Fun))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwnSchema(schema.name))\r\n\t\t\tthrow this.error(`Schema ${schema.name} has already been declared`);\r\n\r\n\t\tthis.schemaMap.set(schema.name, schema);\r\n\t\treturn schema;\r\n\t}\r\n\r\n\tpublic getSchema(name: string): Variable | Fun {\r\n\t\tif (!this.hasSchema(name))\r\n\t\t\tthrow this.error(`Schema ${name} is not defined`);\r\n\r\n\t\treturn this.schemaMap.has(name)\r\n\t\t\t? this.schemaMap.get(name)\r\n\t\t\t: this.defMap.has(name)\r\n\t\t\t\t? this.defMap.get(name)\r\n\t\t\t\t: (!!this.parent && this.parent.getSchema(name))\r\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\t\treturn s.hasSchema(name)\r\n\t\t\t\t\t})[0].getSchema(name);\r\n\t}\r\n\r\n\tpublic hasOwn$(name: string): boolean {\r\n\t\treturn this.$Map.has(name)\r\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwn$(name));\r\n\t}\r\n\r\n\tpublic has$(name: string): boolean {\r\n\t\treturn this.hasOwn$(name)\r\n\t\t\t|| (!!this.parent && this.parent.has$(name));\r\n\t}\r\n\r\n\tpublic add$($: $Variable): $Variable {\r\n\t\tif (!($ instanceof $Variable))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwn$($.name))\r\n\t\t\tthrow this.error(`$ variable ${$.name} has already been declared`);\r\n\r\n\t\tthis.$Map.set($.name, $);\r\n\t\treturn $;\r\n\t}\r\n\r\n\tpublic get$(name: string): $Variable {\r\n\t\tif (!this.has$(name))\r\n\t\t\tthrow this.error(`$ variable ${name} is not defined`);\r\n\r\n\t\treturn this.$Map.has(name)\r\n\t\t\t? this.$Map.get(name)\r\n\t\t\t: (!!this.parent && this.parent.get$(name))\r\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\treturn s.has$(name)\r\n\t\t\t\t})[0].get$(name);\r\n\t}\r\n}","export default class StackTrace {\r\n\tpublic readonly stack: any[];\r\n\r\n\tconstructor (stack?: any[]) {\r\n\t\tthis.stack = stack || [];\r\n\t}\r\n\r\n\tpublic extend(type, name, location): StackTrace {\r\n\t\treturn new StackTrace([[type, name, location]].concat(this.stack));\r\n\t}\r\n\r\n\tpublic error(message: string) {\r\n\t\tvar filename = typeof process != 'undefined' && process.argv[2];\r\n\r\n\t\treturn new Error(\r\n\t\t\tmessage\r\n\t\t\t+ '\\n\\tat '\r\n\t\t\t+ (\r\n\t\t\t\tthis.stack.length\r\n\t\t\t\t\t? this.stack.map(([type, name, location]) => {\r\n\t\t\t\t\t\treturn `${type} ${name || '<anonymous>'} (${filename || '<unknown>'}:${location.start.line}:${location.start.column})`;\r\n\t\t\t\t\t}).join('\\n\\tat ')\r\n\t\t\t\t\t: `<root> (${filename || '<unknown>'}:1:1)`\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*\r\n * PEG.js의 출력과 적절한 클래스 사이를 잇는 인터페이스.\r\n * PEG.js의 출력은 여기에서만 처리해야 한다.\r\n */\r\n\r\nimport ObjectType from './nodes/ObjectType';\r\nimport Variable from './nodes/Variable';\r\nimport Tee from './nodes/Tee';\r\nimport Fun from './nodes/Fun';\r\nimport Funcall from './nodes/Funcall';\r\nimport Reduction from './nodes/Reduction';\r\nimport { Def$Object, DefschemaObject, DefunObject, DefvObject, Expr0Object, FuncallObject, FunexprObject, MetaexprObject, ReductionObject, SchemacallObject, SchemaexprObject, StypeObject, TeeObject, TypedefObject, TypeObject, VarObject } from './PegInterfaceDefinitions';\r\nimport Scope, { NestedTypeInput } from './Scope';\r\nimport $Variable from './nodes/$Variable';\r\nimport Metaexpr from './nodes/Metaexpr';\r\nimport Expr0 from './nodes/Expr0';\r\n\r\nfunction typeObjToString(obj: TypeObject): string {\r\n\tif (obj._type != 'type')\r\n\t\tthrow Error('Assertion failed');\r\n\r\n\tif (!obj.ftype) return (obj as StypeObject).name;\r\n\treturn '[' + obj.from.map(typeObjToString).join(', ') + ' -> '\r\n\t\t\t+ typeObjToString(obj.to) + ']';\r\n}\r\n\r\n/*\r\n * Scope#getType이나 Scope#hasType 등의 입력 형태로 바꾼다.\r\n * st\t\t\t\t\t\t-> 'st'\r\n * [cls -> st]\t\t\t\t-> ['cls', 'st']\r\n * [(cls, cls) -> st]\t\t-> ['cls', 'cls', 'st']\r\n * [[cls -> st] -> st]\t\t-> [['cls', 'st'], 'st']\r\n */\r\nfunction typeObjToNestedArr(obj: TypeObject): NestedTypeInput {\r\n\tif (obj._type != 'type')\r\n\t\tthrow Error('Assertion failed');\r\n\r\n\tif (!obj.ftype) {\r\n\t\tobj = obj as StypeObject;\r\n\r\n\t\tif (!obj.name)\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\treturn obj.name;\r\n\t} else {\r\n\t\tif (!obj.from || !obj.to)\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\treturn obj.from.map(typeObjToNestedArr).concat(\r\n\t\t\t[typeObjToNestedArr(obj.to)]\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction varObjToString(obj: VarObject): string {\r\n\tswitch (obj.type) {\r\n\t\tcase '@':\r\n\t\t\treturn `@${obj.name}`;\r\n\t\tcase '$':\r\n\t\t\treturn `${obj.name}`;\r\n\t\tcase 'normal':\r\n\t\t\treturn `${obj.name}`;\r\n\t\tdefault:\r\n\t\t\tthrow Error(`Unknown type ${obj.type}`);\r\n\t}\r\n}\r\n\r\nexport default class PI {\r\n\tpublic static type(obj: TypedefObject, parentScope: Scope): ObjectType {\r\n\t\tif (obj._type != 'typedef')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope: Scope = parentScope.extend('type', obj.name, obj.location);\r\n\r\n\t\tvar origin: ObjectType = obj.origin ? scope.getType(typeObjToNestedArr(obj.origin)) : null;\r\n\r\n\t\tvar name: string = obj.name;\r\n\t\tvar doc: string = obj.doc;\r\n\t\tvar base: boolean = obj.base;\r\n\r\n\t\tif (base && origin) {\r\n\t\t\tthrow scope.error('Base type should not be an alias');\r\n\t\t}\r\n\r\n\t\tif (origin) {\r\n\t\t\treturn new ObjectType({\r\n\t\t\t\tname,\r\n\t\t\t\tdoc,\r\n\t\t\t\tbase,\r\n\t\t\t\torigin\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn new ObjectType({\r\n\t\t\tfunctional: false,\r\n\t\t\tname,\r\n\t\t\tdoc,\r\n\t\t\tbase\r\n\t\t});\r\n\t}\r\n\r\n\tpublic static variable(obj: DefvObject | VarObject, parentScope: Scope): Variable | Fun {\r\n\t\tif (!['defv', 'var'].includes(obj._type)) {\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('variable', obj.name, obj.location);\r\n\r\n\t\tif (obj._type == 'var') {\r\n\t\t\tif (obj.type != 'normal') {\r\n\t\t\t\tthrow scope.error(`Variable type ${obj.type} not allowed`);\r\n\t\t\t}\r\n\r\n\t\t\tif (!scope.hasVariable(obj.name))\r\n\t\t\t\tthrow scope.error(`Undefined identifier ${obj.name}`);\r\n\t\t\treturn scope.getVariable(obj.name);\r\n\t\t}\r\n\r\n\t\tif (!scope.hasType(typeObjToNestedArr(obj.type)))\r\n\t\t\tthrow scope.error(`Type ${typeObjToString(obj.type)} is not defined`);\r\n\r\n\t\tvar type = scope.getType(typeObjToNestedArr(obj.type));\r\n\r\n\t\treturn new Variable({\r\n\t\t\ttype,\r\n\t\t\tisParam: !!obj.isParam,\r\n\t\t\tguess: obj.guess || null,\r\n\t\t\tname: obj.name,\r\n\t\t\tdoc: obj.doc,\r\n\t\t\ttex: obj.tex\r\n\t\t}, scope);\r\n\t}\r\n\r\n\tpublic static fun(obj: DefunObject | FunexprObject, parentScope: Scope): Fun {\r\n\t\tif (obj._type != 'defun' && obj._type != 'funexpr')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar name = null,\r\n\t\t\tdoc = null,\r\n\t\t\ttex = null;\r\n\r\n\t\tif (obj._type == 'defun') {\r\n\t\t\tobj = obj as DefunObject;\r\n\t\t\tname = obj.name;\r\n\t\t\tdoc = obj.doc;\r\n\t\t\ttex = obj.tex;\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('fun', name, obj.location);\r\n\r\n\t\tvar type = null;\r\n\t\tvar params = obj.params.map(tvo => {\r\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\r\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\r\n\r\n\t\t\tvar tv = PI.variable(tvo, scope);\r\n\r\n\t\t\tif (scope.hasOwnVariable(tv.name))\r\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\r\n\r\n\t\t\treturn scope.addVariable(tv) as Variable;\r\n\t\t});\r\n\t\tvar expr = null;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'defun':\r\n\t\t\t\tif (!scope.hasType(typeObjToNestedArr(obj.rettype)))\r\n\t\t\t\t\tthrow scope.error(`Type ${typeObjToString(obj.rettype)} is not defined`);\r\n\r\n\t\t\t\tvar rettype = scope.getType(typeObjToNestedArr(obj.rettype));\r\n\r\n\t\t\t\tif (obj.expr) {\r\n\t\t\t\t\texpr = PI.expr0(obj.expr, scope);\r\n\t\t\t\t\tif (!rettype.equals(expr.type))\r\n\t\t\t\t\t\tthrow scope.error(`Expression type ${expr.type} failed to match the return type ${rettype} of fun ${name}`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttype = new ObjectType({\r\n\t\t\t\t\t\tfunctional: true,\r\n\t\t\t\t\t\tfrom: params.map(variable => variable.type),\r\n\t\t\t\t\t\tto: rettype\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'funexpr':\r\n\t\t\t\texpr = PI.expr0(obj.expr, scope);\r\n\t\t\t\ttype = null;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\r\n\t\treturn new Fun({isSchema: false, annotations: [], name, type, params, expr, doc, tex}, scope);\r\n\t}\r\n\r\n\tpublic static funcall(obj: FuncallObject, parentScope: Scope): Funcall {\r\n\t\tif (obj._type != 'funcall')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('funcall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\r\n\r\n\t\tvar fun = PI.expr0(obj.schema, scope);\r\n\r\n\t\tvar args = obj.args.map(arg => {\r\n\t\t\treturn PI.expr0(arg, scope);\r\n\t\t});\r\n\r\n\t\treturn new Funcall({fun, args}, scope);\r\n\t}\r\n\r\n\tpublic static metaexpr(obj: MetaexprObject, parentScope: Scope): Metaexpr {\r\n\t\tif (!['tee', 'reduction', 'schemacall', 'schemaexpr', 'var'].includes(obj._type))\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'tee':\r\n\t\t\t\treturn PI.tee(obj, scope);\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn PI.reduction(obj, scope);\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\treturn PI.schemacall(obj, scope);\r\n\t\t\tcase 'schemaexpr':\r\n\t\t\t\treturn PI.schema(obj, scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PI.metavar(obj, scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static expr0(obj: Expr0Object, parentScope: Scope): Expr0 {\r\n\t\tif (!['funcall', 'funexpr', 'var'].includes(obj._type)) {\r\n\t\t\tconsole.log(obj);\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'funcall':\r\n\t\t\t\treturn PI.funcall(obj, scope);\r\n\t\t\tcase 'funexpr':\r\n\t\t\t\treturn PI.fun(obj, scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PI.variable(obj, scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static metavar(obj: VarObject, parentScope: Scope): Metaexpr {\r\n\t\tif (obj._type != 'var')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj.type) {\r\n\t\t\tcase '@':\r\n\t\t\t\tif (obj.name.match(/^h[0-9]+$/)) {\r\n\t\t\t\t\tvar hypnum = Number(obj.name.slice(1)) - 1;\r\n\t\t\t\t\tif (hypnum >= scope.hypotheses.length) {\r\n\t\t\t\t\t\tthrow scope.error(`Hypothesis #${hypnum + 1} not found`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn scope.hypotheses[hypnum];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow scope.error(`Unknown selector query @${obj.name}`);\r\n\t\t\tcase '$':\r\n\t\t\t\tif (!scope.has$(obj.name)) {\r\n\t\t\t\t\tthrow scope.error(`${obj.name} is not defined`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn scope.get$(obj.name);\r\n\t\t\tcase 'normal':\r\n\t\t\t\tif (!scope.hasSchema(obj.name))\r\n\t\t\t\t\tthrow scope.error(`Schema ${obj.name} is not defined`);\r\n\r\n\t\t\t\treturn scope.getSchema(obj.name);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow scope.error(`Unknown type ${obj.type}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static tee(obj: TeeObject, parentScope: Scope): Tee {\r\n\t\tif (obj._type != 'tee')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('tee', null, obj.location);\r\n\r\n\t\tvar left = obj.left.map(o => PI.metaexpr(o, scope));\r\n\r\n\t\tvar scopeRight = scope.extend('tee.right', null, obj.right.location);\r\n\t\tleft.forEach(l => scopeRight.hypotheses.push(l));\r\n\r\n\t\tvar def$s = obj.def$s.map($ => {\r\n\t\t\tvar $v = PI.def$($, scopeRight);\r\n\r\n\t\t\tif (scopeRight.hasOwn$($v.name)) {\r\n\t\t\t\tthrow scopeRight.error(`${$.name} has already been declared`);\r\n\t\t\t}\r\n\r\n\t\t\treturn scopeRight.add$($v);\r\n\t\t});\r\n\r\n\t\tvar right = PI.metaexpr(obj.right, scopeRight);\r\n\r\n\t\treturn new Tee({left, def$s, right}, scope);\r\n\t}\r\n\r\n\tpublic static def$(obj: Def$Object, parentScope: Scope): $Variable {\r\n\t\tif (obj._type != 'def$')\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t\r\n\t\tvar scope = parentScope.extend('def$', obj.name, obj.location);\r\n\t\t\r\n\t\tvar expr = PI.metaexpr(obj.expr, scope);\r\n\r\n\t\treturn new $Variable({name: obj.name, expr}, scope);\r\n\t}\r\n\r\n\tpublic static schema(obj: DefschemaObject | SchemaexprObject, parentScope: Scope): Fun {\r\n\t\tif (obj._type != 'defschema' && obj._type != 'schemaexpr')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar name: string = null,\r\n\t\t\taxiomatic: boolean = false,\r\n\t\t\tdoc: string = null,\r\n\t\t\tannotations: string[] = [];\r\n\r\n\t\tif (obj._type == 'defschema') {\r\n\t\t\tname = obj.name; axiomatic = obj.axiomatic;\r\n\t\t\tdoc = obj.doc; annotations = obj.annotations;\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('schema', name, obj.location);\r\n\r\n\t\tvar params = obj.params.map(tvo => {\r\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\r\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\r\n\r\n\t\t\tvar tv = PI.variable(tvo, scope);\r\n\r\n\t\t\tif (scope.hasOwnVariable(tv.name))\r\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\r\n\t\t\t\r\n\t\t\treturn scope.addVariable(tv) as Variable;\r\n\t\t});\r\n\r\n\t\tvar def$s = obj.def$s.map($ => {\r\n\t\t\tvar $v = PI.def$($, scope);\r\n\r\n\t\t\tif (scope.hasOwn$($v.name)) {\r\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\r\n\t\t\t}\r\n\r\n\t\t\treturn scope.add$($v);\r\n\t\t});\r\n\r\n\t\tvar expr = PI.metaexpr(obj.expr, scope);\r\n\r\n\t\treturn new Fun({isSchema: true, doc, annotations, axiomatic, name, params, def$s, expr}, scope);\r\n\t}\r\n\r\n\tpublic static schemacall(obj: SchemacallObject, parentScope: Scope): Funcall {\r\n\t\tif (obj._type != 'schemacall')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('schemacall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\r\n\r\n\t\tvar fun = PI.metaexpr(obj.schema, scope);\r\n\r\n\t\tvar args = obj.args.map(obj => {\r\n\t\t\treturn PI.expr0(obj, scope);\r\n\t\t});\r\n\r\n\t\treturn new Funcall({\r\n\t\t\tfun,\r\n\t\t\targs\r\n\t\t}, scope);\r\n\t}\r\n\r\n\tpublic static reduction(obj: ReductionObject, parentScope: Scope): Reduction {\r\n\t\tif (obj._type != 'reduction')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('reduction', 'name' in obj.subject ? obj.subject.name : null, obj.location);\r\n\r\n\t\tvar subject = PI.metaexpr(obj.subject, scope);\r\n\r\n\t\tvar guesses = !obj.guesses\r\n\t\t\t? null\r\n\t\t\t: obj.guesses.map(g => {\r\n\t\t\t\treturn g && PI.expr0(g, scope);\r\n\t\t\t});\r\n\r\n\t\tvar leftargs = obj.leftargs.map(obj => {\r\n\t\t\treturn PI.metaexpr(obj, scope);\r\n\t\t});\r\n\r\n\t\tvar expected = obj.expected && PI.metaexpr(obj.expected, scope);\r\n\r\n\t\treturn new Reduction({\r\n\t\t\tsubject,\r\n\t\t\tguesses,\r\n\t\t\tleftargs,\r\n\t\t\texpected\r\n\t\t}, scope);\r\n\t}\r\n}","import ExpressionResolver from \"./ExpressionResolver\";\r\nimport $Variable from \"./nodes/$Variable\";\r\nimport Fun from \"./nodes/Fun\";\r\nimport Funcall from \"./nodes/Funcall\";\r\nimport Metaexpr from \"./nodes/Metaexpr\";\r\nimport { isNameable } from \"./nodes/Nameable\";\r\nimport Reduction from \"./nodes/Reduction\";\r\nimport Tee from \"./nodes/Tee\";\r\nimport Variable from \"./nodes/Variable\";\r\nimport Scope from \"./Scope\";\r\n\r\nexport default class ProofExplorer {\r\n    public static get(scope: Scope, name: string, ktx) {\t\r\n\t\tvar DIAMOND = '&#x25C7;',\r\n\t\t\tDOWN = '&#x25BC;',\r\n\t\t\tUP = '&#x25B2;';\r\n\t\t\r\n\t\tif (!scope.hasSchema(name)) {\r\n\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t\r\n\t\tvar theexpr = scope.getSchema(name);\r\n\t\r\n\t\tvar ncols = (function recurse(expr: Metaexpr) {\r\n\t\t\tif (expr instanceof Reduction) {\r\n\t\t\t\treturn Math.max(\r\n\t\t\t\t\t...expr.leftargs.map(recurse),\r\n\t\t\t\t\t((expr.subject instanceof Fun && expr.subject.name)\r\n\t\t\t\t\t\t|| (expr.subject instanceof Funcall\r\n\t\t\t\t\t\t\t\t&& isNameable(expr.subject.fun)\r\n\t\t\t\t\t\t\t\t&& expr.subject.fun.name)\r\n\t\t\t\t\t\t\t? 0 : recurse(expr.subject)),\r\n\t\t\t\t\t1\r\n\t\t\t\t);\r\n\t\t\t} else if (expr instanceof Fun) {\r\n\t\t\t\treturn Math.max(\r\n\t\t\t\t\t...expr.def$s.map($ => recurse($.expr)),\r\n\t\t\t\t\trecurse(expr.expr)\r\n\t\t\t\t) + 1;\r\n\t\t\t} else if (expr instanceof Tee) {\r\n\t\t\t\treturn Math.max(\r\n\t\t\t\t\t...expr.left.map(recurse),\r\n\t\t\t\t\t...expr.def$s.map($ => recurse($.expr)),\r\n\t\t\t\t\trecurse(expr.right)\r\n\t\t\t\t) + 1;\r\n\t\t\t} else {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t})(theexpr);\r\n\r\n\t\tfunction getHtmlLine(ctr: string | number, left: any[], h1: string, h2: string | string[], options?) {\r\n\t\t\tvar padding = left.length;\r\n\r\n\t\t\tvar {bbb=false, rrb=false} = options || {};\r\n\t\r\n\t\t\tvar htmlLeft = left.map((e, i, a) => `<td class=\"${rrb && i == a.length - 1 ? 'rrb' : 'brb'}\">${e.map(f => ktx(f.toTeXStringWithId(true))).join(', ')}</td>`).join('');\r\n\r\n\t\t\tfor (var i = 0; i < left.length; i++)\r\n\t\t\t\twhile(left[i].length) left[i].pop();\r\n\t\r\n\t\t\treturn `<tr><th>${ctr}</th>${htmlLeft}<td ${bbb ? 'class=\"bbb\" ' : ''}colspan=\"${ncols-padding}\">${h1}</td>${h2 instanceof Array ? h2.map(e => `<td>${e}</td>`).join('') : `<td colspan=\"2\">${h2}</td>`}</tr>`;\r\n\t\t}\r\n\r\n\t\tfunction exprToHtml(expr, expand?) {\r\n\t\t\tif (typeof expr == 'number') return `<b>${expr}</b>`;\r\n\t\t\tif (expr instanceof Array) return `<b>${expr[0]}&ndash;${expr[1]}</b>`;\r\n\t\t\tif (expand) return ktx(ExpressionResolver.expandMetaAndFuncalls(expr).toTeXString(true));\r\n\t\t\t\r\n\t\t\treturn ktx(expr.toTeXString(true));\r\n\t\t}\r\n\r\n\t\tvar ctr = 0;\r\n\r\n\t\tvar tree = (function getTree(\r\n\t\t\t\texpr: Metaexpr,\r\n\t\t\t\thypnumMap: Map<Metaexpr, number>,\r\n\t\t\t\t$Map: Map<Metaexpr, number>) {\r\n\t\t\t\r\n\t\t\tif (hypnumMap.has(expr)) {\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'R',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\tnum: hypnumMap.get(expr),\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t}\r\n\r\n\t\t\tif ($Map.has(expr)) {\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'R',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\tnum: $Map.get(expr),\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t}\r\n\r\n\t\t\tif (expr instanceof Reduction) {\r\n\t\t\t\tvar leftarglines = [];\r\n\t\t\t\tvar leftargnums = expr.leftargs.map(l => {\r\n\t\t\t\t\tif (hypnumMap.has(l)) return hypnumMap.get(l);\r\n\t\t\t\t\tif ($Map.has(l)) return $Map.get(l);\r\n\r\n\t\t\t\t\tvar lines = getTree(l, hypnumMap, $Map);\r\n\t\t\t\t\tleftarglines = leftarglines.concat(lines);\r\n\t\t\t\t\treturn lines[lines.length - 1].ctr;\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar args = null;\r\n\t\t\t\tvar subjectlines = [];\r\n\t\t\t\tvar subjectnum = hypnumMap.get(expr.subject)\r\n\t\t\t\t\t|| $Map.get(expr.subject)\r\n\t\t\t\t\t|| (expr.subject instanceof Funcall && $Map.has(expr.subject.fun)\r\n\t\t\t\t\t\t? (args = expr.subject.args, $Map.get(expr.subject.fun))\r\n\t\t\t\t\t\t: false)\r\n\t\t\t\t\t|| ((s => s instanceof Fun && s.name\r\n\t\t\t\t\t\t\t|| s instanceof Funcall && isNameable(s.fun) && s.fun.name)(expr.subject)\r\n\t\t\t\t\t\t? expr.subject\r\n\t\t\t\t\t\t: (subjectlines = getTree(expr.subject, hypnumMap, $Map))[subjectlines.length-1].ctr);\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\t...leftarglines,\r\n\t\t\t\t\t...subjectlines,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_type: 'E',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tsubject: subjectnum,\r\n\t\t\t\t\t\targs,\r\n\t\t\t\t\t\tleftargs: leftargnums,\r\n\t\t\t\t\t\treduced: expr.reduced\r\n\t\t\t\t\t}\r\n\t\t\t\t];\r\n\t\t\t} else if (expr instanceof Funcall) {\r\n\t\t\t\tif (hypnumMap.has(expr.fun)) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RC',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tschema: hypnumMap.get(expr.fun),\r\n\t\t\t\t\t\targs: expr.args,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($Map.has(expr.fun)) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RC',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tschema: $Map.get(expr.fun),\r\n\t\t\t\t\t\targs: expr.args,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tif (expr.fun.isSchema && expr.fun.name) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RCX',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tif (!expr.fun.isSchema) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'NP',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar schemalines = getTree(expr.fun, hypnumMap, $Map);\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\t...schemalines,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_type: 'RC',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tschema: schemalines[schemalines.length - 1].ctr,\r\n\t\t\t\t\t\targs: expr.args,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}\r\n\t\t\t\t];\r\n\t\t\t} else if (expr instanceof Variable) {\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'NP',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t} else if (expr instanceof Fun) {\r\n\t\t\t\tif (expr.isSchema && expr.name && expr != theexpr) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RS',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!expr.expr) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'NP',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$Map = new Map($Map);\r\n\r\n\t\t\t\tvar start = ctr + 1;\r\n\r\n\t\t\t\tvar $lines = [];\r\n\t\t\t\t\r\n\t\t\t\texpr.def$s.forEach($ => {\r\n\t\t\t\t\tvar lines = getTree($.expr, hypnumMap, $Map);\r\n\t\t\t\t\t$lines = $lines.concat(lines);\r\n\r\n\t\t\t\t\tvar $num = lines[lines.length - 1].ctr;\r\n\t\t\t\t\t$Map.set($, $num);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'V',\r\n\t\t\t\t\t$lines,\r\n\t\t\t\t\tlines: getTree(expr.expr, hypnumMap, $Map),\r\n\t\t\t\t\t// getHtmlLine 함수가 이 배열을 조작하기 때문에\r\n\t\t\t\t\t// shallow copy 해야 한다.\r\n\t\t\t\t\tparams: expr.params.slice(),\r\n\t\t\t\t\tctr: [start ,ctr]\r\n\t\t\t\t}];\r\n\t\t\t} else if (expr instanceof Tee) {\r\n\t\t\t\thypnumMap = new Map(hypnumMap);\r\n\t\t\t\tvar leftlines = [];\r\n\r\n\t\t\t\tvar start = ctr + 1;\r\n\r\n\t\t\t\texpr.left.forEach(l => {\r\n\t\t\t\t\thypnumMap.set(l, ++ctr);\r\n\t\t\t\t\tleftlines.push({\r\n\t\t\t\t\t\t_type: 'H',\r\n\t\t\t\t\t\tctr,\r\n\t\t\t\t\t\texpr: l\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\t\t\t$Map = new Map($Map);\r\n\r\n\t\t\t\tvar $lines = [];\r\n\t\t\t\texpr.def$s.forEach($ => {\r\n\t\t\t\t\tvar lines = getTree($.expr, hypnumMap, $Map);\r\n\t\t\t\t\t$lines = $lines.concat(lines);\r\n\r\n\t\t\t\t\tvar $num = lines[lines.length - 1].ctr;\r\n\t\t\t\t\t$Map.set($, $num);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'T',\r\n\t\t\t\t\tleftlines,\r\n\t\t\t\t\t$lines,\r\n\t\t\t\t\trightlines: getTree(expr.right, hypnumMap, $Map),\r\n\t\t\t\t\tctr: [start, ctr]\r\n\t\t\t\t}];\r\n\t\t\t} else if (expr instanceof $Variable) {\r\n\t\t\t\tif (!$Map.has(expr)) {\r\n\t\t\t\t\tthrow Error(`${expr.name} is not defined`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'R',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\tnum: $Map.get(expr),\r\n\t\t\t\t\texpr: expr.expr\r\n\t\t\t\t}];\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('Unknown metaexpr', expr);\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: '?',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t}\r\n\t\t})(theexpr, new Map(), new Map());\r\n\r\n\t\tvar html = '<table class=\"explorer\">';\r\n\t\thtml += `<tr><th>#</th><th colspan=\"${ncols}\">expr</th><th colspan=\"2\">rule</th></tr>`;\r\n\t\t\r\n\t\thtml += (function tree2html(lines, left) {\r\n\t\t\treturn lines.map(line => {\r\n\t\t\t\tswitch (line._type) {\r\n\t\t\t\t\tcase 'V':\r\n\t\t\t\t\t\treturn tree2html(line.$lines, left.concat([line.params]))\r\n\t\t\t\t\t\t\t+ tree2html(line.lines, left.concat([line.params]));\r\n\t\t\t\t\tcase 'T':\r\n\t\t\t\t\t\tvar newleft = left.concat([[]]);\r\n\r\n\t\t\t\t\t\tvar ret = '';\r\n\r\n\t\t\t\t\t\tif (line.leftlines.length == 0) {\r\n\t\t\t\t\t\t\tvar emptyleft = Array(left.length + 1).fill([]);\r\n\r\n\t\t\t\t\t\t\tret += getHtmlLine(\r\n\t\t\t\t\t\t\t\t'', emptyleft, '', '', {bbb: true, rrb: true}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tret += line.leftlines.map((line, i, a) => {\r\n\t\t\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\t\t\tnewleft,\r\n\t\t\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t\t\t'assumption',\r\n\t\t\t\t\t\t\t\t\t{bbb: i == a.length - 1, rrb: true}\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}).join('');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tret += tree2html(\r\n\t\t\t\t\t\t\tline.$lines,\r\n\t\t\t\t\t\t\tnewleft\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tret += tree2html(\r\n\t\t\t\t\t\t\tline.rightlines,\r\n\t\t\t\t\t\t\tnewleft\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\treturn ret;\r\n\t\t\t\t\tcase '?':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t'???'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'H':\r\n\t\t\t\t\t\tthrow Error('no');\r\n\t\t\t\t\tcase 'R':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.num)]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'RS':\r\n\t\t\t\t\tcase 'RCX':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.expr)]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'RC':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t[DIAMOND, `${exprToHtml(line.schema)} (${line.args.map(a => exprToHtml(a)).join(', ')})`]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'E':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.reduced, true),\r\n\t\t\t\t\t\t\t[DOWN, `${exprToHtml(line.subject)}${line.args ? ' (' + line.args.map(a => exprToHtml(a)).join(', ') + ')' : ''} [${line.leftargs.map(a => exprToHtml(a)).join(', ')}]`]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'NP':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t'<b class=\"red\">not proved</b>'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\t`Unknown type ${line._type}`,\r\n\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}).join('');\r\n\t\t})(tree[0].$lines.concat(tree[0].lines), []);\r\n\t\t\r\n\t\thtml += '</table>';\r\n\t\r\n\t\treturn html;\r\n\t}\r\n}"],"sourceRoot":""}