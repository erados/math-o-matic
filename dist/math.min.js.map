{"version":3,"sources":["webpack://math/webpack/universalModuleDefinition","webpack://math/webpack/bootstrap","webpack://math/./src/nodes/Node.ts","webpack://math/./src/nodes/Fun.ts","webpack://math/./src/nodes/ObjectType.ts","webpack://math/./src/nodes/Variable.ts","webpack://math/./src/nodes/$Variable.ts","webpack://math/./src/ExpressionResolver.ts","webpack://math/./src/nodes/Metaexpr.ts","webpack://math/./src/nodes/Tee.ts","webpack://math/./src/nodes/Funcall.ts","webpack://math/./src/nodes/Schema.ts","webpack://math/./src/nodes/ObjectFun.ts","webpack://math/./src/nodes/Expr0.ts","webpack://math/./src/nodes/MetaType.ts","webpack://math/./src/nodes/Reduction.ts","webpack://math/./src/nodes/Type.ts","webpack://math/./src/nodes/Nameable.ts","webpack://math/./src/entry.js","webpack://math/./src/grammar.pegjs","webpack://math/./src/Program.ts","webpack://math/./src/Scope.ts","webpack://math/./src/StackTrace.ts","webpack://math/./node_modules/process/browser.js","webpack://math/./src/PegInterface.ts","webpack://math/./src/ProofExplorer.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","ctr","Node","scope","doc","tex","_id","toIndentedString","message","error","Error","replace","precedence","code","match","g1","hyps","length","prec","Array","console","log","my","normalizePrecedence","your","id","args","ret","shouldConsolidate","_match","PREC_FUNEXPR","PREC_COMMA","PREC_COLONEQQ","Fun","annotations","type","params","expr","map","e","some","parsed","parseTeX","super","functional","from","variable","to","isProved","Map","set","substitute","ObjectType","origin","isFunctional","isBaseType","base","f","resolved","resolve","toSimpleString","join","indent","isSimple","toTeXString","equals","Variable","isParam","guess","escapeTeX","$Variable","ExpressionResolver","left","expandMeta","right","fun","reduced","axiomatic","def$s","expandMetaAndFuncalls","a","b","recurseWrap","recurse","depth","expandOnce","aHasFunExpr","bHasFunExpr","every","_","placeholders","len","push","nequalscall","nequalstrue","nrecursecall","nrecursetrue","Metaexpr","obj","Tee","$","concat","repeat","expanded","Funcall","isNameable","resolvedType","paramTypes","argTypes","arg","callee","funcallToTeXString","Schema","_isProvedCache","cache","has","toTeXStringWithId","ObjectFun","makeTeX","Expr0","MetaType","Reduction","subject","guesses","leftargs","expected","forEach","derefs","tee","query","leftargTypes","lef","node","ptr","test","Type","grammar","default","Program","parser","scopeMap","filename","loader","loadModuleInternal","parse","feed","lines","line","_type","scope2","importMap","hasType","addType","hasVariable","addVariable","addFun","schema","hasSchema","addSchema","reduction","schemacall","metavar","ktx","Scope","parent","trace","typedefMap","defMap","schemaMap","$Map","hypotheses","baseType","location","child","extend","h","values","hasOwnType","broadcast","getType","filter","slice","hasOwnVariable","getVariable","hasOwnSchema","getSchema","hasOwn$","has$","get$","StackTrace","stack","process","argv","start","column","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","runClearTimeout","marker","Item","array","noop","nextTick","arguments","apply","title","browser","env","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","typeObjToString","ftype","typeObjToNestedArr","PI","parentScope","includes","tvo","tv","rettype","expr0","funcall","hypnum","Number","metaexpr","scopeRight","$v","def$","add$","g","ProofExplorer","DIAMOND","theexpr","ncols","Math","max","getHtmlLine","h1","h2","options","padding","bbb","rrb","htmlLeft","pop","exprToHtml","expand","tree","getTree","hypnumMap","num","leftarglines","leftargnums","subjectlines","subjectnum","schemalines","$lines","$num","leftlines","rightlines","html","tree2html","newleft","fill"],"mappings":"CAAA,SAAUA,iCAAiCC,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAc,KAAID,IAElBD,EAAW,KAAIC,IARjB,CASmB,oBAATK,KAAuBA,KAAOC,MAAM,WAC9C,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,oBAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUR,QAGnC,IAAIC,EAASK,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHV,QAAS,IAUV,OANAW,EAAQH,GAAUI,KAAKX,EAAOD,QAASC,EAAQA,EAAOD,QAASO,qBAG/DN,EAAOS,GAAI,EAGJT,EAAOD,QA0Df,OArDAO,oBAAoBM,EAAIF,EAGxBJ,oBAAoBO,EAAIR,EAGxBC,oBAAoBQ,EAAI,SAASf,EAASgB,EAAMC,GAC3CV,oBAAoBW,EAAElB,EAASgB,IAClCG,OAAOC,eAAepB,EAASgB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,oBAAoBgB,EAAI,SAASvB,GACX,oBAAXwB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAepB,EAASwB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAepB,EAAS,aAAc,CAAE0B,OAAO,KAQvDnB,oBAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,oBAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,oBAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,oBAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,oBAAoB2B,EAAI,SAASjC,GAChC,IAAIgB,EAAShB,GAAUA,EAAO4B,WAC7B,SAASM,aAAe,OAAOlC,EAAgB,SAC/C,SAASmC,mBAAqB,OAAOnC,GAEtC,OADAM,oBAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,oBAAoBW,EAAI,SAASmB,EAAQC,GAAY,OAAOnB,OAAOoB,UAAUC,eAAe5B,KAAKyB,EAAQC,IAGzG/B,oBAAoBkC,EAAI,GAIjBlC,oBAAoBA,oBAAoBmC,EAAI,I,gFChFrD,IAAIC,EAAM,EAIV,MAA8BC,KAW7B,YAAaC,EAAcC,EAAaC,GACvC1C,KAAK2C,MAAQL,EACbtC,KAAKyC,IAAMA,EACXzC,KAAK0C,IAAMA,EAGL,WACN,OAAO1C,KAAK4C,iBAAiB,GAMvB,aAAaC,EAAiBL,GACpC,OAAIA,EACIA,EAAMM,MAAMD,GAEZ,IAAIE,MAAMF,GAIZ,iBAAiBR,GACvB,OAAOA,EAAEW,QAAQ,2BAA2BxC,IAAK,CAChD,IAAK,MAAO,IAAK,MAAO,EAAK,MAC7B,IAAK,MAAO,EAAK,MAAO,IAAK,MAC7B,IAAK,MACL,IAAK,mBACL,IAAK,oBACL,KAAM,mBACJA,MAGG,gBAAgBkC,GACtB,IAAIO,GAAyB,EAEzBC,EAAOR,EAAIM,QAAQ,qBAAqB,CAACG,EAAOC,KACnDH,EAAkB,EAALG,EACN,MAGR,MAAO,CAACH,aAAYC,QAGd,SAASG,GACfA,EAAOA,GAAQ,GAEf,IAAK,IAAIjD,EAAI,EAAGA,EAAIiD,EAAKC,OAAQlD,IAChC,GAAIiD,EAAKjD,IAAMJ,KAAM,OAAO,EAG7B,OAAO,EAOD,2BAA2BuD,GACjC,IAAa,IAATA,EAAgB,MAAO,CAAC,EAAG,GAC/B,IAAa,IAATA,EAAe,MAAO,CAAC,EAAG,GAC9B,GAAmB,iBAARA,EAAkB,MAAO,CAAC,EAAGA,GAExC,KAAMA,aAAgBC,OAAwB,GAAfD,EAAKD,QAEnC,MADAG,QAAQC,IAAIH,GACNR,MAAM,OAGb,OAAOQ,EAGD,kBAAkBA,GACxB,IAAII,EAAKpB,KAAKqB,oBAAoB5D,KAAKiD,aAAc,GACpDY,EAAOtB,KAAKqB,oBAAoBL,IAAQ,GAEzC,OAAa,GAATI,EAAG,IAAoB,GAATA,EAAG,OAEZA,EAAG,GAAKE,EAAK,IAAMF,EAAG,IAAME,EAAK,IAAMF,EAAG,GAAKE,EAAK,IAGvD,QAAQC,EAAIC,EAAMR,GACxBQ,EAAOA,GAAQ,GACfR,EAAOA,IAAQ,EAEf,IAAIS,EAAMhE,KAAK0C,IAMf,OAJI1C,KAAKiE,kBAAkBV,KAC1BS,EAAM,UAAYA,EAAM,YAGlBA,EAAIhB,QAAQ,cAAc,CAACG,EAAOC,IACjCW,EAAU,EAALX,EAAS,IAAM,gCAAgCA,QACzDJ,QAAQ,aAAa,CAACkB,EAAQd,IACzB,WAAWU,MAAOV,QAvG5B,eAOwB,KAAAe,aAAe,IACf,KAAAC,WAAa,IACb,KAAAC,cAAgB,K,8ECfxC,cACA,OACA,OACA,QAEA,OAeA,MAA8BC,YAAY,UAWzC,aAAa,IAAC7B,EAAG,IAAEC,EAAG,YAAE6B,EAAW,KAAEC,EAAI,KAAiB7D,EAAI,OAAE8D,EAAM,KAAEC,GAAwBlC,GAC/F,IAAK7B,IAAS+D,EACb,MAAM,UAAK5B,MAAM,oCAAqCN,GAEvD,GAAIgC,GAAQE,EACX,MAAM,UAAK5B,MAAM,KAAMN,GAExB,IAAKgC,IAASE,EACb,MAAM,UAAK5B,MAAM,2CAA4CN,GAE9D,GAAa,OAAT7B,GAAgC,iBAARA,EAC3B,MAAM,UAAKmC,MAAM,mBAAoBN,GAEtC,KAAMiC,aAAkBjB,QACnBiB,EAAOE,KAAIC,GAAKA,aAAa,YAAUC,MAAKD,IAAMA,IACtD,MAAM,UAAK9B,MAAM,mBAAoBN,GAEtC,GAAa,OAATkC,KAAmBA,aAAgB,WACtC,MAAM,UAAK5B,MAAM,mBAAoBN,GAEtC,IAAIS,GAAa,EAEjB,GAAIP,EAAK,CACR,IAAIoC,EAAS,UAAKC,SAASrC,GAC3BO,EAAa6B,EAAO7B,WACpBP,EAAMoC,EAAO5B,UAEbR,EAAM,KAGPsC,MACCxC,EAAOC,EAAKC,EACZ8B,GAAQ,IAAKE,EAAKF,gBAAgB,UAAa,UAAa,WAAU,CACrES,YAAY,EACZC,KAAMT,EAAOE,KAAIQ,GAAYA,EAASX,OACtCY,GAAIV,EAAKF,QAIXxE,KAAKuE,YAAcA,EACnBvE,KAAKiD,WAAaA,EAClBjD,KAAKW,KAAOA,EACZX,KAAKyE,OAASA,EACdzE,KAAK0E,KAAOA,EAGN,SAASrB,GAGf,OAFAA,EAAOA,GAAQ,GAER2B,MAAMK,SAAShC,IAClBrD,KAAK0E,MAAQ1E,KAAK0E,KAAKW,SAAShC,GAG9B,KAAKU,GACX,IAAK/D,KAAK0E,KACT,MAAM3B,MAAM,yCAGb,GAAI/C,KAAKyE,OAAOnB,QAAUS,EAAKT,OAC9B,MAAMP,MAAM,4BAKb,IAFA,IAAI4B,EAA4B,IAAIW,IAE3BlF,EAAI,EAAGA,EAAIJ,KAAKyE,OAAOnB,OAAQlD,IACvCuE,EAAIY,IAAIvF,KAAKyE,OAAOrE,GAAI2D,EAAK3D,IAG9B,OAAOJ,KAAK0E,KAAKc,WAAWb,IA/E9B,e,8ECnBA,aACA,QAEA,MAAqBc,mBAAmB,UAQvC,YAAa5E,GACZ,GAAIA,EAAE6E,OAAQ,CAKb,GAJAV,MAAM,KAAMnE,EAAE4B,IAAK,KAAM5B,EAAE6E,OAAOC,cAElC3F,KAAK4F,aAAe/E,EAAEgF,KAED,iBAAVhF,EAAEF,KACZ,MAAM,UAAKmC,MAAM,4BAA+B,MAGjD,GAFA9C,KAAKW,KAAOE,EAAEF,OAERE,EAAE6E,kBAAkBD,YACzB,MAAM,UAAK3C,MAAM,oCAAqC,MAEvD9C,KAAK0F,OAAS7E,EAAE6E,WACV,CAKN,GAJAV,MAAM,KAAMnE,EAAE4B,IAAK,KAAM5B,EAAEoE,YAE3BjF,KAAK4F,aAAe/E,EAAEgF,KAEK,kBAAhBhF,EAAEoE,WACZ,MAAM,UAAKnC,MAAM,mCAAsC,MAExD,GAAKjC,EAAEoE,WAIA,CACN,GAAIpE,EAAEqE,KAAKP,KAAImB,GAAKA,aAAaL,aAAYZ,MAAKD,IAAMA,IACvD,MAAM,UAAK9B,MAAM,yDAA0D,MAC5E,KAAMjC,EAAEuE,cAAcK,YACrB,MAAM,UAAK3C,MAAM,gCAAiC,MAEnD9C,KAAKkF,KAAOrE,EAAEqE,KACdlF,KAAKoF,GAAKvE,EAAEuE,OAXM,CAClB,GAAqB,iBAAVvE,EAAEF,KACZ,MAAM,UAAKmC,MAAM,4BAA+B,MACjD9C,KAAKW,KAAOE,EAAEF,OAaV,iBACN,GAAIX,KAAKW,KAAM,OAAOX,KAAKW,KAE3B,IAAIoF,EAAW/F,KAAKgG,UAEpB,MAAO,IAAID,EAASb,KAAKP,KAAIC,GAAKA,EAAEqB,mBAAkBC,KAAK,YAAYH,EAASX,GAAGa,oBAG7E,iBAAiBE,GACvB,OAAInG,KAAKoG,SAAiBpG,KAAKW,KAExB,GAAGX,KAAKW,KAAOX,KAAKW,KAAO,KAAO,MAAMX,KAAKgG,UAAUd,KAAKgB,KAAK,YAAYlG,KAAKgG,UAAUZ,MAG7F,YAAY3F,GAClB,OAAIO,KAAKoG,WAEJ3G,GAAQO,KAAKW,KAFQ,gBAAgBX,KAAKW,iBAAiBX,KAAKW,SAM3DX,KAAKW,KAAO,gBAAgBX,KAAKW,iBAAiBX,KAAKW,UAAY,KAC1E,UAAUX,KAAKgG,UAAUd,KAAKP,KAAIC,GAAKA,EAAEyB,gBAAeH,KAAK,cAC7D,SAASlG,KAAKgG,UAAUZ,GAAGiB,yBAGxB,UACN,OAAOrG,KAAK0F,OAAS1F,KAAK0F,OAAOM,UAAYhG,KAGvC,OAAOsB,GACb,KAAMA,aAAamE,YAAa,OAAO,EAEvC,GAAIzF,KAAK0F,OAAQ,OAAO1F,KAAK0F,OAAOY,OAAOhF,GAC3C,GAAIA,EAAEoE,OAAQ,OAAO1F,KAAKsG,OAAOhF,EAAEoE,QAEnC,GAAI1F,KAAKoG,UAAY9E,EAAE8E,SAAU,OAAO,EAExC,GAAIpG,KAAKoG,SAAU,OAAOpG,OAASsB,EAEnC,GAAItB,KAAKkF,KAAK5B,QAAUhC,EAAE4D,KAAK5B,OAAQ,OAAO,EAE9C,IAAK,IAAIlD,EAAI,EAAGA,EAAIJ,KAAKkF,KAAK5B,OAAQlD,IACrC,IAAKJ,KAAKkF,KAAK9E,GAAGkG,OAAOhF,EAAE4D,KAAK9E,IAAK,OAAO,EAE7C,OAAOJ,KAAKoF,GAAGkB,OAAOhF,EAAE8D,KA3F1B,sB,8ECHA,cAGA,OAYA,MAAqBmB,iBAAiB,UAOrC,aAAa,IAAC9D,EAAG,IAAEC,EAAG,KAAE8B,EAAI,KAAE7D,EAAI,QAAE6F,EAAO,MAAEC,GAA8BjE,GAM1E,GALAwC,MAAMxC,EAAOC,EAAKC,EAAK8B,GAEvBxE,KAAKwG,UAAYA,EACjBxG,KAAKyG,MAAQA,GAAS,KAEH,iBAAR9F,EACV,MAAM,UAAKmC,MAAM,mBAAoBN,GAEtCxC,KAAKW,KAAOA,EAGN,SAAS0C,GAGf,OAFAA,EAAOA,GAAQ,GAER2B,MAAMK,SAAShC,GAGhB,WAAWsB,GACjB,OAAOA,EAAI1D,IAAIjB,OAASA,KAIlB,iBACN,OAAOA,KAAKwE,KAAKyB,iBAAmB,IAAMjG,KAAKW,KAGzC,iBAAiBwF,EAAgB1G,GACvC,MAAO,GAAGA,EAAOO,KAAKwE,KAAO,IAAM,KAAKxE,KAAKW,QAAQX,KAAK2C,OAGpD,YAAYY,EAAmB9D,GAUrC,MAAO,WATEO,KAAKwG,QAAU,MAAMxG,KAAK2C,IAAQ,OAAO3C,KAAKW,SAE7CX,KAAK0C,MAEO,GAApB1C,KAAKW,KAAK2C,OACP,UAAKoD,UAAU1G,KAAKW,MACpB,YAAY,UAAK+F,UAAU1G,KAAKW,aAM/B,kBAAkB4C,EAAmB9D,GAC3C,IAAKO,KAAKwG,QAAS,MAAMzD,MAAM,OAI/B,MAAO,CACN,YAHO,MAAM/C,KAAK2C,QAIlB3C,KAAKqG,YAAY9C,EAAM9D,GACvB,KACCyG,KAAK,KA5DT,oB,8ECdA,aAGA,OASA,MAAqBS,kBAAkB,UAKtC,aAAa,KAAChG,EAAI,KAAE+D,GAA8BlC,GAGjD,GAFAwC,MAAMxC,EAAO,KAAM,KAAMkC,EAAKF,OAEzB7D,IAAS+D,EACb,MAAM,UAAK5B,MAAM,mBAAoBN,GAGtCxC,KAAKW,KAAOA,EACZX,KAAK0E,KAAOA,EAGN,SAASrB,GAGf,OAFAA,EAAOA,GAAQ,GAER2B,MAAMK,SAAShC,IAClBrD,KAAK0E,KAAKW,SAAShC,GAGjB,WAAWsB,GACjB,OAAO3E,KAAK0E,KAAKc,WAAWb,GAGtB,iBAAiBwB,EAAgB1G,GACvC,OAAOO,KAAKW,KAGN,YAAY4C,EAAmB9D,GACrC,MAAO,YAAY,UAAKiH,UAAU1G,KAAKW,UAhCzC,qB,8ECdA,aACA,QACA,QACA,OACA,OACA,OACA,OACA,OACA,OAIA,MAAqBiG,mBAiCb,kBAAkBlC,GACxB,GAAIA,aAAgB,UAAK,CACxB,IAAImC,EAAOnC,EAAKmC,KAAKlC,IAAIiC,mBAAmBE,YACxCC,EAAQH,mBAAmBE,WAAWpC,EAAKqC,OAE/C,OAAO,IAAI,UAAI,CAACF,OAAME,UAChB,GAAIrC,aAAgB,UAAS,CACnC,IAAIsC,EAAMJ,mBAAmBE,WAAWpC,EAAKsC,KAC5CjD,EAAOW,EAAKX,KAEb,OAAMiD,aAAe,WAASA,EAAItC,QAAQsC,EAAIrG,MAAUqG,aAAe,WAGhEJ,mBAAmBE,WAAWE,EAAIzG,KAAKwD,IAFtC,IAAI,UAAQ,CAACiD,MAAKjD,SAGpB,GAAIW,aAAgB,UAC1B,OAAOkC,mBAAmBE,WAAWpC,EAAKuC,SACpC,GAAIvC,aAAgB,UAC1B,OAAKA,EAAKA,KACNA,EAAKF,gBAAgB,WAAcE,EAAK/D,KAAa+D,EAElD,IAAI,UAAU,CACpBH,YAAaG,EAAKH,YAClB5D,KAAM,KACN8D,OAAQC,EAAKD,OACbC,KAAMkC,mBAAmBE,WAAWpC,EAAKA,QAPnBA,EASjB,GAAIA,aAAgB,UAC1B,OAAKA,EAAKA,KACNA,EAAKF,gBAAgB,WAAcE,EAAK/D,KAAa+D,EAElD,IAAI,UAAO,CACjBH,YAAaG,EAAKH,YAClB2C,UAAWxC,EAAKwC,UAChBvG,KAAM,KACN8D,OAAQC,EAAKD,OACb0C,MAAOzC,EAAKyC,MACZzC,KAAMkC,mBAAmBE,WAAWpC,EAAKA,QATnBA,EAWjB,GAAIA,aAAgB,UAC1B,OAAOA,EACD,GAAIA,aAAgB,UAC1B,OAAOkC,mBAAmBE,WAAWpC,EAAKA,MAG1C,MADAjB,QAAQC,IAAIgB,GACN3B,MAAM,oBAKP,6BAA6B2B,GACnC,GAAIA,aAAgB,UAAK,CACxB,IAAImC,EAAOnC,EAAKmC,KAAKlC,IAAIiC,mBAAmBQ,uBACxCL,EAAQH,mBAAmBQ,sBAAsB1C,EAAKqC,OAE1D,OAAO,IAAI,UAAI,CAACF,OAAME,UAChB,GAAIrC,aAAgB,UAC1B,OAAKA,EAAKA,KACNA,EAAKF,gBAAgB,WAAcE,EAAK/D,KAAa+D,EAElD,IAAI,UAAU,CACpBH,YAAaG,EAAKH,YAClB5D,KAAM,KACN8D,OAAQC,EAAKD,OACbC,KAAMkC,mBAAmBQ,sBAAsB1C,EAAKA,QAP9BA,EASjB,GAAIA,aAAgB,UAC1B,OAAKA,EAAKA,KACNA,EAAKF,gBAAgB,WAAcE,EAAK/D,KAAa+D,EAElD,IAAI,UAAO,CACjBH,YAAaG,EAAKH,YAClB2C,UAAWxC,EAAKwC,UAChBvG,KAAM,KACN8D,OAAQC,EAAKD,OACb0C,MAAOzC,EAAKyC,MACZzC,KAAMkC,mBAAmBQ,sBAAsB1C,EAAKA,QAT9BA,EAWjB,GAAIA,aAAgB,UAAS,CACnC,IAAIsC,EAAMJ,mBAAmBQ,sBAAsB1C,EAAKsC,KACpDjD,EAAOW,EAAKX,KAAKY,IAAIiC,mBAAmBQ,uBAE5C,OAAMJ,aAAe,WAASA,EAAItC,QAAQsC,EAAIrG,MAAUqG,aAAe,WAGhEJ,mBAAmBQ,sBAAsBJ,EAAIzG,KAAKwD,IAFjD,IAAI,UAAQ,CAACiD,MAAKjD,SAGpB,GAAIW,aAAgB,UAC1B,OAAOkC,mBAAmBQ,sBAAsB1C,EAAKuC,SAC/C,GAAIvC,aAAgB,UAC1B,OAAOA,EACD,GAAIA,aAAgB,UAC1B,OAAOkC,mBAAmBQ,sBAAsB1C,EAAKA,MAGrD,MADAjB,QAAQC,IAAIgB,GACN3B,MAAM,oBAYP,cAAcsE,EAAaC,GAmIjC,IAAIC,EAlIJ,SAASC,QAAQH,EAAaC,EAAaG,GAC1C,GAAIJ,GAAKC,EAAG,OAAO,EAEnB,IAAKD,EAAE7C,KAAK8B,OAAOgB,EAAE9C,MAAO,OAAO,EAEnC,GAAI6C,aAAa,UAChB,OAAOE,EAAYF,EAAEJ,QAASK,EAAGG,EAAQ,GAG1C,GAAIH,aAAa,UAChB,OAAOC,EAAYF,EAAGC,EAAEL,QAASQ,EAAQ,GAG1C,GAAIJ,aAAa,UAChB,OAAOE,EAAYF,EAAE3C,KAAM4C,EAAGG,EAAQ,GAGvC,GAAIH,aAAa,UAChB,OAAOC,EAAYF,EAAGC,EAAE5C,KAAM+C,EAAQ,GAGvC,GAAIJ,aAAa,WAAWC,aAAa,UAAS,CACjD,GAAID,EAAEL,eAAe,UACpB,OAAOO,EACNF,EAAEK,aAAcJ,EAAGG,EAAQ,GAI7B,GAAIH,EAAEN,eAAe,UACpB,OAAOO,EACNF,EAAGC,EAAEI,aAAcD,EAAQ,GAI7B,IAAIE,EAAeN,EAAEL,eAAe,WAAQK,EAAEL,IAAItC,KACjDkD,EAAeN,EAAEN,eAAe,WAAQM,EAAEN,IAAItC,KAE/C,GAAI2C,EAAEL,KAAOM,EAAEN,MAAQW,IAAgBC,EAAa,CACnD,GAAIP,EAAEL,KAAOM,EAAEN,IAAK,OAAO,EAE3B,IAAKW,IAAgBC,EAAa,CACjC,IAAK,IAAIxH,EAAI,EAAGA,EAAIiH,EAAEtD,KAAKT,OAAQlD,IAClC,IAAKmH,EAAYF,EAAEtD,KAAK3D,GAAIkH,EAAEvD,KAAK3D,GAAIqH,EAAQ,GAAI,OAAO,EAG3D,OAAO,EAGR,GAAIJ,EAAEtD,KAAK8D,OAAM,CAACC,EAAG1H,IACbmH,EAAYF,EAAEtD,KAAK3D,GAAKkH,EAAcvD,KAAK3D,GAAIqH,EAAQ,KAE9D,OAAO,EAIT,OAAIE,EACIJ,EAAYF,EAAEK,aAAcJ,EAAGG,EAAQ,GAGxCF,EAAYF,EAAGC,EAAEI,aAAcD,EAAQ,GAG/C,GAAIJ,aAAa,UAChB,OAAIA,EAAEL,eAAe,cAMfK,EAAEL,eAAe,WAAOK,EAAEL,IAAItC,QAL5B6C,EACNF,EAAEK,aAAcJ,EAAGG,EAAQ,GAW9B,GAAIH,aAAa,UAChB,OAAIA,EAAEN,eAAe,cAMfM,EAAEN,eAAe,WAAOM,EAAEN,IAAItC,QAL5B6C,EACNF,EAAGC,EAAEI,aAAcD,EAAQ,GAW9B,GAAIJ,aAAa,UAAK,CACrB,KAAMC,aAAa,WAClB,MAAMvE,MAAM,oBAGb,IAAS3C,EAAI,EAAGA,EAAIiH,EAAER,KAAKvD,OAAQlD,IAClC,IAAKmH,EAAYF,EAAER,KAAKzG,GAAIkH,EAAET,KAAKzG,GAAIqH,EAAQ,GAAI,OAAO,EAG3D,OAAOF,EAAYF,EAAEN,MAAOO,EAAEP,MAAOU,EAAQ,GAG9C,GAAIJ,EAAE7C,KAAKmB,aAAc,CACxB,IAAIoC,EAAe,GACfC,EAAOX,EAAE7C,KAAKwB,UAAoCd,KAAK5B,OAE3D,IAASlD,EAAI,EAAGA,EAAI4H,EAAK5H,IACxB2H,EAAaE,KAAK,IAAI,UAAS,CAC9BzB,SAAS,EACThC,KAAO6C,EAAE7C,KAAKwB,UAAoCd,KAAK9E,GACvDO,KAAM,IAAMP,KAId,OAAOmH,EACN,IAAI,UAAQ,CACXP,IAAKK,EACLtD,KAAMgE,IAEP,IAAI,UAAQ,CACXf,IAAKM,EACLvD,KAAMgE,IAEPN,EAAQ,GAIV,OAAO,GAiBRb,mBAAmBsB,cACnB,IAAIlE,EAAMuD,EAAYF,EAAGC,EAAG,GAE5B,OADItD,GAAK4C,mBAAmBuB,cACrBnE,GA9RT,6BAkIe,mBAAAkE,YAAc,EACd,mBAAAC,YAAc,EACd,mBAAAC,aAAe,EACf,mBAAAC,aAAe,G,8EC/I9B,aAIA,MAA8BC,iBAAiB,UAG9C,YAAY9F,EAAcC,EAAaC,EAAa8B,GAGnD,GAFAQ,MAAMxC,EAAOC,EAAKC,IAEb8B,EAAM,MAAM,UAAK1B,MAAM,mBAAoBN,GAEhDxC,KAAKwE,KAAOA,EAKN,OAAO+D,GACb,OAAOvI,OAASuI,GAdlB,oB,8ECNA,aACA,QACA,OAEA,OACA,OACA,OAUA,MAAqBC,YAAY,UAMhC,aAAa,KAAC3B,EAAI,MAAEM,EAAK,MAAEJ,GAAyBvE,GACnD,KAAMqE,aAAgBrD,OACjBqD,EAAKgB,OAAMxH,GACNA,EAAEmE,gBAAgB,WACrBnE,EAAEmE,gBAAgB,aAGxB,MADAf,QAAQC,IAAImD,GACN,UAAK/D,MAAM,mBAAoBN,GAGtC,GAAI2E,KAAWA,aAAiB3D,OAAS2D,EAAMU,OAAMY,GAAKA,aAAa,aACtE,MAAM,UAAK3F,MAAM,mBAAoBN,GAEtC,KAAMuE,EAAMvC,gBAAgB,WAAcuC,EAAMvC,gBAAgB,WAE/D,MADAf,QAAQC,IAAIqD,GACN,UAAKjE,MAAM,mBAAoBN,GAGtC,GAAIuE,EAAMvC,KAAKmB,aACd,MAAM,UAAK7C,MAAM,mCAAoCN,GAGtDwC,MAAMxC,EAAO,KAAM,KAAM,IAAI,UAAS,CACrCyC,YAAY,EACZ4B,KAAMA,EAAKlC,KAAIC,GAAKA,EAAEJ,OACtBuC,MAAOA,EAAMvC,QAGdxE,KAAK6G,KAAOA,EACZ7G,KAAKmH,MAAQA,GAAS,GACtBnH,KAAK+G,MAAQA,EACb/G,KAAKiD,WAAa,UAAKmB,WAGjB,SAASf,GAGf,OAFAA,EAAOA,GAAQ,GAER2B,MAAMK,SAAShC,IAASrD,KAAK+G,MAAM1B,SAAShC,EAAKqF,OAAO1I,KAAK6G,OAG9D,WAAWlC,GACjB,IAAIkC,EAAO7G,KAAK6G,KAAKlC,KAAIC,GAAKA,EAAEY,WAAWb,KACvCoC,EAAQ/G,KAAK+G,MAAMvB,WAAWb,GAElC,OAAO,IAAI6D,IAAI,CACd3B,OAAME,UAID,iBAAiBZ,EAAgB1G,GACvC,OAAKO,KAAK6G,KAAKvD,OAIR,CACN,KAAOtD,KAAK6G,KAAKlC,KAAIC,GAAKA,EAAEhC,iBAAiBuD,EAAS,KAAID,KAAK,MAAQ,KAAKyC,OAAOxC,EAAS,IAC5F,KACA,KAAOnG,KAAK+G,MAAMnE,iBAAiBuD,EAAS,IAC3CD,KAAK,KAAO,KAAKyC,OAAOxC,IAPlB,MAAQnG,KAAK+G,MAAMnE,iBAAiBuD,GAUtC,YAAY5C,EAAmB9D,GACrC,IAAImJ,EAAW,UAAmBxB,sBAAsBpH,MAExD,MAAO,CACLA,KAAKiE,kBAAkBV,GAAQ,UAAY,GAC5C,IAAIqF,EAAS/B,KAAKlC,KAAIC,GAAKA,EAAEyB,YAAY,UAAKjC,cAAa8B,KAAK,iBAAiB0C,EAAS7B,MAAMV,YAAY,UAAKjC,eAChHpE,KAAKiE,kBAAkBV,GAAQ,WAAa,IAC5C2C,KAAK,KA1ET,e,8EChBA,aACA,OAEA,OACA,QAEA,QACA,OACA,QAGA,OAOA,MAAqB2C,gBAAgB,UAKpC,aAAa,IAAC7B,EAAG,KAAEjD,GAA4BvB,GAC9C,GAAIwE,EAAIxC,KAAK4B,SAAU,CACtB,IAAIzF,EAAO,EAAAmI,WAAW9B,GAAOA,EAAIrG,KAAO,cACxC,MAAM,UAAKmC,MAASnC,EAAH,mBAA2B6B,GAG7C,KAAMuB,aAAgBP,QAAUO,EAAKY,KAAIC,GAAKA,aAAa,YAAMC,MAAKD,IAAMA,IAC3E,MAAM,UAAK9B,MAAM,mBAAoBN,GAEtC,IAAIuG,EAAe/B,EAAIxC,KAAKwB,UAC3BgD,EAAaD,EAAa7D,KAC1B+D,EAAWlF,EAAKY,KAAIC,GAAKA,EAAEJ,OAE5B,GAAIwE,EAAW1F,QAAU2F,EAAS3F,OACjC,MAAM,UAAKR,MAAM,yCAAyCkG,EAAW1F,YAAY2F,EAAS3F,SAAUd,GAErG,IAAK,IAAIpC,EAAI,EAAGA,EAAI4I,EAAW1F,OAAQlD,IACtC,IAAK4I,EAAW5I,GAAGkG,OAAO2C,EAAS7I,IAClC,MAAM,UAAK0C,MAAM,aAAa1C,EAAI,yCAAyC4I,EAAW5I,QAAQ6I,EAAS7I,KAAMoC,GAI/GwC,MAAMxC,EAAO,KAAM,KAAMuG,EAAa3D,IAEtCpF,KAAKgH,IAAMA,EACXhH,KAAK+D,KAAOA,EAGN,SAASV,GAGf,OAFAA,EAAOA,GAAQ,GAER2B,MAAMK,SAAShC,IAASrD,KAAKgH,IAAI3B,SAAShC,GAG3C,WAAWsB,GACjB,OAAO,IAAIkE,QAAQ,CAClB7B,IAAKhH,KAAKgH,IAAIxB,WAAWb,GACzBZ,KAAM/D,KAAK+D,KAAKY,KAAIuE,GAAOA,EAAI1D,WAAWb,OAIrC,aACN,GAAI3E,KAAKgH,eAAe6B,QACvB,OAAO,IAAIA,QAAQ,CAClB7B,IAAKhH,KAAKgH,IAAIU,aACd3D,KAAM/D,KAAK+D,OAMb,IAFA,IAAIoF,EAAmBnJ,KAAKgH,IAErBmC,aAAkB,WACxBA,EAASA,EAAOzE,KAGjB,KAAMyE,aAAkB,WACvB,MAAMpG,MAAM,qBAGb,IAAKoG,EAAOzE,KACX,MAAM3B,MAAM,oBAGb,OAAOoG,EAAO5I,KAAKP,KAAK+D,MAGlB,iBAAiBoC,EAAgB1G,GACvC,IAAIsE,EAAY/D,KAAK+D,KAAKY,KAAIuE,GACzBA,aAAe,UAAiB,GAAGA,EAAIvI,QAAQuI,EAAIvG,OAChDuG,EAAItG,iBAAiBuD,EAAS,KAGtC,OAAIpC,EAAKmC,KAAK,IAAI5C,QAAU,IAM3BS,GALAA,EAAO/D,KAAK+D,KAAKY,KAAIuE,GAChBA,aAAe,UAAiB,GAAGA,EAAIvI,QAAQuI,EAAIvG,OAChDuG,EAAItG,iBAAiBuD,MAGjBD,KAAK,MAEblG,KAAKgH,eAAe,UAChB,GAAGhH,KAAKgH,IAAIrG,MAAQ,IAAIX,KAAKgH,UAAUjD,KAEvC,CACJ/D,KAAKgH,eAAe,WAAShH,KAAKgH,IAAIrG,KAErCX,KAAKgH,IAAIrG,KADT,IAAMX,KAAKgH,IAAIpE,iBAAiBuD,GAAU,IAE7C,IAAIpC,MACHmC,KAAK,MAGRnC,EAAOA,EAAKmC,KAAK,MAAQ,KAAKyC,OAAOxC,EAAS,IAE1CnG,KAAKgH,eAAe,UAChB,CACNhH,KAAKgH,IAAIrG,MAAQ,IAAIX,KAAKgH,IAAIpE,iBAAiBuD,MAC/C,IACA,KAAOpC,EACP,KACCmC,KAAK,KAAO,KAAKyC,OAAOxC,IAEnB,EAEHnG,KAAKgH,eAAe,WAAU,SAAUhH,KAAKgH,KAAOhH,KAAKgH,IAAIrG,KAE5DX,KAAKgH,IAAIrG,KADT,IAAMX,KAAKgH,IAAIpE,iBAAiBuD,GAAU,KAE1C,IACJ,KAAOpC,EACP,KACCmC,KAAK,KAAO,KAAKyC,OAAOxC,KAKtB,YAAY5C,EAAmB9D,GACrC,GAAIO,KAAKgH,eAAe,UACvB,OACChH,KAAKgH,IAAIrG,KACN,kBAAkBX,KAAKgH,IAAI3B,WAAa,IAAM,QAAQrF,KAAKgH,IAAIrG,kBAAkB,UAAK+F,UAAU1G,KAAKgH,IAAIrG,UACzGX,KAAKgH,IAAIX,aAAY,IACrB,oBAAoBrG,KAAK+D,KAAKY,KAAIuE,GAC9BA,EAAI7C,YAAY,UAAKjC,cAC1B8B,KAAK,iBAGT,GAAIlG,KAAKgH,eAAe,UACvB,OAAOhH,KAAKgH,IAAIoC,mBAAmBpJ,KAAK+D,KAAMR,GAE/C,IAAIQ,EAAO/D,KAAK+D,KAAKY,KAAIuE,GACjBA,EAAI7C,YAAY,UAAKjC,cAG7B,QACG,EAAA0E,WAAW9I,KAAKgH,OAAQhH,KAAKgH,IAAIrG,MAASX,KAAKgH,eAAe,UAC7DhH,KAAKgH,IAAIX,aAAY,GACG,GAAxBrG,KAAKgH,IAAIrG,KAAK2C,OACb,UAAKoD,UAAU1G,KAAKgH,IAAIrG,MACxB,YAAY,UAAK+F,UAAU1G,KAAKgH,IAAIrG,UACrC,oBAAoBoD,EAAKmC,KAAK,kBA/IpC,mB,8EClBA,aAIA,OAEA,OAgBA,MAAqBmD,eAAe,UAMnC,aAAa,IAAC5G,EAAG,IAAEC,EAAG,YAAE6B,EAAW,UAAE2C,EAAS,KAAE1C,EAAI,KAAiB7D,EAAI,OAAE8D,EAAM,MAAE0C,EAAK,KAAEzC,GAA2BlC,GACpHwC,MAAM,CAACvC,MAAKC,MAAK6B,cAAaC,OAAM7D,OAAM8D,SAAQC,QAAOlC,GAEzDxC,KAAKkH,UAAYA,EACjBlH,KAAKmH,MAAQA,GAAS,GAGhB,SAAS9D,GACf,GAAIrD,KAAKsJ,eAAgB,OAAO,EAEhC,IAAKjG,GAAsC,kBAAvBrD,KAAKsJ,eACxB,OAAOtJ,KAAKsJ,eAGb,IAAIC,GAASlG,EACbA,EAAOA,GAAQ,GAEf,IAAIW,EAAMhE,KAAKkH,WAAalC,MAAMK,SAAShC,GAE3C,OADIkG,IAAOvJ,KAAKsJ,eAAiBtF,GAC1BA,EAGD,WAAWW,GACjB,IAAK3E,KAAK0E,KAAM,OAAO1E,KAGvB,GAAIA,KAAKW,KAAM,OAAOX,KAGtB,GAAIA,KAAKyE,OAAOI,MAAKD,GAAKD,EAAI6E,IAAI5E,KACjC,MAAM7B,MAAM,uBAEb,OAAO,IAAIsG,OAAO,CACjB9E,YAAavE,KAAKuE,YAClB2C,UAAWlH,KAAKkH,UAChBvG,KAAM,KACN8D,OAAQzE,KAAKyE,OACb0C,MAAOnH,KAAKmH,MACZzC,KAAM1E,KAAK0E,KAAKc,WAAWb,KAItB,iBAAiBwB,EAAgB1G,GACvC,MAAO,CACN,KAAKO,KAAKW,MAAQ,MAAMX,KAAKyE,OAAOE,KAAIvC,GAAKA,EAAEQ,iBAAiBuD,KAASD,KAAK,cAC9E,KAAOlG,KAAK0E,KAAK9B,iBAAiBuD,EAAS,GAC3C,KACCD,KAAK,KAAO,KAAKyC,OAAOxC,IAGpB,YAAY5C,EAAmB9D,GACrC,IAAKO,KAAKW,KAET,OADAX,KAAKiD,WAAa,UAAKkB,aAChB,CACLnE,KAAKiE,kBAAkBV,GAAQ,UAAY,GAGrB,GAAtBvD,KAAKyE,OAAOnB,OACVtD,KAAKyE,OAAO,GAAG4B,aAAY,GAC3B,UAAUrG,KAAKyE,OAAOE,KAAIC,GAAKA,EAAEyB,YAAY,UAAKjC,cAAa8B,KAAK,gBAEvE,YACA,UAAmBkB,sBAAsBpH,KAAK0E,MAAM2B,aAAY,GAE/DrG,KAAKiE,kBAAkBV,GAAQ,WAAa,IAC5C2C,KAAK,IAGR,IAAIpC,EAAK,UAAU9D,KAAKqF,WAAa,IAAM,QAAQrF,KAAKW,OAExD,OAAKlB,EAGE,WAAWqE,eAAgB,UAAK4C,UAAU1G,KAAKW,2BAA2BX,KAAKyE,OAAOE,KAAIC,GAAKA,EAAE6E,kBAAkB,UAAKrF,aAAeQ,EAAE6B,MAAQ,eAAe7B,EAAE6B,SAAW,MAAKP,KAAK,4BAC1L,UAAmBkB,sBAAsBpH,KAAK0E,MAAM2B,aAAY,GAH5D,WAAWvC,cAAe,UAAK4C,UAAU1G,KAAKW,UA7ExD,kB,8ECtBA,aAIA,OAEA,OAcA,MAAqB+I,kBAAkB,UAEtC,aAAa,IAACjH,EAAG,IAAEC,EAAG,YAAE6B,EAAW,KAAEC,EAAI,KAAiB7D,EAAI,OAAE8D,EAAM,KAAEC,GAA8BlC,GACrGwC,MAAM,CAACvC,MAAKC,MAAK6B,cAAaC,OAAM7D,OAAM8D,SAAQC,QAAOlC,GAGnD,WAAWmC,GACjB,IAAK3E,KAAK0E,KAAM,OAAO1E,KAGvB,GAAIA,KAAKW,KAAM,OAAOX,KAGtB,GAAIA,KAAKyE,OAAOI,MAAKD,GAAKD,EAAI6E,IAAI5E,KACjC,MAAM7B,MAAM,uBAEb,OAAO,IAAI2G,UAAU,CACpBnF,YAAavE,KAAKuE,YAClB5D,KAAM,KACN8D,OAAQzE,KAAKyE,OACbC,KAAM1E,KAAK0E,KAAKc,WAAWb,KAItB,iBAAiBwB,EAAgB1G,GACvC,MAAO,CACN,KAAKO,KAAKW,MAAQ,MAAMX,KAAKyE,OAAOE,KAAIvC,GAAKA,EAAEQ,iBAAiBuD,KAASD,KAAK,cAC9E,KAAOlG,KAAK0E,KAAK9B,iBAAiBuD,EAAS,GAC3C,KACCD,KAAK,KAAO,KAAKyC,OAAOxC,IAGpB,YAAY5C,EAAmB9D,GACrC,OAAKO,KAAKW,KAiBLlB,EAGAO,KAAK0E,KAGH1E,KAAKoJ,mBAAmBpJ,KAAKyE,OAAQ,UAAKJ,eAC7C,cAAcrE,KAAK0E,KAAK2B,YAAY,UAAKhC,eAHrCrE,KAAKoJ,mBAAmBpJ,KAAKyE,OAAQlB,GAHrC,eAAevD,KAAKW,iBAAiB,UAAK+F,UAAU1G,KAAKW,UAjBhEX,KAAKiD,WAAa,UAAKkB,aAChB,CACLnE,KAAKiE,kBAAkBV,GAAQ,UAAY,GAGrB,GAAtBvD,KAAKyE,OAAOnB,OACVtD,KAAKyE,OAAO,GAAG4B,aAAY,GAC3B,UAAUrG,KAAKyE,OAAOE,KAAIC,GAAKA,EAAEyB,YAAY,UAAKjC,cAAa8B,KAAK,gBAEvE,YACA,UAAmBkB,sBAAsBpH,KAAK0E,MAAM2B,aAAY,GAE/DrG,KAAKiE,kBAAkBV,GAAQ,WAAa,IAC5C2C,KAAK,KAaF,mBAAmBnC,EAAMR,GAK/B,OAJAQ,EAAOA,EAAKY,KAAIuE,GACRA,EAAI7C,YAAYrG,KAAK0C,IAAM1C,KAAKiD,WAAa,UAAKmB,cAGtDpE,KAAK0C,IACD1C,KAAK2J,QAAQ,OAAS3J,KAAKW,KAAMoD,EAAMR,IAI7CvD,KAAKW,KAEH,eAAeX,KAAKW,SAA6B,GAApBX,KAAKW,KAAK2C,OAAc,UAAKoD,UAAU1G,KAAKW,MAAQ,YAAY,UAAK+F,UAAU1G,KAAKW,YADjHX,KAAKqG,aAAY,IAEjB,oBAAoBtC,EAAKmC,KAAK,kBAzEpC,qB,8ECpBA,aAEA,MAA8B0D,cAAc,WAA5C,iB,8ECFA,aACA,OACA,QAgBA,MAAqBC,iBAAiB,UAOrC,YAAahJ,GAGZ,GAFAmE,MAAM,KAAM,KAAM,KAAMnE,EAAEoE,YAEC,kBAAhBpE,EAAEoE,WACZ,MAAM,UAAKnC,MAAM,mCAAsC,MAExD,GAAoB,GAAhBjC,EAAEoE,WAAqB,CAC1B,KAAMpE,EAAEgG,gBAAgBrD,OACvB,MAAM,UAAKV,MAAM,0BAA2B,MAE7C9C,KAAK6G,KAAOhG,EAAEgG,KACd7G,KAAK+G,MAAQlG,EAAEkG,UACT,CACN,GAAIlG,EAAEqE,KAAKL,MAAKiB,KAAOA,aAAa,aACnC,MAAM,UAAKhD,MAAM,+CAAgD,MAClE,KAAMjC,EAAEuE,cAAcyE,UACrB,MAAM,UAAK/G,MAAM,8BAA+B,MAEjD,GAAIjC,EAAEuE,GAAGO,aACR,MAAM,UAAK7C,MAAM,8DAA+D,MAEjF9C,KAAKkF,KAAOrE,EAAEqE,KACdlF,KAAKoF,GAAKvE,EAAEuE,IAIP,UACN,OAAOpF,KAGD,iBAAiBmG,GACvB,OAAInG,KAAKoG,SAAiB,IAAIpG,KAAK6G,KAAKX,KAAK,YAAYlG,KAAK+G,SAEvD,IAAI/G,KAAKkF,KAAKgB,KAAK,YAAYlG,KAAKoF,MAGrC,YAAY7B,EAAmB9D,GACrC,MAAM,IAAIsD,MAAM,2BAGV,OAAOzB,GACb,KAAMA,aAAauI,UAAW,OAAO,EAErC,GAAI7J,KAAKoG,UAAY9E,EAAE8E,SAAU,OAAO,EAExC,GAAIpG,KAAKoG,SAAU,CAClB,GAAIpG,KAAK6G,KAAKvD,QAAUhC,EAAEuF,KAAKvD,OAAQ,OAAO,EAE9C,IAAK,IAAIlD,EAAI,EAAGA,EAAIJ,KAAK6G,KAAKvD,OAAQlD,IACrC,IAAKJ,KAAK6G,KAAKzG,GAAGkG,OAAOhF,EAAEuF,KAAKzG,IAAK,OAAO,EAG7C,QAAKJ,KAAK+G,MAAMT,OAAOhF,EAAEyF,OAK1B,GAAI/G,KAAKkF,KAAK5B,QAAUhC,EAAE4D,KAAK5B,OAAQ,OAAO,EAE9C,IAAK,IAAIlD,EAAI,EAAGA,EAAIJ,KAAKkF,KAAK5B,OAAQlD,IACrC,IAAKJ,KAAKkF,KAAK9E,GAAGkG,OAAOhF,EAAE4D,KAAK9E,IAAK,OAAO,EAE7C,OAAOJ,KAAKoF,GAAGkB,OAAOhF,EAAE8D,KArE1B,oB,8EClBA,aACA,OACA,OAEA,OACA,OACA,QACA,OAYA,MAAqB0E,kBAAkB,UAQtC,aAAa,QAACC,EAAO,QAAEC,EAAO,SAAEC,EAAQ,SAAEC,GAAkC1H,GAC3E,GAAIwH,EAAS,CACZ,IACChB,EADkBe,EAAQvF,KAAKwB,UACLd,KAC1B+D,EAAWe,EAAQrF,KAAIC,GAAKA,GAAKA,EAAEJ,OAEpC,GAAIwE,EAAW1F,QAAU2F,EAAS3F,OACjC,MAAM,UAAKR,MAAM,yCAAyCkG,EAAW1F,YAAY2F,EAAS3F,SAAUd,GAErG,IAAK,IAAIpC,EAAI,EAAGA,EAAI4I,EAAW1F,OAAQlD,IACtC,GAAI6I,EAAS7I,KAAO4I,EAAW5I,GAAGkG,OAAO2C,EAAS7I,IACjD,MAAM,UAAK0C,MAAM,aAAa1C,EAAI,yCAAyC4I,EAAW5I,QAAQ6I,EAAS7I,KAAMoC,GAKhH,GAAIuH,aAAmB,UAAK,CAC3BA,EAAQtF,OAAO0F,SAAQ,CAAC/H,EAAGhC,KAC1B,KAAM4J,GAAWA,EAAQ5J,IAAQgC,EAAEqE,OAClC,MAAM,UAAK3D,MAAM,aAAa1C,EAAI,yBAA0BoC,MAI9D,IAAI4H,EAASL,EAAQtF,OAAOE,KAAI,CAACvC,EAAGhC,KACnC,GAAI4J,GAAWA,EAAQ5J,GAAI,OAAO4J,EAAQ5J,GAE1C,IAAIiK,EAAM,UAAmBvD,WAAYiD,EAAgBrF,MAEzD,OAAOoF,UAAUQ,MAChBlI,EAAEqE,MACF4D,EAAIxD,KACJoD,EACAI,EAAItD,MACJmD,EACA1H,MAIFuH,EAAU,IAAI,UAAQ,CACrB/C,IAAK+C,EACLhG,KAAMqG,GACJ5H,QACG,GAAIwH,EACV,MAAM,UAAKlH,MAAM,oBAAsBN,GAGxC,KAAMuH,EAAQvF,gBAAgB,WAAYuF,EAAQvF,KAAK4B,UACtD,MAAM,UAAKtD,MAAM,2BAA4BN,GAE9C,KAAMyH,aAAoBzG,QACrByG,EAAStF,KAAIC,GAAKA,aAAa,YAAMC,MAAKD,IAAMA,IACpD,MAAM,UAAK9B,MAAM,mBAAoBN,GAEtC,IAAIwG,EAAae,EAAQvF,KAAKqC,KAC7B0D,EAAeN,EAAStF,KAAIC,GAAKA,EAAEJ,OAEpC,GAAIwE,EAAW1F,QAAUiH,EAAajH,OACrC,MAAM,UAAKR,MAAM,yCAAyCkG,EAAW1F,YAAYiH,EAAajH,SAAUd,GAEzG,IAAK,IAAIpC,EAAI,EAAGA,EAAI4I,EAAW1F,OAAQlD,IACtC,IAAK4I,EAAW5I,GAAGkG,OAAOiE,EAAanK,IACtC,MAAM,UAAK0C,MAAM,mCAAmCkG,EAAW5I,QAAQmK,EAAanK,KAAMoC,GAG5FwC,MAAMxC,EAAO,KAAM,KAAMuH,EAAQvF,KAAKuC,OAEtC/G,KAAK+J,QAAUA,EACf/J,KAAKiK,SAAWA,EAEhB,IAAII,EAAM,UAAmBjD,sBAAsB2C,GAEnD,KAAMM,aAAe,WACpB,MAAM,UAAKvH,MAAM,mBAAoBN,GAGtC,IAAK,IAAIpC,EAAI,EAAGA,EAAIiK,EAAIxD,KAAKvD,OAAQlD,IACpC,IAAK,UAAmBkG,OAAO+D,EAAIxD,KAAKzG,GAAI6J,EAAS7J,IACpD,MAAM,UAAK0C,MAAM,QAAQ1C,EAAI,2CAG/B,UAAmBgH,sBAAsBiD,EAAIxD,KAAKzG,8CAIlD,UAAmBgH,sBAAsB6C,EAAS7J,wBACjCoC,GAIjB,GAAI0H,EAAU,CACb,IAAK,UAAmB5D,OAAO+D,EAAItD,MAAOmD,GACzC,MAAM,UAAKpH,MAAM,6CAGnB,UAAmBsE,sBAAsBiD,EAAItD,iDAI7C,UAAmBK,sBAAsB8C,uBACxB1H,GAGhBxC,KAAKiH,QAAUiD,OAEflK,KAAKiH,QAAUoD,EAAItD,MAId,SAAS1D,GAGf,OAFAA,EAAOA,GAAQ,GAER2B,MAAMK,SAAShC,IAClBrD,KAAK+J,QAAQ1E,SAAShC,IACrBrD,KAAKiK,SAASpC,OAAMxH,GAAKA,EAAEgF,SAAShC,KAGnC,WAAWsB,GACjB,OAAO3E,KAAKiH,QAAQzB,WAAWb,GAGzB,aAAa8B,EAAOI,EAAMoD,EAAUlD,EAAOmD,EAAU1H,GAC3D,GAAoB,GAAhBiE,EAAMnD,OAAa,MAAM,UAAKR,MAAM,MAAON,GAE/C,IAAIgI,EAAKxG,EAET,GAAgB,KAAZyC,EAAM,GAAW,CACpB,IAAKyD,EACJ,MAAM,UAAKpH,MAAM,uBAAuB2D,EAASjE,GAGlDgI,EAAMzD,EACN/C,EAAMkG,MACA,CACN,KAAM,GAAgB,EAAXzD,EAAM,IAAqB,EAAXA,EAAM,IAAUwD,EAAS3G,QACnD,MAAM,UAAKR,MAAM,uBAAuB2D,mCAAwCjE,GAEjFgI,EAAM3D,EAAgB,EAAXJ,EAAM,GAAS,GAC1BzC,EAAMiG,EAAoB,EAAXxD,EAAM,GAAS,GAG/B,OAAO,SAAUe,QAAQf,EAAO+D,EAAeC,EAAgBC,GAG9D,GAFAD,EAAO,UAAmBrD,sBAAsBqD,GAE5ChE,EAAMnD,QAAUoH,EAAK,OAAOD,EAEhC,GAAI,QAAQE,KAAKlE,EAAMiE,IAAO,CAC7B,IAAI7I,EAAiB,EAAb4E,EAAMiE,GAEd,GAAIF,aAAe,WAAOC,aAAgB,UAAK,CAC9C,GAAID,EAAI3D,KAAKvD,QAAUmH,EAAK5D,KAAKvD,OAChC,MAAM,UAAKR,MAAM,uBAAuB2D,gCAAqCjE,GAG9E,KAAM,GAAKX,GAAKA,GAAK4I,EAAK5D,KAAKvD,QAC9B,MAAM,UAAKR,MAAM,uBAAuB2D,mCAAwCjE,GAGjF,OAAOgF,QAAQf,EAAO+D,EAAI3D,KAAKhF,EAAI,GAAI4I,EAAK5D,KAAKhF,EAAI,GAAI6I,EAAM,GAGhE,OAAa,CACZ,KAAMF,aAAe,WAAcC,aAAgB,WAClD,MAAM,UAAK3H,MAAM,uBAAuB2D,EAASjE,GAGlD,GAAI,UAAmB8D,OAAOkE,EAAIxD,IAAKyD,EAAKzD,KAC3C,MAGD,KAAMyD,EAAKzD,eAAe,WAAOyD,EAAKzD,IAAItC,MACzC,MAAM,UAAK5B,MAAM,uBAAuB2D,EAASjE,GAGlDiI,EAAOA,EAAK/C,aAGb,IAAK+C,EAAK1G,QAAU,GAAKlC,GAAKA,GAAK4I,EAAK1G,KAAKT,QAC5C,MAAM,UAAKR,MAAM,uBAAuB2D,EAASjE,GAElD,OAAOgF,QAAQf,EAAO+D,EAAIzG,KAAKlC,EAAI,GAAI4I,EAAK1G,KAAKlC,EAAI,GAAI6I,EAAM,GACzD,GAAkB,KAAdjE,EAAMiE,GAAa,CAC7B,GAAIF,aAAe,WAAOC,aAAgB,UACzC,OAAOjD,QAAQf,EAAO+D,EAAIzD,MAAO0D,EAAK1D,MAAO2D,EAAM,GAGpD,MAAM,UAAK5H,MAAM,uBAAuB2D,EAASjE,GAGlD,MAAM,UAAKM,MAAM,uBAAuB2D,EAASjE,GAhD3C,CAiDJiE,EAAO+D,EAAKxG,EAAK,GAGd,iBAAiBmC,EAAgB1G,GACvC,IAAIwK,EAAWjK,KAAKiK,SAAStF,KAAIuE,GACzBA,EAAItG,iBAAiBuD,EAAS,KAGtC,OAAI8D,EAAS/D,KAAK,IAAI5C,QAAU,IAK/B2G,GAJAA,EAAWjK,KAAKiK,SAAStF,KAAIuE,GACrBA,EAAItG,iBAAiBuD,MAGTD,KAAK,MAElB,CACHlG,KAAK+J,QAAQnH,iBAAiBuD,GAAjC,IACA8D,EACA,KACC/D,KAAK,MAGP+D,EAAWA,EAAS/D,KAAK,MAAQ,KAAKyC,OAAOxC,EAAS,IAE/C,CACHnG,KAAK+J,QAAQnH,iBAAiBuD,GAAjC,IACA,KAAO8D,EACP,KACC/D,KAAK,KAAO,KAAKyC,OAAOxC,KAIrB,YAAY5C,EAAmB9D,GACrC,MAAO,GAAGO,KAAK+J,QAAQ1D,aAAY,MAAUrG,KAAKiK,SAAStF,KAAIC,GAAKA,EAAEyB,YAAY,UAAKjC,cAAa8B,KAAK,UAtO3G,qB,8EClBA,aAEA,MAA8B0E,aAAa,UAM1C,YAAapI,EAAcC,EAAaC,EAAaiD,GACpDX,MAAMxC,EAAOC,EAAKC,GAClB1C,KAAK2F,aAAeA,EACpB3F,KAAKoG,UAAYT,GATnB,gB,kGCCA,sBAAgBmD,WAAWP,GAC1B,MAAO,SAAUA,I,gBCLlB,IAAIsC,EAGHA,EAAU,EAAQ,IAA8BC,QAQjD,IAAIC,EAAU,EAAQ,IAAaD,QAEnClL,EAAOD,QAAU,CAACkL,UAASE,Y,6BCb3B,OAAe,u3S,ycCAf,cACA,QAEA,QAEA,gBAAqBA,QAKpB,YAAaC,GACZ,GALM,KAAAxI,MAAQ,IAAI,UAAM,MAET,KAAAyI,SAA+B,IAAI3F,KAG7C0F,EAAQ,MAAMjI,MAAM,MACzB/C,KAAKgL,OAASA,EAGF,WAAWE,EAAUC,G,yCACjC,OAAOnL,KAAKwC,YAAcxC,KAAKoL,mBAAmBF,EAAUC,MAG/C,mBAAmBD,EAAUC,G,yCAC1C,GAAInL,KAAKiL,SAASzB,IAAI0B,GACrB,OAAOlL,KAAKiL,SAAShK,IAAIiK,GAG1B,IAAI1I,EAAQ,IAAI,UAAM,MAElBU,QAAaiI,EAAOD,GACpBpG,EAAS9E,KAAKgL,OAAOK,MAAMnI,GAI/B,aAHMlD,KAAKsL,KAAKxG,EAAQtC,EAAO2I,GAE/BnL,KAAKiL,SAAS1F,IAAI2F,EAAU1I,GACrBA,KAGK,KAAK+I,EAAqB/I,EAAaxC,KAAKwC,MAAO2I,G,yCAC/D,IAAK,IAAI/K,EAAI,EAAGA,EAAImL,EAAMjI,OAAQlD,IAAK,CACtC,IAAIoL,EAAOD,EAAMnL,GAEjB,OAAQoL,EAAKC,OACZ,IAAK,SACJ,IAAIC,QAAe1L,KAAKoL,mBAAmBI,EAAKN,SAAUC,GAC1D3I,EAAMmJ,UAAUpG,IAAIiG,EAAKN,SAAUQ,GACnC,MACD,IAAK,UACJ,IAAIlH,EAAO,UAAaA,KAAKgH,EAAMhJ,GAEnC,GAAIA,EAAMoJ,QAAQpH,EAAK7D,MACtB,MAAM6B,EAAMM,MAAM,QAAQ0B,EAAK7D,kCAGhC6B,EAAMqJ,QAAQrH,GACd,MACD,IAAK,OACJ,IAAIW,EAAW,UAAaA,SAASqG,EAAMhJ,GAE3C,GAAIA,EAAMsJ,YAAY3G,EAASxE,MAC9B,MAAM6B,EAAMM,MAAM,cAAcqC,EAASxE,kCAG1C6B,EAAMuJ,YAAY5G,GAClB,MACD,IAAK,QACJ,IAAI6B,EAAM,UAAaA,IAAIwE,EAAMhJ,GAEjC,GAAIA,EAAMsJ,YAAY9E,EAAIrG,MACzB,MAAM6B,EAAMM,MAAM,cAAckE,EAAIrG,kCAGrC6B,EAAMwJ,OAAOhF,GACb,MACD,IAAK,YACJ,IAAIiF,EAAS,UAAaA,OAAOT,EAAMhJ,GAEvC,GAAIA,EAAM0J,UAAUD,EAAOtL,MAC1B,MAAM6B,EAAMM,MAAM,UAAUmJ,EAAOtL,kCAGpC6B,EAAM2J,UAAUF,GAChB,MACD,QACC,MAAMlJ,MAAM,qBAAsByI,EAAaC,YAK5C,SAASD,GACf,OAAQA,EAAKC,OACZ,IAAK,UACJ,OAAO,UAAajH,KAAKgH,EAAMxL,KAAKwC,OACrC,IAAK,OACJ,OAAO,UAAa2C,SAASqG,EAAMxL,KAAKwC,OACzC,IAAK,QACJ,OAAO,UAAawE,IAAIwE,EAAMxL,KAAKwC,OACpC,IAAK,YACL,IAAK,aACJ,OAAO,UAAayJ,OAAOT,EAAMxL,KAAKwC,OACvC,IAAK,MACJ,OAAO,UAAa6H,IAAImB,EAAMxL,KAAKwC,OACpC,IAAK,YACJ,OAAO,UAAa4J,UAAUZ,EAAMxL,KAAKwC,OAC1C,IAAK,aACJ,OAAO,UAAa6J,WAAWb,EAAMxL,KAAKwC,OAC3C,IAAK,MACJ,OAAO,UAAa8J,QAAQd,EAAMxL,KAAKwC,OACxC,QACC,MAAMO,MAAM,qBAAsByI,EAAaC,QAI3C,iBAAiB9K,EAAc4L,GACrC,OAAO,UAActL,IAAIjB,KAAKwC,MAAO7B,EAAM4L,M,8EC9G7C,aACA,OACA,OACA,QACA,OAKA,MAAqBC,MAepB,YAAaC,EAAeC,GAI3B,GAlBe,KAAAf,UAAgC,IAAIrG,IAEpC,KAAAqH,WAAsC,IAAIrH,IAC1C,KAAAsH,OAAsC,IAAItH,IAC1C,KAAAuH,UAA8B,IAAIvH,IAClC,KAAAwH,KAA+B,IAAIxH,IACnC,KAAAyH,WAAyB,GASxC/M,KAAKyM,OAASA,EACdzM,KAAKP,KAAOgN,EAASA,EAAOhN,KAAOO,KAE/B0M,KAAWA,aAAiB,WAC/B,MAAM3J,MAAM,oBAGb/C,KAAK0M,MAAQA,GAAS,IAAI,UAE1B1M,KAAKgN,SAAWP,EAASA,EAAOO,SAAW,KAGrC,OAAOxI,EAAM7D,EAAMsM,GACzB,IAAIC,EAAQ,IAAIV,MAAMxM,KAAMA,KAAK0M,MAAMS,OAAO3I,EAAM7D,EAAMsM,IAE1D,OADAjN,KAAK+M,WAAW5C,SAAQiD,GAAKF,EAAMH,WAAW9E,KAAKmF,KAC5CF,EAGD,MAAMrK,GACZ,OAAO7C,KAAK0M,MAAM5J,MAAMD,GAUlB,WAAWlC,GACjB,GAAmB,iBAARA,EACV,OAAOX,KAAK2M,WAAWnD,IAAI7I,IACvB,IAAIX,KAAK2L,UAAU0B,UAAUxI,MAAKxC,GAAKA,EAAEiL,WAAW3M,KAGzD,KAAMA,aAAgB6C,OACrB,MAAMxD,KAAK8C,MAAM,yBAElB,GAAInC,EAAK2C,OAAS,EACjB,MAAMtD,KAAK8C,MAAM,wBAElB,OAAOnC,EAAKgE,KAAIC,GACR5E,KAAKsN,WAAW1I,KACrBiD,OAAMjD,GAAKA,IAUR,QAAQjE,GACd,GAAmB,iBAARA,EACV,OAAOX,KAAKsN,WAAW3M,MAChBX,KAAKyM,QAAUzM,KAAKyM,OAAOb,QAAQjL,GAG3C,KAAMA,aAAgB6C,OACrB,MAAMxD,KAAK8C,MAAM,yBAElB,GAAInC,EAAK2C,OAAS,EACjB,MAAMtD,KAAK8C,MAAM,wBAElB,OAAOnC,EAAKgE,KAAIC,GACR5E,KAAK4L,QAAQhH,KAClBiD,OAAMjD,GAAKA,IAGR,QAAQJ,GACd,KAAMA,aAAgB,WACrB,MAAMxE,KAAK8C,MAAM,yBAElB,IAAK0B,EAAK7D,KACT,MAAMX,KAAK8C,MAAM,qBAElB,GAAI9C,KAAKsN,WAAW9I,EAAK7D,MACxB,MAAMX,KAAK8C,MAAM,QAAQ0B,EAAK7D,kCAE/B,GAAI6D,EAAKoB,WAAY,CACpB,GAAI5F,KAAKgN,SACR,MAAMhN,KAAK8C,MAAM,+BAGlB,SAAUyK,UAAU/K,GACnBA,EAAMwK,SAAWxI,EACbhC,EAAMiK,QAAQc,UAAU/K,EAAMiK,QAFnC,CAGGzM,MAIJ,OADAA,KAAK2M,WAAWpH,IAAIf,EAAK7D,KAAM6D,GACxBA,EAUD,QAAQ7D,GACd,GAAmB,iBAARA,EAAkB,CAC5B,IAAKX,KAAK4L,QAAQjL,GACjB,MAAMX,KAAK8C,MAAM,QAAQnC,oBAE1B,OAAOX,KAAK2M,WAAWnD,IAAI7I,GACxBX,KAAK2M,WAAW1L,IAAIN,KACjBX,KAAKyM,QAAUzM,KAAKyM,OAAOe,QAAQ7M,IACpC,IAAIX,KAAK2L,UAAU0B,UAAUI,QAAOpL,GAC/BA,EAAEuJ,QAAQjL,KACf,GAAG6M,QAAQ7M,GAGjB,KAAMA,aAAgB6C,OACrB,MAAMxD,KAAK8C,MAAM,yBAElB,GAAInC,EAAK2C,OAAS,EACjB,MAAMtD,KAAK8C,MAAM,wBAElB,IAAIoC,EAAOvE,EAAK+M,MAAM,EAAG/M,EAAK2C,OAAS,GAAGqB,KAAIC,GACtC5E,KAAKwN,QAAQ5I,KAGjBQ,EAAKpF,KAAKwN,QAAQ7M,EAAKA,EAAK2C,OAAS,IAEzC,OAAO,IAAI,UAAW,CACrB2B,YAAY,EACZC,OACAE,OAIK,eAAezE,GACrB,OAAOX,KAAK4M,OAAOpD,IAAI7I,IACnB,IAAIX,KAAK2L,UAAU0B,UAAUxI,MAAKxC,GAAKA,EAAEsL,eAAehN,KAGtD,YAAYA,GAClB,OAAOX,KAAK2N,eAAehN,MACpBX,KAAKyM,QAAUzM,KAAKyM,OAAOX,YAAYnL,GAGxC,YAAYwE,GAClB,KAAMA,aAAoB,WACzB,MAAMnF,KAAK8C,MAAM,yBAElB,GAAI9C,KAAK2N,eAAexI,EAASxE,MAChC,MAAMX,KAAK8C,MAAM,cAAcqC,EAASxE,kCAGzC,OADAX,KAAK4M,OAAOrH,IAAIJ,EAASxE,KAAMwE,GACxBA,EAGD,OAAO6B,GACb,KAAMA,aAAe,WACpB,MAAMhH,KAAK8C,MAAM,yBAElB,IAAKkE,EAAIrG,KACR,MAAMX,KAAK8C,MAAM,qCAElB,GAAI9C,KAAK2N,eAAe3G,EAAIrG,MAC3B,MAAMX,KAAK8C,MAAM,cAAckE,EAAIrG,kCAGpC,OADAX,KAAK4M,OAAOrH,IAAIyB,EAAIrG,KAAMqG,GACnBA,EAGD,YAAYrG,GAClB,IAAKX,KAAK8L,YAAYnL,GACrB,MAAMX,KAAK8C,MAAM,cAAcnC,oBAEhC,OAAOX,KAAK4M,OAAOpD,IAAI7I,GACpBX,KAAK4M,OAAO3L,IAAIN,KACbX,KAAKyM,QAAUzM,KAAKyM,OAAOmB,YAAYjN,IACxC,IAAIX,KAAK2L,UAAU0B,UAAUI,QAAOpL,GAC/BA,EAAEyJ,YAAYnL,KACnB,GAAGiN,YAAYjN,GAGd,aAAaA,GACnB,OAAOX,KAAK6M,UAAUrD,IAAI7I,IAASX,KAAK4M,OAAOpD,IAAI7I,IAC/C,IAAIX,KAAK2L,UAAU0B,UAAUxI,MAAKxC,GAAKA,EAAEwL,aAAalN,KAGpD,UAAUA,GAChB,OAAOX,KAAK6N,aAAalN,MAClBX,KAAKyM,QAAUzM,KAAKyM,OAAOP,UAAUvL,GAGtC,UAAUsL,GAChB,KAAMA,aAAkB,WACvB,MAAMjM,KAAK8C,MAAM,yBAElB,GAAI9C,KAAK6N,aAAa5B,EAAOtL,MAC5B,MAAMX,KAAK8C,MAAM,UAAUmJ,EAAOtL,kCAGnC,OADAX,KAAK6M,UAAUtH,IAAI0G,EAAOtL,KAAMsL,GACzBA,EAGD,UAAUtL,GAChB,IAAKX,KAAKkM,UAAUvL,GACnB,MAAMX,KAAK8C,MAAM,UAAUnC,oBAE5B,OAAOX,KAAK6M,UAAUrD,IAAI7I,GACvBX,KAAK6M,UAAU5L,IAAIN,GACnBX,KAAK4M,OAAOpD,IAAI7I,GACfX,KAAK4M,OAAO3L,IAAIN,KACbX,KAAKyM,QAAUzM,KAAKyM,OAAOqB,UAAUnN,IACtC,IAAIX,KAAK2L,UAAU0B,UAAUI,QAAOpL,GAC/BA,EAAE6J,UAAUvL,KACjB,GAAGmN,UAAUnN,GAGb,QAAQA,GACd,OAAOX,KAAK8M,KAAKtD,IAAI7I,IACjB,IAAIX,KAAK2L,UAAU0B,UAAUxI,MAAKxC,GAAKA,EAAE0L,QAAQpN,KAG/C,KAAKA,GACX,OAAOX,KAAK+N,QAAQpN,MACbX,KAAKyM,QAAUzM,KAAKyM,OAAOuB,KAAKrN,GAGjC,KAAK8H,GACX,KAAMA,aAAa,WAClB,MAAMzI,KAAK8C,MAAM,yBAElB,GAAI9C,KAAK+N,QAAQtF,EAAE9H,MAClB,MAAMX,KAAK8C,MAAM,cAAc2F,EAAE9H,kCAGlC,OADAX,KAAK8M,KAAKvH,IAAIkD,EAAE9H,KAAM8H,GACfA,EAGD,KAAK9H,GACX,IAAKX,KAAKgO,KAAKrN,GACd,MAAMX,KAAK8C,MAAM,cAAcnC,oBAEhC,OAAOX,KAAK8M,KAAKtD,IAAI7I,GAClBX,KAAK8M,KAAK7L,IAAIN,KACXX,KAAKyM,QAAUzM,KAAKyM,OAAOwB,KAAKtN,IACjC,IAAIX,KAAK2L,UAAU0B,UAAUI,QAAOpL,GAC/BA,EAAE2L,KAAKrN,KACZ,GAAGsN,KAAKtN,IAtQf,iB,2FCTA,MAAqBuN,WAGpB,YAAaC,GACZnO,KAAKmO,MAAQA,GAAS,GAGhB,OAAO3J,EAAM7D,EAAMsM,GACzB,OAAO,IAAIiB,WAAW,CAAC,CAAC1J,EAAM7D,EAAMsM,IAAWvE,OAAO1I,KAAKmO,QAGrD,MAAMtL,GACZ,IAAIqI,OAA6B,IAAXkD,GAA0BA,EAAQC,KAAK,GAE7D,OAAO,IAAItL,MACVF,EACE,WAED7C,KAAKmO,MAAM7K,OACRtD,KAAKmO,MAAMxJ,KAAI,EAAEH,EAAM7D,EAAMsM,KACvB,GAAGzI,KAAQ7D,GAAQ,kBAAkBuK,GAAY,eAAe+B,EAASqB,MAAM9C,QAAQyB,EAASqB,MAAMC,YAC3GrI,KAAK,WACN,WAAWgF,GAAY,sBAtB9B,uB,gCCCA,IAOIsD,EACAC,EARAL,EAAUxO,EAAOD,QAAU,GAU/B,SAAS+O,mBACL,MAAM,IAAI3L,MAAM,mCAEpB,SAAS4L,sBACL,MAAM,IAAI5L,MAAM,qCAsBpB,SAAS6L,WAAW5H,GAChB,GAAIwH,IAAqBK,WAErB,OAAOA,WAAW7H,EAAK,GAG3B,IAAKwH,IAAqBE,mBAAqBF,IAAqBK,WAEhE,OADAL,EAAmBK,WACZA,WAAW7H,EAAK,GAE3B,IAEI,OAAOwH,EAAiBxH,EAAK,GAC/B,MAAMpC,GACJ,IAEI,OAAO4J,EAAiBjO,KAAK,KAAMyG,EAAK,GAC1C,MAAMpC,GAEJ,OAAO4J,EAAiBjO,KAAKP,KAAMgH,EAAK,MAvCnD,WACG,IAEQwH,EADsB,mBAAfK,WACYA,WAEAH,iBAEzB,MAAO9J,GACL4J,EAAmBE,iBAEvB,IAEQD,EADwB,mBAAjBK,aACcA,aAEAH,oBAE3B,MAAO/J,GACL6J,EAAqBE,qBAjB7B,GAwEA,IAEII,EAFAC,EAAQ,GACRC,GAAW,EAEXC,GAAc,EAElB,SAASC,kBACAF,GAAaF,IAGlBE,GAAW,EACPF,EAAazL,OACb0L,EAAQD,EAAarG,OAAOsG,GAE5BE,GAAc,EAEdF,EAAM1L,QACN8L,cAIR,SAASA,aACL,IAAIH,EAAJ,CAGA,IAAII,EAAUT,WAAWO,iBACzBF,GAAW,EAGX,IADA,IAAIjH,EAAMgH,EAAM1L,OACV0E,GAAK,CAGP,IAFA+G,EAAeC,EACfA,EAAQ,KACCE,EAAalH,GACd+G,GACAA,EAAaG,GAAYI,MAGjCJ,GAAc,EACdlH,EAAMgH,EAAM1L,OAEhByL,EAAe,KACfE,GAAW,EAnEf,SAASM,gBAAgBC,GACrB,GAAIf,IAAuBK,aAEvB,OAAOA,aAAaU,GAGxB,IAAKf,IAAuBE,sBAAwBF,IAAuBK,aAEvE,OADAL,EAAqBK,aACdA,aAAaU,GAExB,IAEI,OAAOf,EAAmBe,GAC5B,MAAO5K,GACL,IAEI,OAAO6J,EAAmBlO,KAAK,KAAMiP,GACvC,MAAO5K,GAGL,OAAO6J,EAAmBlO,KAAKP,KAAMwP,KAgD7CD,CAAgBF,IAiBpB,SAASI,KAAKzI,EAAK0I,GACf1P,KAAKgH,IAAMA,EACXhH,KAAK0P,MAAQA,EAYjB,SAASC,QA5BTvB,EAAQwB,SAAW,SAAU5I,GACzB,IAAIjD,EAAO,IAAIP,MAAMqM,UAAUvM,OAAS,GACxC,GAAIuM,UAAUvM,OAAS,EACnB,IAAK,IAAIlD,EAAI,EAAGA,EAAIyP,UAAUvM,OAAQlD,IAClC2D,EAAK3D,EAAI,GAAKyP,UAAUzP,GAGhC4O,EAAM/G,KAAK,IAAIwH,KAAKzI,EAAKjD,IACJ,IAAjBiL,EAAM1L,QAAiB2L,GACvBL,WAAWQ,aASnBK,KAAKvN,UAAUoN,IAAM,WACjBtP,KAAKgH,IAAI8I,MAAM,KAAM9P,KAAK0P,QAE9BtB,EAAQ2B,MAAQ,UAChB3B,EAAQ4B,SAAU,EAClB5B,EAAQ6B,IAAM,GACd7B,EAAQC,KAAO,GACfD,EAAQ8B,QAAU,GAClB9B,EAAQ+B,SAAW,GAInB/B,EAAQgC,GAAKT,KACbvB,EAAQiC,YAAcV,KACtBvB,EAAQkC,KAAOX,KACfvB,EAAQmC,IAAMZ,KACdvB,EAAQoC,eAAiBb,KACzBvB,EAAQqC,mBAAqBd,KAC7BvB,EAAQsC,KAAOf,KACfvB,EAAQuC,gBAAkBhB,KAC1BvB,EAAQwC,oBAAsBjB,KAE9BvB,EAAQyC,UAAY,SAAUlQ,GAAQ,MAAO,IAE7CyN,EAAQ0C,QAAU,SAAUnQ,GACxB,MAAM,IAAIoC,MAAM,qCAGpBqL,EAAQ2C,IAAM,WAAc,MAAO,KACnC3C,EAAQ4C,MAAQ,SAAUC,GACtB,MAAM,IAAIlO,MAAM,mCAEpBqL,EAAQ8C,MAAQ,WAAa,OAAO,I,8EClLpC,aACA,OACA,OAEA,OACA,QAGA,OAGA,OACA,QAEA,SAASC,gBAAgB5I,GACxB,GAAiB,QAAbA,EAAIkD,MACP,MAAM1I,MAAM,oBAEb,OAAKwF,EAAI6I,MACF,IAAM7I,EAAIrD,KAAKP,IAAIwM,iBAAiBjL,KAAK,MAAQ,OACpDiL,gBAAgB5I,EAAInD,IAAM,IAFNmD,EAAoB5H,KAY7C,SAAS0Q,mBAAmB9I,GAC3B,GAAiB,QAAbA,EAAIkD,MACP,MAAM1I,MAAM,oBAEb,GAAKwF,EAAI6I,MAOF,CACN,IAAK7I,EAAIrD,OAASqD,EAAInD,GACrB,MAAMrC,MAAM,oBAEb,OAAOwF,EAAIrD,KAAKP,IAAI0M,oBAAoB3I,OACvC,CAAC2I,mBAAmB9I,EAAInD,MATzB,KAFAmD,EAAMA,GAEG5H,KACR,MAAMoC,MAAM,oBAEb,OAAOwF,EAAI5H,KAwBb,MAAqB2Q,GACb,YAAY/I,EAAoBgJ,GACtC,GAAiB,WAAbhJ,EAAIkD,MACP,MAAM1I,MAAM,oBAEb,IAAIP,EAAe+O,EAAYpE,OAAO,OAAQ5E,EAAI5H,KAAM4H,EAAI0E,UAExDvH,EAAqB6C,EAAI7C,OAASlD,EAAMgL,QAAQ6D,mBAAmB9I,EAAI7C,SAAW,KAElF/E,EAAe4H,EAAI5H,KACnB8B,EAAc8F,EAAI9F,IAClBoD,EAAgB0C,EAAI1C,KAExB,GAAIA,GAAQH,EACX,MAAMlD,EAAMM,MAAM,oCAGnB,OAAI4C,EACI,IAAI,UAAW,CACrB/E,OACA8B,MACAoD,OACAH,WAIK,IAAI,UAAW,CACrBT,YAAY,EACZtE,OACA8B,MACAoD,SAIK,gBAAgB0C,EAA6BgJ,GACnD,IAAK,CAAC,OAAQ,OAAOC,SAASjJ,EAAIkD,OACjC,MAAM1I,MAAM,oBAGb,IAAIP,EAAQ+O,EAAYpE,OAAO,WAAY5E,EAAI5H,KAAM4H,EAAI0E,UAEzD,GAAiB,OAAb1E,EAAIkD,MAAgB,CACvB,GAAgB,UAAZlD,EAAI/D,KACP,MAAMhC,EAAMM,MAAM,iBAAiByF,EAAI/D,oBAGxC,IAAKhC,EAAMsJ,YAAYvD,EAAI5H,MAC1B,MAAM6B,EAAMM,MAAM,wBAAwByF,EAAI5H,MAC/C,OAAO6B,EAAMoL,YAAYrF,EAAI5H,MAG9B,IAAK6B,EAAMoJ,QAAQyF,mBAAmB9I,EAAI/D,OACzC,MAAMhC,EAAMM,MAAM,QAAQqO,gBAAgB5I,EAAI/D,wBAE/C,IAAIA,EAAOhC,EAAMgL,QAAQ6D,mBAAmB9I,EAAI/D,OAEhD,OAAO,IAAI,UAAS,CACnBA,OACAgC,UAAW+B,EAAI/B,QACfC,MAAO8B,EAAI9B,OAAS,KACpB9F,KAAM4H,EAAI5H,KACV8B,IAAK8F,EAAI9F,IACTC,IAAK6F,EAAI7F,KACPF,GAGG,WAAW+F,EAAkCgJ,GACnD,GAAiB,SAAbhJ,EAAIkD,OAAiC,WAAblD,EAAIkD,MAC/B,MAAM1I,MAAM,oBAEb,IAAIpC,EAAO,KACV8B,EAAM,KACNC,EAAM,KAEU,SAAb6F,EAAIkD,QAEP9K,GADA4H,EAAMA,GACK5H,KACX8B,EAAM8F,EAAI9F,IACVC,EAAM6F,EAAI7F,KAGX,IAAIF,EAAQ+O,EAAYpE,OAAO,MAAOxM,EAAM4H,EAAI0E,UAE5CzI,EAAO,KACPC,EAAS8D,EAAI9D,OAAOE,KAAI8M,IAC3B,IAAKjP,EAAMoJ,QAAQyF,mBAAmBI,EAAIjN,OACzC,MAAMhC,EAAMM,MAAM,QAAQqO,gBAAgBM,EAAIjN,wBAE/C,IAAIkN,EAAKJ,GAAGnM,SAASsM,EAAKjP,GAE1B,GAAIA,EAAMmL,eAAe+D,EAAG/Q,MAC3B,MAAM6B,EAAMM,MAAM,aAAa4O,EAAG/Q,kCAEnC,OAAO6B,EAAMuJ,YAAY2F,MAEtBhN,EAAO,KAEX,OAAQ6D,EAAIkD,OACX,IAAK,QACJ,IAAKjJ,EAAMoJ,QAAQyF,mBAAmB9I,EAAIoJ,UACzC,MAAMnP,EAAMM,MAAM,QAAQqO,gBAAgB5I,EAAIoJ,2BAE/C,IAAIA,EAAUnP,EAAMgL,QAAQ6D,mBAAmB9I,EAAIoJ,UAEnD,GAAIpJ,EAAI7D,MAEP,GADAA,EAAO4M,GAAGM,MAAMrJ,EAAI7D,KAAMlC,IACrBmP,EAAQrL,OAAO5B,EAAKF,MACxB,MAAMhC,EAAMM,MAAM,mBAAmB4B,EAAKF,wCAAwCmN,YAAkBhR,UAErG6D,EAAO,IAAI,UAAW,CACrBS,YAAY,EACZC,KAAMT,EAAOE,KAAIQ,GAAYA,EAASX,OACtCY,GAAIuM,IAGN,MACD,IAAK,UACJjN,EAAO4M,GAAGM,MAAMrJ,EAAI7D,KAAMlC,GAC1BgC,EAAO,KACP,MACD,QACC,MAAMzB,MAAM,OAGd,OAAO,IAAI,UAAU,CAACwB,YAAa,GAAI5D,OAAM6D,OAAMC,SAAQC,OAAMjC,MAAKC,OAAMF,GAGtE,eAAe+F,EAAoBgJ,GACzC,GAAiB,WAAbhJ,EAAIkD,MACP,MAAM1I,MAAM,oBAEb,IAAIP,EAAQ+O,EAAYpE,OAAO,UAAW,SAAU5E,EAAI0D,OAAS1D,EAAI0D,OAAOtL,KAAO,KAAM4H,EAAI0E,UAEzFjG,EAAMsK,GAAGM,MAAMrJ,EAAI0D,OAAQzJ,GAE3BuB,EAAOwE,EAAIxE,KAAKY,KAAIuE,GAChBoI,GAAGM,MAAM1I,EAAK1G,KAGtB,OAAO,IAAI,UAAQ,CAACwE,MAAKjD,QAAOvB,GAG1B,gBAAgB+F,EAAqBgJ,GAC3C,IAAK,CAAC,MAAO,YAAa,aAAc,aAAc,OAAOC,SAASjJ,EAAIkD,OACzE,MAAM1I,MAAM,oBAGb,IAAIP,EAAQ+O,EAEZ,OAAQhJ,EAAIkD,OACX,IAAK,MACJ,OAAO6F,GAAGjH,IAAI9B,EAAK/F,GACpB,IAAK,YACJ,OAAO8O,GAAGlF,UAAU7D,EAAK/F,GAC1B,IAAK,aACJ,OAAO8O,GAAGjF,WAAW9D,EAAK/F,GAC3B,IAAK,aACJ,OAAO8O,GAAGrF,OAAO1D,EAAK/F,GACvB,IAAK,MACJ,OAAO8O,GAAGhF,QAAQ/D,EAAK/F,GACxB,QACC,MAAMO,MAAM,QAIR,aAAawF,EAAkBgJ,GACrC,IAAK,CAAC,UAAW,UAAW,OAAOC,SAASjJ,EAAIkD,OAE/C,MADAhI,QAAQC,IAAI6E,GACNxF,MAAM,oBAIb,IAAIP,EAAQ+O,EAEZ,OAAQhJ,EAAIkD,OACX,IAAK,UACJ,OAAO6F,GAAGO,QAAQtJ,EAAK/F,GACxB,IAAK,UACJ,OAAO8O,GAAGtK,IAAIuB,EAAK/F,GACpB,IAAK,MACJ,OAAO8O,GAAGnM,SAASoD,EAAK/F,GACzB,QACC,MAAMO,MAAM,QAIR,eAAewF,EAAgBgJ,GACrC,GAAiB,OAAbhJ,EAAIkD,MACP,MAAM1I,MAAM,oBAGb,IAAIP,EAAQ+O,EAEZ,OAAQhJ,EAAI/D,MACX,IAAK,IACJ,GAAI+D,EAAI5H,KAAKwC,MAAM,aAAc,CAChC,IAAI2O,EAASC,OAAOxJ,EAAI5H,KAAK+M,MAAM,IAAM,EACzC,GAAIoE,GAAUtP,EAAMuK,WAAWzJ,OAC9B,MAAMd,EAAMM,MAAM,eAAegP,EAAS,eAG3C,OAAOtP,EAAMuK,WAAW+E,GAGzB,MAAMtP,EAAMM,MAAM,2BAA2ByF,EAAI5H,MAClD,IAAK,IACJ,IAAK6B,EAAMwL,KAAKzF,EAAI5H,MACnB,MAAM6B,EAAMM,MAASyF,EAAI5H,KAAP,mBAGnB,OAAO6B,EAAMyL,KAAK1F,EAAI5H,MACvB,IAAK,SACJ,IAAK6B,EAAM0J,UAAU3D,EAAI5H,MACxB,MAAM6B,EAAMM,MAAM,UAAUyF,EAAI5H,uBAEjC,OAAO6B,EAAMsL,UAAUvF,EAAI5H,MAC5B,QACC,MAAM6B,EAAMM,MAAM,gBAAgByF,EAAI/D,OAIlC,WAAW+D,EAAgBgJ,GACjC,GAAiB,OAAbhJ,EAAIkD,MACP,MAAM1I,MAAM,oBAEb,IAAIP,EAAQ+O,EAAYpE,OAAO,MAAO,KAAM5E,EAAI0E,UAE5CpG,EAAO0B,EAAI1B,KAAKlC,KAAI9D,GAAKyQ,GAAGU,SAASnR,EAAG2B,KAExCyP,EAAazP,EAAM2K,OAAO,YAAa,KAAM5E,EAAIxB,MAAMkG,UAC3DpG,EAAKsD,SAAQ9J,GAAK4R,EAAWlF,WAAW9E,KAAK5H,KAE7C,IAAI8G,EAAQoB,EAAIpB,MAAMxC,KAAI8D,IACzB,IAAIyJ,EAAKZ,GAAGa,KAAK1J,EAAGwJ,GAEpB,GAAIA,EAAWlE,QAAQmE,EAAGvR,MACzB,MAAMsR,EAAWnP,MAAS2F,EAAE9H,KAAL,8BAGxB,OAAOsR,EAAWG,KAAKF,MAGpBnL,EAAQuK,GAAGU,SAASzJ,EAAIxB,MAAOkL,GAEnC,OAAO,IAAI,UAAI,CAACpL,OAAMM,QAAOJ,SAAQvE,GAG/B,YAAY+F,EAAiBgJ,GACnC,GAAiB,QAAbhJ,EAAIkD,MACP,MAAM1I,MAAM,oBAEb,IAAIP,EAAQ+O,EAAYpE,OAAO,OAAQ5E,EAAI5H,KAAM4H,EAAI0E,UAEjDvI,EAAO4M,GAAGU,SAASzJ,EAAI7D,KAAMlC,GAEjC,OAAO,IAAI,UAAU,CAAC7B,KAAM4H,EAAI5H,KAAM+D,QAAOlC,GAGvC,cAAc+F,EAAyCgJ,GAC7D,GAAiB,aAAbhJ,EAAIkD,OAAqC,cAAblD,EAAIkD,MACnC,MAAM1I,MAAM,oBAEb,IAAIpC,EAAe,KAClBuG,GAAqB,EACrBzE,EAAc,KACd8B,EAAwB,GAER,aAAbgE,EAAIkD,QACP9K,EAAO4H,EAAI5H,KAAMuG,EAAYqB,EAAIrB,UACjCzE,EAAM8F,EAAI9F,IAAK8B,EAAcgE,EAAIhE,aAGlC,IAAI/B,EAAQ+O,EAAYpE,OAAO,SAAUxM,EAAM4H,EAAI0E,UAE/CxI,EAAS8D,EAAI9D,OAAOE,KAAI8M,IAC3B,IAAKjP,EAAMoJ,QAAQyF,mBAAmBI,EAAIjN,OACzC,MAAMhC,EAAMM,MAAM,QAAQqO,gBAAgBM,EAAIjN,wBAE/C,IAAIkN,EAAKJ,GAAGnM,SAASsM,EAAKjP,GAE1B,GAAIA,EAAMmL,eAAe+D,EAAG/Q,MAC3B,MAAM6B,EAAMM,MAAM,aAAa4O,EAAG/Q,kCAEnC,OAAO6B,EAAMuJ,YAAY2F,MAGtBvK,EAAQoB,EAAIpB,MAAMxC,KAAI8D,IACzB,IAAIyJ,EAAKZ,GAAGa,KAAK1J,EAAGjG,GAEpB,GAAIA,EAAMuL,QAAQmE,EAAGvR,MACpB,MAAM6B,EAAMM,MAAS2F,EAAE9H,KAAL,8BAGnB,OAAO6B,EAAM4P,KAAKF,MAGfxN,EAAO4M,GAAGU,SAASzJ,EAAI7D,KAAMlC,GAEjC,OAAO,IAAI,UAAO,CAACC,MAAK8B,cAAa2C,YAAWvG,OAAM8D,SAAQ0C,QAAOzC,QAAOlC,GAGtE,kBAAkB+F,EAAuBgJ,GAC/C,GAAiB,cAAbhJ,EAAIkD,MACP,MAAM1I,MAAM,oBAEb,IAAIP,EAAQ+O,EAAYpE,OAAO,aAAc,SAAU5E,EAAI0D,OAAS1D,EAAI0D,OAAOtL,KAAO,KAAM4H,EAAI0E,UAE5FjG,EAAMsK,GAAGU,SAASzJ,EAAI0D,OAAQzJ,GAE9BuB,EAAOwE,EAAIxE,KAAKY,KAAI4D,GAChB+I,GAAGM,MAAMrJ,EAAK/F,KAGtB,OAAO,IAAI,UAAQ,CAClBwE,MACAjD,QACEvB,GAGG,iBAAiB+F,EAAsBgJ,GAC7C,GAAiB,aAAbhJ,EAAIkD,MACP,MAAM1I,MAAM,oBAEb,IAAIP,EAAQ+O,EAAYpE,OAAO,YAAa,SAAU5E,EAAIwB,QAAUxB,EAAIwB,QAAQpJ,KAAO,KAAM4H,EAAI0E,UAE7FlD,EAAUuH,GAAGU,SAASzJ,EAAIwB,QAASvH,GAEnCwH,EAAWzB,EAAIyB,QAEhBzB,EAAIyB,QAAQrF,KAAI0N,GACVA,GAAKf,GAAGM,MAAMS,EAAG7P,KAFvB,KAKCyH,EAAW1B,EAAI0B,SAAStF,KAAI4D,GACxB+I,GAAGU,SAASzJ,EAAK/F,KAGrB0H,EAAW3B,EAAI2B,UAAYoH,GAAGU,SAASzJ,EAAI2B,SAAU1H,GAEzD,OAAO,IAAI,UAAU,CACpBuH,UACAC,UACAC,WACAC,YACE1H,IAxVL,c,8ECrEA,aACA,OACA,OACA,OAEA,QACA,QACA,QACA,OACA,OACA,OAGA,gBAAqB8P,cACb,WAAW9P,EAAc7B,EAAc4L,GAC7C,IAAIgG,EAAU,WAId,IAAK/P,EAAM0J,UAAUvL,GACpB,MAAMoC,MAAM,OAGb,IAAIyP,EAAUhQ,EAAMsL,UAAUnN,GAE1B8R,EAAQ,SAAUjL,QAAQ9C,GAC7B,OAAIA,aAAgB,UACZgO,KAAKC,OACRjO,EAAKuF,SAAStF,IAAI6C,SACnB9C,EAAKqF,mBAAmB,WAAOrF,EAAKqF,QAAQpJ,MACzC+D,EAAKqF,mBAAmB,WACvB,EAAAjB,WAAWpE,EAAKqF,QAAQ/C,MACxBtC,EAAKqF,QAAQ/C,IAAIrG,KACnB,EAAI6G,QAAQ9C,EAAKqF,SACrB,GAESrF,aAAgB,UACnBgO,KAAKC,OACRjO,EAAKyC,MAAMxC,KAAI8D,GAAKjB,QAAQiB,EAAE/D,QACjC8C,QAAQ9C,EAAKA,OACV,EACMA,aAAgB,UACnB8C,QAAQ9C,EAAKA,MAAQ,EAClBA,aAAgB,UACnBgO,KAAKC,OACRjO,EAAKmC,KAAKlC,IAAI6C,YACd9C,EAAKyC,MAAMxC,KAAI8D,GAAKjB,QAAQiB,EAAE/D,QACjC8C,QAAQ9C,EAAKqC,QACV,EAEG,EAzBG,CA2BTyL,GAEH,SAASI,YAAYtQ,EAAsBuE,EAAagM,EAAYC,EAAuBC,GAO1F,IANA,IAAIC,EAAUnM,EAAKvD,QAEf,IAAC2P,GAAI,EAAK,IAAEC,GAAI,GAASH,GAAW,GAEpCI,EAAWtM,EAAKlC,KAAI,CAACC,EAAGxE,EAAGiH,IAAM,cAAc6L,GAAO9S,GAAKiH,EAAE/D,OAAS,EAAI,MAAQ,UAAUsB,EAAED,KAAImB,GAAKyG,EAAIzG,EAAE2D,mBAAkB,MAAQvD,KAAK,eAAcA,KAAK,IAE1J9F,EAAI,EAAGA,EAAIyG,EAAKvD,OAAQlD,IAChC,KAAMyG,EAAKzG,GAAGkD,QAAQuD,EAAKzG,GAAGgT,MAE/B,MAAO,WAAW9Q,SAAW6Q,QAAeF,EAAM,eAAiB,cAAcR,EAAMO,MAAYH,SAAUC,aAActP,MAAQsP,EAAGnO,KAAIC,GAAK,OAAOA,WAAUsB,KAAK,IAAM,mBAAmB4M,gBAG/L,SAASO,WAAW3O,EAAM4O,GACzB,MAAmB,iBAAR5O,EAAyB,MAAMA,QACtCA,aAAgBlB,MAAc,MAAMkB,EAAK,YAAYA,EAAK,SAC3C6H,EAAf+G,EAAmB,UAAmBlM,sBAAsB1C,GAAM2B,aAAY,GAEvE3B,EAAK2B,aAAY,IAG7B,IAAI/D,EAAM,EAENiR,EAAO,SAAUC,QACnB9O,EACA+O,EACA3G,GAED,GAAI2G,EAAUjK,IAAI9E,GACjB,MAAO,CAAC,CACP+G,MAAO,IACPnJ,MAAOA,EACPoR,IAAKD,EAAUxS,IAAIyD,GACnBA,SAIF,GAAIoI,EAAKtD,IAAI9E,GACZ,MAAO,CAAC,CACP+G,MAAO,IACPnJ,MAAOA,EACPoR,IAAK5G,EAAK7L,IAAIyD,GACdA,SAIF,GAAIA,aAAgB,UAAW,CAC9B,IAAIiP,EAAe,GACfC,EAAclP,EAAKuF,SAAStF,KAAItE,IACnC,GAAIoT,EAAUjK,IAAInJ,GAAI,OAAOoT,EAAUxS,IAAIZ,GAC3C,GAAIyM,EAAKtD,IAAInJ,GAAI,OAAOyM,EAAK7L,IAAIZ,GAEjC,IAAIkL,EAAQiI,QAAQnT,EAAGoT,EAAW3G,GAElC,OADA6G,EAAeA,EAAajL,OAAO6C,GAC5BA,EAAMA,EAAMjI,OAAS,GAAGhB,OAG5ByB,EAAO,KACP8P,EAAe,GACfC,EAAaL,EAAUxS,IAAIyD,EAAKqF,UAChC+C,EAAK7L,IAAIyD,EAAKqF,aACbrF,EAAKqF,mBAAmB,WAAW+C,EAAKtD,IAAI9E,EAAKqF,QAAQ/C,QACzDjD,EAAOW,EAAKqF,QAAQhG,KAAM+I,EAAK7L,IAAIyD,EAAKqF,QAAQ/C,SAE/C3E,EACyDqC,EAAKqF,mBAD5C,WAAO1H,EAAE1B,MAC3B0B,aAAa,WAAW,EAAAyG,WAAWzG,EAAE2E,MAAQ3E,EAAE2E,IAAIrG,KACrD+D,EAAKqF,SACJ8J,EAAeL,QAAQ9O,EAAKqF,QAAS0J,EAAW3G,IAAO+G,EAAavQ,OAAO,GAAGhB,KAEnF,MAAO,IACHqR,KACAE,EACH,CACCpI,MAAO,IACPnJ,MAAOA,EACPyH,QAAS+J,EACT/P,OACAkG,SAAU2J,EACV3M,QAASvC,EAAKuC,UAGV,GAAIvC,aAAgB,UAAS,CACnC,GAAI+O,EAAUjK,IAAI9E,EAAKsC,KACtB,MAAO,CAAC,CACPyE,MAAO,KACPnJ,MAAOA,EACP2J,OAAQwH,EAAUxS,IAAIyD,EAAKsC,KAC3BjD,KAAMW,EAAKX,KACXW,SAIF,GAAIoI,EAAKtD,IAAI9E,EAAKsC,KACjB,MAAO,CAAC,CACPyE,MAAO,KACPnJ,MAAOA,EACP2J,OAAQa,EAAK7L,IAAIyD,EAAKsC,KACtBjD,KAAMW,EAAKX,KACXW,SAIF,GAAIA,EAAKsC,eAAe,WAAUtC,EAAKsC,IAAIrG,KAC1C,MAAO,CAAC,CACP8K,MAAO,MACPnJ,MAAOA,EACPoC,SAIF,KAAMA,EAAKsC,eAAe,WACzB,MAAO,CAAC,CACPyE,MAAO,KACPnJ,MAAOA,EACPoC,SAIF,IAAIqP,EAAcP,QAAQ9O,EAAKsC,IAAKyM,EAAW3G,GAE/C,MAAO,IACHiH,EACH,CACCtI,MAAO,KACPnJ,MAAOA,EACP2J,OAAQ8H,EAAYA,EAAYzQ,OAAS,GAAGhB,IAC5CyB,KAAMW,EAAKX,KACXW,SAGI,GAAIA,aAAgB,UAC1B,MAAO,CAAC,CACP+G,MAAO,KACPnJ,MAAOA,EACPoC,SAEK,GAAIA,aAAgB,UAAK,CAC/B,GAAIA,aAAgB,WAAUA,EAAK/D,MAAQ+D,GAAQ8N,EAClD,MAAO,CAAC,CACP/G,MAAO,KACPnJ,MAAOA,EACPoC,SAIF,IAAKA,EAAKA,KACT,MAAO,CAAC,CACP+G,MAAO,KACPnJ,MAAOA,EACPoC,SAIFoI,EAAO,IAAIxH,IAAIwH,GAEf,IAAIwB,EAAQhM,EAAM,EAEd0R,EAAS,GAYb,OAVItP,aAAgB,WACnBA,EAAKyC,MAAMgD,SAAQ1B,IAClB,IAAI8C,EAAQiI,QAAQ/K,EAAE/D,KAAM+O,EAAW3G,GACvCkH,EAASA,EAAOtL,OAAO6C,GAEvB,IAAI0I,EAAO1I,EAAMA,EAAMjI,OAAS,GAAGhB,IACnCwK,EAAKvH,IAAIkD,EAAGwL,MAIP,CAAC,CACPxI,MAAO,IACPuI,SACAzI,MAAOiI,QAAQ9O,EAAKA,KAAM+O,EAAW3G,GAGrCrI,OAAQC,EAAKD,OAAOiJ,QACpBpL,IAAK,CAACgM,EAAOhM,KAER,GAAIoC,aAAgB,UAAK,CAC/B+O,EAAY,IAAInO,IAAImO,GACpB,IAAIS,EAAY,GAEZ5F,EAAQhM,EAAM,EAElBoC,EAAKmC,KAAKsD,SAAQ9J,IACjBoT,EAAUlO,IAAIlF,IAAKiC,GACnB4R,EAAUjM,KAAK,CACdwD,MAAO,IACPnJ,MACAoC,KAAMrE,OAIRyM,EAAO,IAAIxH,IAAIwH,GAEXkH,EAAS,GASb,OARAtP,EAAKyC,MAAMgD,SAAQ1B,IAClB,IAAI8C,EAAQiI,QAAQ/K,EAAE/D,KAAM+O,EAAW3G,GACvCkH,EAASA,EAAOtL,OAAO6C,GAEvB,IAAI0I,EAAO1I,EAAMA,EAAMjI,OAAS,GAAGhB,IACnCwK,EAAKvH,IAAIkD,EAAGwL,MAGN,CAAC,CACPxI,MAAO,IACPyI,YACAF,SACAG,WAAYX,QAAQ9O,EAAKqC,MAAO0M,EAAW3G,GAC3CxK,IAAK,CAACgM,EAAOhM,KAER,GAAIoC,aAAgB,UAAW,CACrC,IAAKoI,EAAKtD,IAAI9E,GACb,MAAM3B,MAAS2B,EAAK/D,KAAR,mBAGb,MAAO,CAAC,CACP8K,MAAO,IACPnJ,MAAOA,EACPoR,IAAK5G,EAAK7L,IAAIyD,GACdA,KAAMA,EAAKA,OAIZ,OADAjB,QAAQC,IAAI,mBAAoBgB,GACzB,CAAC,CACP+G,MAAO,IACPnJ,MAAOA,EACPoC,SAnKI,IAACrC,EAzCG,CA+MRmQ,EAAS,IAAIlN,IAAO,IAAIA,KAEvB8O,EAAO,2BAqGX,OApGAA,GAAQ,8BAA8B3B,6CAEtC2B,GAAQ,SAAUC,UAAU9I,EAAO1E,GAClC,OAAO0E,EAAM5G,KAAI6G,IAChB,OAAQA,EAAKC,OACZ,IAAK,IACJ,OAAO4I,UAAU7I,EAAKwI,OAAQnN,EAAK6B,OAAO,CAAC8C,EAAK/G,UAC7C4P,UAAU7I,EAAKD,MAAO1E,EAAK6B,OAAO,CAAC8C,EAAK/G,UAC5C,IAAK,IACJ,IAAI6P,EAAUzN,EAAK6B,OAAO,CAAC,KAEvB1E,EAAM,GAEV,GAA6B,GAAzBwH,EAAK0I,UAAU5Q,OAGlBU,GAAO4O,YACN,GAHepP,MAAMqD,EAAKvD,OAAS,GAAGiR,KAAK,IAG5B,GAAI,GAAI,CAACtB,KAAK,EAAMC,KAAK,SAGzClP,GAAOwH,EAAK0I,UAAUvP,KAAI,CAAC6G,EAAMpL,EAAGiH,IAC5BuL,YACNpH,EAAKlJ,IACLgS,EACAjB,WAAW7H,EAAK9G,MAAM,GACtB,aACA,CAACuO,IAAK7S,GAAKiH,EAAE/D,OAAS,EAAG4P,KAAK,MAE7BhN,KAAK,IAaT,OAVAlC,GAAOqQ,UACN7I,EAAKwI,OACLM,GAGDtQ,GAAOqQ,UACN7I,EAAK2I,WACLG,GAIF,IAAK,IACJ,OAAO1B,YACNpH,EAAKlJ,IACLuE,EACAwM,WAAW7H,EAAK9G,MAAM,GACtB,OAEF,IAAK,IACJ,MAAM3B,MAAM,MACb,IAAK,IACJ,OAAO6P,YACNpH,EAAKlJ,IACLuE,EACAwM,WAAW7H,EAAK9G,MAAM,GACtB,CAAC6N,EAASc,WAAW7H,EAAKkI,OAE5B,IAAK,KACL,IAAK,MACJ,OAAOd,YACNpH,EAAKlJ,IACLuE,EACAwM,WAAW7H,EAAK9G,MAAM,GACtB,CAAC6N,EAASc,WAAW7H,EAAK9G,QAE5B,IAAK,KACJ,OAAOkO,YACNpH,EAAKlJ,IACLuE,EACAwM,WAAW7H,EAAK9G,MAAM,GACtB,CAAC6N,EAAS,GAAGc,WAAW7H,EAAKS,YAAYT,EAAKzH,KAAKY,KAAI0C,GAAKgM,WAAWhM,KAAInB,KAAK,WAElF,IAAK,IACJ,OAAO0M,YACNpH,EAAKlJ,IACLuE,EACAwM,WAAW7H,EAAKvE,SAAS,GACzB,CA7VG,WA6VI,GAAGoM,WAAW7H,EAAKzB,WAAWyB,EAAKzH,KAAO,KAAOyH,EAAKzH,KAAKY,KAAI0C,GAAKgM,WAAWhM,KAAInB,KAAK,MAAQ,IAAM,OAAOsF,EAAKvB,SAAStF,KAAI0C,GAAKgM,WAAWhM,KAAInB,KAAK,WAEjK,IAAK,KACJ,OAAO0M,YACNpH,EAAKlJ,IACLuE,EACAwM,WAAW7H,EAAK9G,MAAM,GACtB,iCAEF,QACC,OAAOkO,YACNpH,EAAKlJ,IACLuE,EACA,gBAAgB2E,EAAKC,MACrB,QAGDvF,KAAK,IA7FD,CA8FLqN,EAAK,GAAGS,OAAOtL,OAAO6K,EAAK,GAAGhI,OAAQ,IAEzC6I,GAAQ","file":"math.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"math\"] = factory();\n\telse\n\t\troot[\"math\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","import Scope from '../Scope';\r\n\r\nvar ctr = 0;\r\n\r\nexport type Precedence = boolean | number | [number, number];\r\n\r\nexport default abstract class Node {\r\n\tpublic readonly _id: number;\r\n\r\n\tpublic readonly doc: string;\r\n\tpublic readonly tex: string;\r\n\tpublic precedence: Precedence;\r\n\r\n\tpublic static readonly PREC_FUNEXPR = 1000;\r\n\tpublic static readonly PREC_COMMA = 1000;\r\n\tpublic static readonly PREC_COLONEQQ = 100000;\r\n\r\n\tconstructor (scope: Scope, doc: string, tex: string) {\r\n\t\tthis._id = ++ctr;\r\n\t\tthis.doc = doc;\r\n\t\tthis.tex = tex;\r\n\t}\r\n\r\n\tpublic toString() {\r\n\t\treturn this.toIndentedString(0);\r\n\t}\r\n\r\n\tpublic abstract toIndentedString(indent: number, root?: boolean): string;\r\n\tpublic abstract toTeXString(prec?: Precedence, root?: boolean): string;\r\n\r\n\tpublic static error(message: string, scope: Scope) {\r\n\t\tif (scope) {\r\n\t\t\treturn scope.error(message);\r\n\t\t} else {\r\n\t\t\treturn new Error(message);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static escapeTeX(s) {\r\n\t\treturn s.replace(/&|%|\\$|#|_|{|}|~|\\^|\\\\/g, m => ({\r\n\t\t\t'&': '\\\\&', '%': '\\\\%', '$': '\\\\$',\r\n\t\t\t'#': '\\\\#', '_': '\\\\_', '{': '\\\\{',\r\n\t\t\t'}': '\\\\}',\r\n\t\t\t'~': '\\\\textasciitilde',\r\n\t\t\t'^': '\\\\textasciicircum',\r\n\t\t\t'\\\\': '\\\\textbackslash'\r\n\t\t})[m]);\r\n\t}\r\n\r\n\tpublic static parseTeX(tex) {\r\n\t\tvar precedence: Precedence = false;\r\n\r\n\t\tvar code = tex.replace(/^!<prec=([0-9]+)>/, (match, g1) => {\r\n\t\t\tprecedence = g1 * 1;\r\n\t\t\treturn '';\r\n\t\t});\r\n\r\n\t\treturn {precedence, code};\r\n\t}\r\n\r\n\tpublic isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\r\n\t\tfor (var i = 0; i < hyps.length; i++) {\r\n\t\t\tif (hyps[i] == this) return true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/*\r\n\t* false corresponds to 0.\r\n\t* true corresponds to w * 2.\r\n\t*/\r\n\tpublic static normalizePrecedence(prec: Precedence) {\r\n\t\tif (prec === false) return [0, 0];\r\n\t\tif (prec === true) return [2, 0];\r\n\t\tif (typeof prec == 'number') return [0, prec];\r\n\r\n\t\tif (!(prec instanceof Array && prec.length == 2)) {\r\n\t\t\tconsole.log(prec);\r\n\t\t\tthrow Error('wut');\r\n\t\t}\r\n\r\n\t\treturn prec;\r\n\t}\r\n\r\n\tpublic shouldConsolidate(prec: Precedence) {\r\n\t\tvar my = Node.normalizePrecedence(this.precedence || false),\r\n\t\t\tyour = Node.normalizePrecedence(prec || false);\r\n\r\n\t\tif (my[0] == 0 && my[1] == 0) return false;\r\n\r\n\t\treturn !(my[0] < your[0] || my[0] == your[0] && my[1] < your[1]);\r\n\t}\r\n\r\n\tpublic makeTeX(id, args, prec) {\r\n\t\targs = args || [];\r\n\t\tprec = prec || false;\r\n\t\t\r\n\t\tvar ret = this.tex;\r\n\r\n\t\tif (this.shouldConsolidate(prec)) {\r\n\t\t\tret = '\\\\left(' + ret + '\\\\right)';\r\n\t\t}\r\n\r\n\t\treturn ret.replace(/#([0-9]+)/g, (match, g1) => {\r\n\t\t\treturn args[g1 * 1 - 1] || `\\\\texttt{\\\\textcolor{red}{\\\\#${g1}}}`;\r\n\t\t}).replace(/<<(.+?)>>/, (_match, g1) => {\r\n\t\t\treturn `\\\\href{#${id}}{${g1}}`;\r\n\t\t});\r\n\t}\r\n}","import Expr0 from './Expr0';\r\nimport Node from './Node';\r\nimport ObjectType from './ObjectType';\r\nimport MetaType from './MetaType';\r\nimport Scope from '../Scope';\r\nimport Variable from './Variable';\r\nimport Metaexpr from './Metaexpr';\r\nimport Nameable from './Nameable';\r\nimport Type from './Type';\r\n\r\ninterface FunArgumentType {\r\n\tdoc?: string;\r\n\ttex?: string;\r\n\tannotations: string[];\r\n\ttype?: Type;\r\n\tname?: string;\r\n\tparams: Variable[];\r\n\texpr?: Metaexpr;\r\n}\r\n\r\nexport default abstract class Fun extends Expr0 implements Nameable {\r\n\r\n\tpublic readonly annotations: string[];\r\n\tpublic readonly name: string;\r\n\tpublic readonly params: Variable[];\r\n\tpublic readonly expr: Metaexpr;\r\n\r\n\t/*\r\n\t * name, expr 중 하나 이상 있어야 하고 type, expr 중\r\n\t * 한 개만 있어야 한다.\r\n\t */\r\n\tconstructor ({doc, tex, annotations, type, /* nullable */ name, params, expr}: FunArgumentType, scope?: Scope) {\r\n\t\tif (!name && !expr)\r\n\t\t\tthrow Node.error('Anonymous fun cannot be primitive', scope);\r\n\r\n\t\tif (type && expr)\r\n\t\t\tthrow Node.error('no', scope);\r\n\r\n\t\tif (!type && !expr)\r\n\t\t\tthrow Node.error('Cannot guess the type of a primitive fun', scope);\r\n\r\n\t\tif (name !== null && typeof name != 'string')\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\r\n\t\tif (!(params instanceof Array)\r\n\t\t\t\t|| params.map(e => e instanceof Variable).some(e => !e))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\r\n\t\tif (expr !== null && !(expr instanceof Node))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\r\n\t\tvar precedence = false;\r\n\r\n\t\tif (tex) {\r\n\t\t\tvar parsed = Node.parseTeX(tex);\r\n\t\t\tprecedence = parsed.precedence;\r\n\t\t\ttex = parsed.code;\r\n\t\t} else {\r\n\t\t\ttex = null;\r\n\t\t}\r\n\t\t\r\n\t\tsuper(\r\n\t\t\tscope, doc, tex,\r\n\t\t\ttype || new (expr.type instanceof ObjectType ? ObjectType : MetaType)({\r\n\t\t\t\tfunctional: true,\r\n\t\t\t\tfrom: params.map(variable => variable.type),\r\n\t\t\t\tto: expr.type as any\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tthis.annotations = annotations;\r\n\t\tthis.precedence = precedence;\r\n\t\tthis.name = name;\r\n\t\tthis.params = params;\r\n\t\tthis.expr = expr;\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn super.isProved(hyps)\r\n\t\t\t|| this.expr && this.expr.isProved(hyps);\r\n\t}\r\n\r\n\tpublic call(args: Expr0[]): Metaexpr {\r\n\t\tif (!this.expr) {\r\n\t\t\tthrow Error('Cannot call a callable without a body');\r\n\t\t}\r\n\r\n\t\tif (this.params.length != args.length) {\r\n\t\t\tthrow Error('Illegal arguments length');\r\n\t\t}\r\n\r\n\t\tvar map: Map<Variable, Expr0> = new Map();\r\n\r\n\t\tfor (var i = 0; i < this.params.length; i++) {\r\n\t\t\tmap.set(this.params[i], args[i]);\r\n\t\t}\r\n\r\n\t\treturn this.expr.substitute(map);\r\n\t}\r\n}","import Nameable from './Nameable';\r\nimport Node from './Node';\r\nimport Type from './Type';\r\n\r\nexport default class ObjectType extends Type implements Nameable {\r\n\r\n\tpublic readonly isBaseType: boolean;\r\n\tpublic readonly name: string;\r\n\tpublic readonly origin: ObjectType;\r\n\tpublic readonly from: ObjectType[];\r\n\tpublic readonly to: ObjectType;\r\n\r\n\tconstructor (o) {\r\n\t\tif (o.origin) {\r\n\t\t\tsuper(null, o.doc, null, o.origin.isFunctional);\r\n\r\n\t\t\tthis.isBaseType = !!o.base;\r\n\r\n\t\t\tif (typeof o.name != 'string')\r\n\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\r\n\t\t\tthis.name = o.name;\r\n\r\n\t\t\tif (!(o.origin instanceof ObjectType))\r\n\t\t\t\tthrow Node.error('!(o.origin instanceof ObjectType)', null);\r\n\r\n\t\t\tthis.origin = o.origin;\r\n\t\t} else {\r\n\t\t\tsuper(null, o.doc, null, o.functional);\r\n\r\n\t\t\tthis.isBaseType = !!o.base;\r\n\r\n\t\t\tif (typeof o.functional != 'boolean')\r\n\t\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\r\n\r\n\t\t\tif (!o.functional) {\r\n\t\t\t\tif (typeof o.name != 'string')\r\n\t\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\r\n\t\t\t\tthis.name = o.name;\r\n\t\t\t} else {\r\n\t\t\t\tif (o.from.map(f => f instanceof ObjectType).some(e => !e))\r\n\t\t\t\t\tthrow Node.error('o.from.map(f => f instanceof ObjectType).some(e => !e)', null);\r\n\t\t\t\tif (!(o.to instanceof ObjectType))\r\n\t\t\t\t\tthrow Node.error('!(o.to instanceof ObjectType)', null);\r\n\r\n\t\t\t\tthis.from = o.from;\r\n\t\t\t\tthis.to = o.to;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toSimpleString() {\r\n\t\tif (this.name) return this.name;\r\n\r\n\t\tvar resolved = this.resolve();\r\n\r\n\t\treturn `[${resolved.from.map(e => e.toSimpleString()).join(', ')} -> ${resolved.to.toSimpleString()}]`;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent): string {\r\n\t\tif (this.isSimple) return this.name;\r\n\r\n\t\treturn `${this.name ? this.name + ': ' : ''}[${this.resolve().from.join(', ')} -> ${this.resolve().to}]`;\r\n\t}\r\n\r\n\tpublic toTeXString(root?: boolean) {\r\n\t\tif (this.isSimple) return `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\r\n\r\n\t\tif (!root && this.name) {\r\n\t\t\treturn `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\r\n\t\t}\r\n\r\n\t\treturn `${this.name ? `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}: ` : ''}`\r\n\t\t\t+ `\\\\left[${this.resolve().from.map(e => e.toTeXString()).join(' \\\\times ')}`\r\n\t\t\t+ ` \\\\to ${this.resolve().to.toTeXString()} \\\\right]`;\r\n\t}\r\n\r\n\tpublic resolve(): ObjectType {\r\n\t\treturn this.origin ? this.origin.resolve() : this;\r\n\t}\r\n\r\n\tpublic equals(t: Type): boolean {\r\n\t\tif (!(t instanceof ObjectType)) return false;\r\n\r\n\t\tif (this.origin) return this.origin.equals(t);\r\n\t\tif (t.origin) return this.equals(t.origin);\r\n\r\n\t\tif (this.isSimple != t.isSimple) return false;\r\n\r\n\t\tif (this.isSimple) return this === t;\r\n\r\n\t\tif (this.from.length != t.from.length) return false;\r\n\r\n\t\tfor (var i = 0; i < this.from.length; i++)\r\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\r\n\r\n\t\treturn this.to.equals(t.to);\r\n\t}\r\n}","import Scope from '../Scope';\r\nimport Expr0 from './Expr0';\r\nimport Metaexpr from './Metaexpr';\r\nimport Nameable from './Nameable';\r\nimport Node, {Precedence} from './Node';\r\nimport ObjectType from './ObjectType';\r\n\r\ninterface VariableArgumentType {\r\n\tdoc?: string;\r\n\ttex?: string;\r\n\ttype: ObjectType;\r\n\tname: string;\r\n\tisParam: boolean;\r\n\tguess?: string;\r\n}\r\n\r\nexport default class Variable extends Expr0 implements Nameable {\r\n\t\r\n\tpublic readonly isParam: boolean;\r\n\tpublic readonly guess: string;\r\n\tpublic readonly type: ObjectType;\r\n\tpublic readonly name: string;\r\n\r\n\tconstructor ({doc, tex, type, name, isParam, guess}: VariableArgumentType, scope?: Scope) {\r\n\t\tsuper(scope, doc, tex, type);\r\n\r\n\t\tthis.isParam = !!isParam;\r\n\t\tthis.guess = guess || null;\r\n\r\n\t\tif (typeof name != 'string')\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tpublic isProved(hyps) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps);\r\n\t}\r\n\r\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\r\n\t\treturn map.get(this) || this;\r\n\t}\r\n\r\n\t// pr f\r\n\tpublic toSimpleString() {\r\n\t\treturn this.type.toSimpleString() + ' ' + this.name;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn `${root ? this.type + ' ' : ''}${this.name}<${this._id}>`;\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tvar id = this.isParam ? `id-${this._id}` : `def-${this.name}`;\r\n\r\n\t\tvar tex = this.tex\r\n\t\t\t|| (\r\n\t\t\t\tthis.name.length == 1\r\n\t\t\t\t\t? Node.escapeTeX(this.name)\r\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.name)}}`\r\n\t\t\t);\r\n\t\t\r\n\t\treturn `\\\\href{#${id}}{${tex}}`;\r\n\t}\r\n\r\n\tpublic toTeXStringWithId(prec?: Precedence, root?: boolean): string {\r\n\t\tif (!this.isParam) throw Error('wut');\r\n\r\n\t\tvar id =`id-${this._id}`;\r\n\r\n\t\treturn [\r\n\t\t\t`\\\\htmlId{${id}}{`,\r\n\t\t\tthis.toTeXString(prec, root),\r\n\t\t\t`}`\r\n\t\t].join('');\r\n\t}\r\n}","import Scope from \"../Scope\";\r\nimport Expr0 from \"./Expr0\";\r\nimport Metaexpr from \"./Metaexpr\";\r\nimport MetaType from \"./MetaType\";\r\nimport Nameable from \"./Nameable\";\r\nimport Node, { Precedence } from \"./Node\";\r\nimport ObjectType from \"./ObjectType\";\r\nimport Variable from \"./Variable\";\r\n\r\ninterface $VariableArgumentType {\r\n\tname: string;\r\n\texpr: Metaexpr;\r\n}\r\n\r\nexport default class $Variable extends Metaexpr implements Nameable {\r\n\r\n\tpublic readonly name: string;\r\n\tpublic readonly expr: Metaexpr;\r\n\r\n\tconstructor ({name, expr}: $VariableArgumentType, scope?: Scope) {\r\n\t\tsuper(scope, null, null, expr.type);\r\n\r\n\t\tif (!name || !expr) {\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t}\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.expr = expr;\r\n\t}\r\n\r\n\tpublic isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn super.isProved(hyps)\r\n\t\t\t|| this.expr.isProved(hyps);\r\n\t}\r\n\r\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\r\n\t\treturn this.expr.substitute(map);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn this.name;\r\n\t}\r\n\t\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\treturn `\\\\mathtt{${Node.escapeTeX(this.name)}}`;\r\n\t}\r\n}","import $Variable from \"./nodes/$Variable\";\r\nimport Reduction from \"./nodes/Reduction\";\r\nimport ObjectFun from \"./nodes/ObjectFun\";\r\nimport Schema from \"./nodes/Schema\";\r\nimport Fun from \"./nodes/Fun\";\r\nimport Funcall from \"./nodes/Funcall\";\r\nimport Tee from \"./nodes/Tee\";\r\nimport Variable from \"./nodes/Variable\";\r\nimport ObjectType from \"./nodes/ObjectType\";\r\nimport Metaexpr from \"./nodes/Metaexpr\";\r\nimport MetaType from \"./nodes/MetaType\";\r\n\r\nexport default class ExpressionResolver {\r\n\r\n\t/* public static expandCallOnce(expr: Funcall): Metaexpr {\r\n\t\tif (!(expr instanceof Funcall)) {\r\n\t\t\tthrow Error('Illegal type');\r\n\t\t}\r\n\r\n\t\tif (expr.fun instanceof Funcall) {\r\n\t\t\tvar fun = ExpressionResolver.expandCallOnce(expr.fun);\r\n\t\t\treturn new Funcall({\r\n\t\t\t\tfun,\r\n\t\t\t\targs: expr.args\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tvar callee: Metaexpr = expr.fun;\r\n\r\n\t\twhile (callee instanceof $Variable) {\r\n\t\t\tcallee = callee.expr;\r\n\t\t}\r\n\r\n\t\tif (!(callee instanceof Fun)) {\r\n\t\t\tthrow Error('Something\\'s wrong');\r\n\t\t}\r\n\r\n\t\tif (!callee.expr) {\r\n\t\t\tthrow Error('Could not expand');\r\n\t\t}\r\n\r\n\t\treturn callee.call(expr.args);\r\n\t} */\r\n\r\n\t// expand0은 하지 않는다.\r\n\tpublic static expandMeta(expr: Metaexpr): Metaexpr {\r\n\t\tif (expr instanceof Tee) {\r\n\t\t\tvar left = expr.left.map(ExpressionResolver.expandMeta);\r\n\t\t\tvar right = ExpressionResolver.expandMeta(expr.right);\r\n\r\n\t\t\treturn new Tee({left, right});\r\n\t\t} else if (expr instanceof Funcall) {\r\n\t\t\tvar fun = ExpressionResolver.expandMeta(expr.fun),\r\n\t\t\t\targs = expr.args;\r\n\t\t\t\r\n\t\t\tif (!(fun instanceof Fun) || !fun.expr || fun.name && !(fun instanceof Schema))\r\n\t\t\t\treturn new Funcall({fun, args});\r\n\r\n\t\t\treturn ExpressionResolver.expandMeta(fun.call(args));\r\n\t\t} else if (expr instanceof Reduction) {\r\n\t\t\treturn ExpressionResolver.expandMeta(expr.reduced);\r\n\t\t} else if (expr instanceof ObjectFun) {\r\n\t\t\tif (!expr.expr) return expr;\r\n\t\t\tif (expr.type instanceof ObjectType && expr.name) return expr;\r\n\r\n\t\t\treturn new ObjectFun({\r\n\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\tname: null,\r\n\t\t\t\tparams: expr.params,\r\n\t\t\t\texpr: ExpressionResolver.expandMeta(expr.expr)\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Schema) {\r\n\t\t\tif (!expr.expr) return expr;\r\n\t\t\tif (expr.type instanceof ObjectType && expr.name) return expr;\r\n\r\n\t\t\treturn new Schema({\r\n\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\taxiomatic: expr.axiomatic,\r\n\t\t\t\tname: null,\r\n\t\t\t\tparams: expr.params,\r\n\t\t\t\tdef$s: expr.def$s,\r\n\t\t\t\texpr: ExpressionResolver.expandMeta(expr.expr)\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Variable) {\r\n\t\t\treturn expr;\r\n\t\t} else if (expr instanceof $Variable) {\r\n\t\t\treturn ExpressionResolver.expandMeta(expr.expr);\r\n\t\t} else {\r\n\t\t\tconsole.log(expr);\r\n\t\t\tthrow Error('Unknown metaexpr');\r\n\t\t}\r\n\t}\r\n\r\n\t// expr0의 이름 없는 funcall까지 풀음.\r\n\tpublic static expandMetaAndFuncalls(expr: Metaexpr): Metaexpr {\r\n\t\tif (expr instanceof Tee) {\r\n\t\t\tvar left = expr.left.map(ExpressionResolver.expandMetaAndFuncalls);\r\n\t\t\tvar right = ExpressionResolver.expandMetaAndFuncalls(expr.right);\r\n\r\n\t\t\treturn new Tee({left, right});\r\n\t\t} else if (expr instanceof ObjectFun) {\r\n\t\t\tif (!expr.expr) return expr;\r\n\t\t\tif (expr.type instanceof ObjectType && expr.name) return expr;\r\n\r\n\t\t\treturn new ObjectFun({\r\n\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\tname: null,\r\n\t\t\t\tparams: expr.params,\r\n\t\t\t\texpr: ExpressionResolver.expandMetaAndFuncalls(expr.expr)\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Schema) {\r\n\t\t\tif (!expr.expr) return expr;\r\n\t\t\tif (expr.type instanceof ObjectType && expr.name) return expr;\r\n\r\n\t\t\treturn new Schema({\r\n\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\taxiomatic: expr.axiomatic,\r\n\t\t\t\tname: null,\r\n\t\t\t\tparams: expr.params,\r\n\t\t\t\tdef$s: expr.def$s,\r\n\t\t\t\texpr: ExpressionResolver.expandMetaAndFuncalls(expr.expr)\r\n\t\t\t});\r\n\t\t} else if (expr instanceof Funcall) {\r\n\t\t\tvar fun = ExpressionResolver.expandMetaAndFuncalls(expr.fun);\r\n\t\t\tvar args = expr.args.map(ExpressionResolver.expandMetaAndFuncalls);\r\n\r\n\t\t\tif (!(fun instanceof Fun) || !fun.expr || fun.name && !(fun instanceof Schema))\r\n\t\t\t\treturn new Funcall({fun, args});\r\n\r\n\t\t\treturn ExpressionResolver.expandMetaAndFuncalls(fun.call(args));\r\n\t\t} else if (expr instanceof Reduction) {\r\n\t\t\treturn ExpressionResolver.expandMetaAndFuncalls(expr.reduced);\r\n\t\t} else if (expr instanceof Variable) {\r\n\t\t\treturn expr;\r\n\t\t} else if (expr instanceof $Variable) {\r\n\t\t\treturn ExpressionResolver.expandMetaAndFuncalls(expr.expr);\r\n\t\t} else {\r\n\t\t\tconsole.log(expr);\r\n\t\t\tthrow Error('Unknown metaexpr');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static nequalscall = 0;\r\n\tpublic static nequalstrue = 0;\r\n\tpublic static nrecursecall = 0;\r\n\tpublic static nrecursetrue = 0;\r\n\r\n\t/*\r\n\t * 스펙 참조.\r\n\t */\r\n\tpublic static equals(a: Metaexpr, b: Metaexpr) {\r\n\t\tfunction recurse(a: Metaexpr, b: Metaexpr, depth: number) {\r\n\t\t\tif (a == b) return true;\r\n\r\n\t\t\tif (!a.type.equals(b.type)) return false;\r\n\r\n\t\t\tif (a instanceof Reduction) {\r\n\t\t\t\treturn recurseWrap(a.reduced, b, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (b instanceof Reduction) {\r\n\t\t\t\treturn recurseWrap(a, b.reduced, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (a instanceof $Variable) {\r\n\t\t\t\treturn recurseWrap(a.expr, b, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (b instanceof $Variable) {\r\n\t\t\t\treturn recurseWrap(a, b.expr, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (a instanceof Funcall && b instanceof Funcall) {\r\n\t\t\t\tif (a.fun instanceof Funcall) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\ta.expandOnce(), b, depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (b.fun instanceof Funcall) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\ta, b.expandOnce(), depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar aHasFunExpr = (a.fun instanceof Fun) && a.fun.expr,\r\n\t\t\t\t\tbHasFunExpr = (b.fun instanceof Fun) && b.fun.expr;\r\n\r\n\t\t\t\tif (a.fun == b.fun || !aHasFunExpr && !bHasFunExpr) {\r\n\t\t\t\t\tif (a.fun != b.fun) return false;\r\n\r\n\t\t\t\t\tif (!aHasFunExpr && !bHasFunExpr) {\r\n\t\t\t\t\t\tfor (var i = 0; i < a.args.length; i++) {\r\n\t\t\t\t\t\t\tif (!recurseWrap(a.args[i], b.args[i], depth + 1)) return false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (a.args.every((_, i) => {\r\n\t\t\t\t\t\treturn recurseWrap(a.args[i], (b as Funcall).args[i], depth + 1);\r\n\t\t\t\t\t})) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (aHasFunExpr) {\r\n\t\t\t\t\treturn recurseWrap(a.expandOnce(), b, depth + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recurseWrap(a, b.expandOnce(), depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (a instanceof Funcall) {\r\n\t\t\t\tif (a.fun instanceof Funcall) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\ta.expandOnce(), b, depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!(a.fun instanceof Fun && a.fun.expr)) return false;\r\n\r\n\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\ta.expandOnce(), b, depth + 1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (b instanceof Funcall) {\r\n\t\t\t\tif (b.fun instanceof Funcall) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\ta, b.expandOnce(), depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!(b.fun instanceof Fun && b.fun.expr)) return false;\r\n\r\n\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\ta, b.expandOnce(), depth + 1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (a instanceof Tee) {\r\n\t\t\t\tif (!(b instanceof Tee)) {\r\n\t\t\t\t\tthrow Error('Assertion failed');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (var i = 0; i < a.left.length; i++) {\r\n\t\t\t\t\tif (!recurseWrap(a.left[i], b.left[i], depth + 1)) return false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recurseWrap(a.right, b.right, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (a.type.isFunctional) {\r\n\t\t\t\tvar placeholders = [];\r\n\t\t\t\tvar len = (a.type.resolve() as ObjectType | MetaType).from.length;\r\n\r\n\t\t\t\tfor (var i = 0; i < len; i++) {\r\n\t\t\t\t\tplaceholders.push(new Variable({\r\n\t\t\t\t\t\tisParam: true,\r\n\t\t\t\t\t\ttype: (a.type.resolve() as ObjectType | MetaType).from[i],\r\n\t\t\t\t\t\tname: '$' + i\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\tnew Funcall({\r\n\t\t\t\t\t\tfun: a,\r\n\t\t\t\t\t\targs: placeholders\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tnew Funcall({\r\n\t\t\t\t\t\tfun: b,\r\n\t\t\t\t\t\targs: placeholders\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tdepth + 1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar recurseWrap = recurse;\r\n\r\n\t\t// function recurseWrap(a, b, depth) {\r\n\t\t// \tER.nrecursecall++;\r\n\r\n\t\t// \tconsole.log(`depth ${depth}\\n${a}\\n\\n${b}`);\r\n\t\t// \tvar ret = recurse(a, b, depth);\r\n\t\t// \tconsole.log(`depth ${depth} → ${ret}`);\r\n\r\n\t\t// \tif (ret) ER.nrecursetrue++;\r\n\r\n\t\t// \treturn ret;\r\n\t\t// }\r\n\r\n\t\tExpressionResolver.nequalscall++;\r\n\t\tvar ret = recurseWrap(a, b, 0);\r\n\t\tif (ret) ExpressionResolver.nequalstrue++;\r\n\t\treturn ret;\r\n\t}\r\n}","import Scope from \"../Scope\";\r\nimport Expr0 from \"./Expr0\";\r\nimport Node from \"./Node\";\r\nimport Type from \"./Type\";\r\nimport Variable from \"./Variable\";\r\n\r\nexport default abstract class Metaexpr extends Node {\r\n\tpublic readonly type: Type;\r\n\r\n\tconstructor(scope: Scope, doc: string, tex: string, type: Type) {\r\n\t\tsuper(scope, doc, tex);\r\n\r\n\t\tif (!type) throw Node.error('Assertion failed', scope);\r\n\r\n\t\tthis.type = type;\r\n\t}\r\n\r\n\tpublic abstract substitute(map: Map<Variable, Expr0>): Metaexpr;\r\n\r\n\tpublic equals(obj: Metaexpr): boolean {\r\n\t\treturn this === obj;\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport MetaType from './MetaType';\r\nimport ExpressionResolver from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport $Variable from './$Variable';\r\nimport ObjectType from './ObjectType';\r\nimport Metaexpr from './Metaexpr';\r\nimport Expr0 from './Expr0';\r\nimport Variable from './Variable';\r\n\r\ninterface TeeArgumentType {\r\n\tleft: Metaexpr[];\r\n\tdef$s?: $Variable[];\r\n\tright: Metaexpr;\r\n}\r\n\r\nexport default class Tee extends Metaexpr {\r\n\r\n\tpublic readonly left;\r\n\tpublic readonly def$s: $Variable[];\r\n\tpublic readonly right;\r\n\r\n\tconstructor ({left, def$s, right}: TeeArgumentType, scope?: Scope) {\r\n\t\tif (!(left instanceof Array\r\n\t\t\t\t&& left.every(l => {\r\n\t\t\t\t\treturn l.type instanceof ObjectType\r\n\t\t\t\t\t\t|| l.type instanceof MetaType;\r\n\t\t\t\t}))) {\r\n\t\t\tconsole.log(left);\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t}\r\n\r\n\t\tif (def$s && !(def$s instanceof Array && def$s.every($ => $ instanceof $Variable)))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\r\n\t\tif (!(right.type instanceof ObjectType || right.type instanceof MetaType)) {\r\n\t\t\tconsole.log(right);\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t}\r\n\r\n\t\tif (right.type.isFunctional) {\r\n\t\t\tthrow Node.error('RHS of a rule cannot be a schema', scope);\r\n\t\t}\r\n\r\n\t\tsuper(scope, null, null, new MetaType({\r\n\t\t\tfunctional: false,\r\n\t\t\tleft: left.map(e => e.type),\r\n\t\t\tright: right.type\r\n\t\t}));\r\n\r\n\t\tthis.left = left;\r\n\t\tthis.def$s = def$s || [];\r\n\t\tthis.right = right;\r\n\t\tthis.precedence = Node.PREC_COMMA;\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps) || this.right.isProved(hyps.concat(this.left));\r\n\t}\r\n\r\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\r\n\t\tvar left = this.left.map(e => e.substitute(map));\r\n\t\tvar right = this.right.substitute(map);\r\n\r\n\t\treturn new Tee({\r\n\t\t\tleft, right\r\n\t\t});\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tif (!this.left.length) {\r\n\t\t\treturn '|- ' + this.right.toIndentedString(indent);\r\n\t\t}\r\n\t\r\n\t\treturn [\r\n\t\t\t'\\t' + this.left.map(e => e.toIndentedString(indent + 1)).join(',\\n' + '\\t'.repeat(indent + 1)),\r\n\t\t\t'|-',\r\n\t\t\t'\\t' + this.right.toIndentedString(indent + 1)\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n\t\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tvar expanded = ExpressionResolver.expandMetaAndFuncalls(this) as Tee;\r\n\r\n\t\treturn [\r\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\r\n\t\t\t`{${expanded.left.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')} \\\\vdash ${expanded.right.toTeXString(Node.PREC_COMMA)}}`,\r\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\r\n\t\t].join('');\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport Variable from './Variable';\r\nimport Scope from '../Scope';\r\nimport Fun from './Fun';\r\nimport Expr0 from './Expr0';\r\nimport Metaexpr from './Metaexpr';\r\nimport { isNameable } from './Nameable';\r\nimport Schema from './Schema';\r\nimport ObjectFun from './ObjectFun';\r\nimport MetaType from './MetaType';\r\nimport ObjectType from './ObjectType';\r\nimport $Variable from './$Variable';\r\n\r\ninterface FuncallArgumentType {\r\n\tfun: Metaexpr;\r\n\targs: Expr0[];\r\n}\r\n\r\nexport default class Funcall extends Expr0 {\r\n\t\r\n\tpublic readonly fun: Metaexpr;\r\n\tpublic readonly args: Expr0[];\r\n\r\n\tconstructor ({fun, args}: FuncallArgumentType, scope?: Scope) {\r\n\t\tif (fun.type.isSimple) {\r\n\t\t\tvar name = isNameable(fun) ? fun.name : '<anonymous>';\r\n\t\t\tthrow Node.error(`${name} is not callable`, scope);\r\n\t\t}\r\n\r\n\t\tif (!(args instanceof Array) || args.map(e => e instanceof Node).some(e => !e))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\t \r\n\t\tvar resolvedType = fun.type.resolve() as ObjectType | MetaType,\r\n\t\t\tparamTypes = resolvedType.from,\r\n\t\t\targTypes = args.map(e => e.type);\r\n\r\n\t\tif (paramTypes.length != argTypes.length)\r\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, scope);\r\n\r\n\t\tfor (var i = 0; i < paramTypes.length; i++) {\r\n\t\t\tif (!paramTypes[i].equals(argTypes[i])) {\r\n\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, scope);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper(scope, null, null, resolvedType.to);\r\n\t\t\r\n\t\tthis.fun = fun;\r\n\t\tthis.args = args;\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps) || this.fun.isProved(hyps);\r\n\t}\r\n\r\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\r\n\t\treturn new Funcall({\r\n\t\t\tfun: this.fun.substitute(map),\r\n\t\t\targs: this.args.map(arg => arg.substitute(map))\r\n\t\t});\r\n\t}\r\n\t\r\n\tpublic expandOnce(): Metaexpr {\r\n\t\tif (this.fun instanceof Funcall) {\r\n\t\t\treturn new Funcall({\r\n\t\t\t\tfun: this.fun.expandOnce(),\r\n\t\t\t\targs: this.args\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tvar callee: Metaexpr = this.fun;\r\n\r\n\t\twhile (callee instanceof $Variable) {\r\n\t\t\tcallee = callee.expr;\r\n\t\t}\r\n\r\n\t\tif (!(callee instanceof Fun)) {\r\n\t\t\tthrow Error('Something\\'s wrong');\r\n\t\t}\r\n\r\n\t\tif (!callee.expr) {\r\n\t\t\tthrow Error('Could not expand');\r\n\t\t}\r\n\r\n\t\treturn callee.call(this.args);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tvar args: any = this.args.map(arg => {\r\n\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\r\n\t\t\treturn arg.toIndentedString(indent + 1);\r\n\t\t});\r\n\t\r\n\t\tif (args.join('').length <= 50) {\r\n\t\t\targs = this.args.map(arg => {\r\n\t\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\r\n\t\t\t\treturn arg.toIndentedString(indent);\r\n\t\t\t});\r\n\t\r\n\t\t\targs = args.join(', ');\r\n\t\t\t\r\n\t\t\tif (this.fun instanceof Schema) {\r\n\t\t\t\treturn `${this.fun.name || `(${this.fun})`}(${args})`;\r\n\t\t\t} else {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t!(this.fun instanceof Fun) || !this.fun.name\r\n\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\r\n\t\t\t\t\t\t: this.fun.name,\r\n\t\t\t\t\t`(${args})`\r\n\t\t\t\t].join('');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\r\n\t\t\t\r\n\t\t\tif (this.fun instanceof Schema) {\r\n\t\t\t\treturn [\r\n\t\t\t\t\tthis.fun.name || `(${this.fun.toIndentedString(indent)})`,\r\n\t\t\t\t\t'(',\r\n\t\t\t\t\t'\\t' + args,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t\t} else {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\t!(this.fun instanceof Fun) || !('name' in this.fun && this.fun.name)\r\n\t\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\r\n\t\t\t\t\t\t\t: this.fun.name\r\n\t\t\t\t\t) + '(',\r\n\t\t\t\t\t'\\t' + args,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tif (this.fun instanceof Schema) {\r\n\t\t\treturn (\r\n\t\t\t\tthis.fun.name\r\n\t\t\t\t\t? `\\\\href{#schema-${this.fun.isProved() ? 'p' : 'np'}-${this.fun.name}}{\\\\textsf{${Node.escapeTeX(this.fun.name)}}}`\r\n\t\t\t\t\t: this.fun.toTeXString(false)\r\n\t\t\t) + `\\\\mathord{\\\\left(${this.args.map(arg => {\r\n\t\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\r\n\t\t\t}).join(', ')}\\\\right)}`;\r\n\t\t}\r\n\r\n\t\tif (this.fun instanceof ObjectFun)\r\n\t\t\treturn this.fun.funcallToTeXString(this.args, prec);\r\n\t\t\r\n\t\tvar args = this.args.map(arg => {\r\n\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t!(isNameable(this.fun) && this.fun.name) || this.fun instanceof Variable\r\n\t\t\t\t? this.fun.toTeXString(false)\r\n\t\t\t\t: this.fun.name.length == 1\r\n\t\t\t\t\t? Node.escapeTeX(this.fun.name)\r\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.fun.name)}}`\r\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\r\n\t}\r\n}","import ExpressionResolver from \"../ExpressionResolver\";\r\nimport Scope from \"../Scope\";\r\nimport $Variable from \"./$Variable\";\r\nimport Expr0 from \"./Expr0\";\r\nimport Fun from \"./Fun\";\r\nimport Metaexpr from \"./Metaexpr\";\r\nimport Node, { Precedence } from \"./Node\";\r\nimport Type from \"./Type\";\r\nimport Variable from \"./Variable\";\r\n\r\ninterface SchemaArgumentType {\r\n\tannotations: string[];\r\n\taxiomatic: boolean;\r\n\ttype?: Type;\r\n\tname?: string;\r\n\tparams?: Variable[];\r\n\tdef$s: $Variable[];\r\n\texpr?: Metaexpr;\r\n\tdoc?: string;\r\n\ttex?: string;\r\n}\r\n\r\nexport default class Schema extends Fun {\r\n\r\n\tpublic readonly axiomatic: boolean;\r\n\tpublic readonly def$s: $Variable[];\r\n\tprivate _isProvedCache: boolean;\r\n\r\n\tconstructor ({doc, tex, annotations, axiomatic, type, /* nullable */ name, params, def$s, expr}: SchemaArgumentType, scope?: Scope) {\r\n\t\tsuper({doc, tex, annotations, type, name, params, expr}, scope);\r\n\t\t\r\n\t\tthis.axiomatic = axiomatic;\r\n\t\tthis.def$s = def$s || [];\r\n\t}\r\n\t\r\n\tpublic isProved(hyps?) {\r\n\t\tif (this._isProvedCache) return true;\r\n\r\n\t\tif (!hyps && typeof this._isProvedCache == 'boolean') {\r\n\t\t\treturn this._isProvedCache;\r\n\t\t}\r\n\r\n\t\tvar cache = !hyps;\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\tvar ret = this.axiomatic || super.isProved(hyps);\r\n\t\tif (cache) this._isProvedCache = ret;\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\r\n\t\tif (!this.expr) return this;\r\n\r\n\t\t// 이름이 있는 것은 최상단에만 선언되므로 치환되어야 할 것을 포함하지 않으므로 확인하지 않는다는 생각이 들어 있다.\r\n\t\tif (this.name) return this;\r\n\r\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\r\n\t\tif (this.params.some(e => map.has(e)))\r\n\t\t\tthrow Error('Parameter collision');\r\n\r\n\t\treturn new Schema({\r\n\t\t\tannotations: this.annotations,\r\n\t\t\taxiomatic: this.axiomatic,\r\n\t\t\tname: null,\r\n\t\t\tparams: this.params,\r\n\t\t\tdef$s: this.def$s,\r\n\t\t\texpr: this.expr.substitute(map)\r\n\t\t});\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn [\r\n\t\t\t`∫ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\r\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\r\n\t\t\t'}'\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n\t\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tif (!this.name) {\r\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\r\n\t\t\treturn [\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\r\n\r\n\t\t\t\t(\r\n\t\t\t\t\tthis.params.length == 1\r\n\t\t\t\t\t? this.params[0].toTeXString(false)\r\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\r\n\t\t\t\t),\r\n\t\t\t\t'\\\\mapsto ',\r\n\t\t\t\tExpressionResolver.expandMetaAndFuncalls(this.expr).toTeXString(false),\r\n\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\r\n\t\t\t].join('');\r\n\t\t}\r\n\t\t\r\n\t\tvar id = `schema-${this.isProved() ? 'p' : 'np'}-${this.name}`;\r\n\t\r\n\t\tif (!root)\r\n\t\t\treturn `\\\\href{#${id}}\\\\mathsf{${Node.escapeTeX(this.name)}}`;\r\n\t\r\n\t\treturn `\\\\href{#${id}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}\\\\mathord{\\\\left(${this.params.map(e => e.toTeXStringWithId(Node.PREC_COMMA) + (e.guess ? `: \\\\texttt{@${e.guess}}` : '')).join(', ')}\\\\right)}:\\\\\\\\\\\\quad`\r\n\t\t\t\t+ ExpressionResolver.expandMetaAndFuncalls(this.expr).toTeXString(true);\r\n\t}\r\n}","import ExpressionResolver from \"../ExpressionResolver\";\r\nimport Scope from \"../Scope\";\r\nimport $Variable from \"./$Variable\";\r\nimport Expr0 from \"./Expr0\";\r\nimport Fun from \"./Fun\";\r\nimport Metaexpr from \"./Metaexpr\";\r\nimport Node, { Precedence } from \"./Node\";\r\nimport Type from \"./Type\";\r\nimport Variable from \"./Variable\";\r\n\r\ninterface ObjectFunArgumentType {\r\n\tannotations: string[];\r\n\ttype?: Type;\r\n\tname?: string;\r\n\tparams?: Variable[];\r\n\texpr?: Expr0;\r\n\tdoc?: string;\r\n\ttex?: string;\r\n}\r\n\r\nexport default class ObjectFun extends Fun {\r\n\t\r\n\tconstructor ({doc, tex, annotations, type, /* nullable */ name, params, expr}: ObjectFunArgumentType, scope?: Scope) {\r\n\t\tsuper({doc, tex, annotations, type, name, params, expr}, scope);\r\n\t}\r\n\r\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\r\n\t\tif (!this.expr) return this;\r\n\r\n\t\t// 이름이 있는 것은 최상단에만 선언되므로 치환되어야 할 것을 포함하지 않으므로 확인하지 않는다는 생각이 들어 있다.\r\n\t\tif (this.name) return this;\r\n\r\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\r\n\t\tif (this.params.some(e => map.has(e)))\r\n\t\t\tthrow Error('Parameter collision');\r\n\r\n\t\treturn new ObjectFun({\r\n\t\t\tannotations: this.annotations,\r\n\t\t\tname: null,\r\n\t\t\tparams: this.params,\r\n\t\t\texpr: this.expr.substitute(map)\r\n\t\t});\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn [\r\n\t\t\t`ƒ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\r\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\r\n\t\t\t'}'\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tif (!this.name) {\r\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\r\n\t\t\treturn [\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\r\n\r\n\t\t\t\t(\r\n\t\t\t\t\tthis.params.length == 1\r\n\t\t\t\t\t? this.params[0].toTeXString(false)\r\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\r\n\t\t\t\t),\r\n\t\t\t\t'\\\\mapsto ',\r\n\t\t\t\tExpressionResolver.expandMetaAndFuncalls(this.expr).toTeXString(false),\r\n\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\r\n\t\t\t].join('');\r\n\t\t}\r\n\r\n\t\tif (!root)\r\n\t\t\treturn `\\\\href{#def-${this.name}}\\\\mathrm{${Node.escapeTeX(this.name)}}`;\r\n\t\r\n\t\tif (!this.expr)\r\n\t\t\treturn this.funcallToTeXString(this.params, prec);\r\n\t\r\n\t\treturn this.funcallToTeXString(this.params, Node.PREC_COLONEQQ)\r\n\t\t\t\t+ `\\\\coloneqq ${this.expr.toTeXString(Node.PREC_COLONEQQ)}`;\r\n\t}\r\n\r\n\tpublic funcallToTeXString(args, prec) {\r\n\t\targs = args.map(arg => {\r\n\t\t\treturn arg.toTeXString(this.tex ? this.precedence : Node.PREC_COMMA);\r\n\t\t});\r\n\t\r\n\t\tif (this.tex) {\r\n\t\t\treturn this.makeTeX('def-' + this.name, args, prec);\r\n\t\t}\r\n\t\r\n\t\treturn (\r\n\t\t\t!this.name\r\n\t\t\t\t? this.toTeXString(false)\r\n\t\t\t\t: `\\\\href{#def-${this.name}}{${this.name.length == 1 ? Node.escapeTeX(this.name) : `\\\\mathrm{${Node.escapeTeX(this.name)}}`}}`\r\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\r\n\t}\r\n}","import Metaexpr from \"./Metaexpr\";\r\n\r\nexport default abstract class Expr0 extends Metaexpr {\r\n\t\r\n}","import Node, { Precedence } from './Node';\r\nimport ObjectType from './ObjectType';\r\nimport Type from './Type';\r\n\r\ninterface SimpleMetaTypeArgumentType {\r\n\tfunctional: false;\r\n\tleft: Type[];\r\n\tright: Type;\r\n}\r\n\r\ninterface FunctionalMetaTypeArgumentType {\r\n\tfunctional: true;\r\n\tfrom: ObjectType[];\r\n\tto: MetaType;\r\n}\r\n\r\ntype MetaTypeArgumentType = SimpleMetaTypeArgumentType | FunctionalMetaTypeArgumentType;\r\n\r\nexport default class MetaType extends Type {\r\n\t\r\n\tpublic readonly left: Type[];\r\n\tpublic readonly right: Type;\r\n\tpublic readonly from: ObjectType[];\r\n\tpublic readonly to: MetaType;\r\n\r\n\tconstructor (o: MetaTypeArgumentType) {\r\n\t\tsuper(null, null, null, o.functional);\r\n\r\n\t\tif (typeof o.functional != 'boolean')\r\n\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\r\n\r\n\t\tif (o.functional == false) {\r\n\t\t\tif (!(o.left instanceof Array))\r\n\t\t\t\tthrow Node.error('left should be an array', null);\r\n\r\n\t\t\tthis.left = o.left;\r\n\t\t\tthis.right = o.right;\r\n\t\t} else {\r\n\t\t\tif (o.from.some(f => !(f instanceof ObjectType)))\r\n\t\t\t\tthrow Node.error('o.from.some(f => !(f instanceof ObjectType))', null);\r\n\t\t\tif (!(o.to instanceof MetaType))\r\n\t\t\t\tthrow Node.error('!(o.to instanceof MetaType)', null);\r\n\r\n\t\t\tif (o.to.isFunctional)\r\n\t\t\t\tthrow Node.error('Functional metatype in functional metatype is not supported', null);\r\n\r\n\t\t\tthis.from = o.from;\r\n\t\t\tthis.to = o.to;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic resolve(): MetaType {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number) {\r\n\t\tif (this.isSimple) return `[${this.left.join(', ')} |- ${this.right}]`;\r\n\r\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tthrow new Error('Method not implemented.');\r\n\t}\r\n\r\n\tpublic equals(t: Type): boolean {\r\n\t\tif (!(t instanceof MetaType)) return false;\r\n\r\n\t\tif (this.isSimple != t.isSimple) return false;\r\n\r\n\t\tif (this.isSimple) {\r\n\t\t\tif (this.left.length != t.left.length) return false;\r\n\r\n\t\t\tfor (let i = 0; i < this.left.length; i++) {\r\n\t\t\t\tif (!this.left[i].equals(t.left[i])) return false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.right.equals(t.right)) return false;\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (this.from.length != t.from.length) return false;\r\n\r\n\t\tfor (let i = 0; i < this.from.length; i++)\r\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\r\n\r\n\t\treturn this.to.equals(t.to);\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport Funcall from './Funcall';\r\nimport ExpressionResolver from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport Tee from './Tee';\r\nimport Fun from './Fun';\r\nimport MetaType from './MetaType';\r\nimport Metaexpr from './Metaexpr';\r\nimport Expr0 from './Expr0';\r\nimport Variable from './Variable';\r\nimport ObjectType from './ObjectType';\r\n\r\ninterface ReductionArgumentType {\r\n\tsubject: Metaexpr;\r\n\tguesses: Expr0[];\r\n\tleftargs: Metaexpr[];\r\n\texpected: Metaexpr;\r\n}\r\n\r\nexport default class Reduction extends Metaexpr {\r\n\t\r\n\tpublic readonly subject: Metaexpr;\r\n\tpublic readonly guesses;\r\n\tpublic readonly leftargs;\r\n\tpublic readonly reduced;\r\n\tpublic readonly type;\r\n\r\n\tconstructor ({subject, guesses, leftargs, expected}: ReductionArgumentType, scope?: Scope) {\r\n\t\tif (guesses) {\r\n\t\t\tlet resolvedType = subject.type.resolve() as ObjectType | MetaType,\r\n\t\t\t\tparamTypes = resolvedType.from,\r\n\t\t\t\targTypes = guesses.map(e => e && e.type);\r\n\r\n\t\t\tif (paramTypes.length != argTypes.length)\r\n\t\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, scope);\r\n\r\n\t\t\tfor (var i = 0; i < paramTypes.length; i++) {\r\n\t\t\t\tif (argTypes[i] && !paramTypes[i].equals(argTypes[i])) {\r\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, scope);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (subject instanceof Fun) {\r\n\t\t\tsubject.params.forEach((p, i) => {\r\n\t\t\t\tif (!(guesses && guesses[i]) && !p.guess) {\r\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} could not be guessed`, scope);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\r\n\t\t\tvar derefs = subject.params.map((p, i) => {\r\n\t\t\t\tif (guesses && guesses[i]) return guesses[i];\r\n\r\n\t\t\t\tvar tee = ExpressionResolver.expandMeta((subject as Fun).expr) as Tee;\r\n\t\r\n\t\t\t\treturn Reduction.query(\r\n\t\t\t\t\tp.guess,\r\n\t\t\t\t\ttee.left,\r\n\t\t\t\t\tleftargs,\r\n\t\t\t\t\ttee.right,\r\n\t\t\t\t\texpected,\r\n\t\t\t\t\tscope\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\r\n\t\t\tsubject = new Funcall({\r\n\t\t\t\tfun: subject,\r\n\t\t\t\targs: derefs,\r\n\t\t\t}, scope);\r\n\t\t} else if (guesses) {\r\n\t\t\tthrow Node.error('Something\\'s wrong', scope);\r\n\t\t}\r\n\t\r\n\t\tif (!(subject.type instanceof MetaType && subject.type.isSimple))\r\n\t\t\tthrow Node.error('Subject is not reducible', scope);\r\n\t\r\n\t\tif (!(leftargs instanceof Array)\r\n\t\t\t\t|| leftargs.map(e => e instanceof Node).some(e => !e))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\r\n\t\tvar paramTypes = subject.type.left,\r\n\t\t\tleftargTypes = leftargs.map(e => e.type);\r\n\r\n\t\tif (paramTypes.length != leftargTypes.length)\r\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${leftargTypes.length}`, scope);\r\n\r\n\t\tfor (let i = 0; i < paramTypes.length; i++) {\r\n\t\t\tif (!paramTypes[i].equals(leftargTypes[i]))\r\n\t\t\t\tthrow Node.error(`Illegal argument type (expected ${paramTypes[i]}): ${leftargTypes[i]}`, scope);\r\n\t\t}\r\n\r\n\t\tsuper(scope, null, null, subject.type.right);\r\n\r\n\t\tthis.subject = subject;\r\n\t\tthis.leftargs = leftargs;\r\n\r\n\t\tvar tee = ExpressionResolver.expandMetaAndFuncalls(subject);\r\n\r\n\t\tif (!(tee instanceof Tee)) {\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < tee.left.length; i++) {\r\n\t\t\tif (!ExpressionResolver.equals(tee.left[i], leftargs[i])) {\r\n\t\t\t\tthrow Node.error(`LHS #${i + 1} failed to match:\r\n\r\n--- EXPECTED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(tee.left[i])}\r\n----------------\r\n\r\n--- RECEIVED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(leftargs[i])}\r\n----------------`, scope);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (expected) {\r\n\t\t\tif (!ExpressionResolver.equals(tee.right, expected)) {\r\n\t\t\t\tthrow Node.error(`RHS failed to match:\r\n\r\n--- EXPECTED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(tee.right)}\r\n----------------\r\n\r\n--- RECEIVED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(expected)}\r\n----------------`, scope);\r\n\t\t\t}\r\n\r\n\t\t\tthis.reduced = expected;\r\n\t\t} else {\r\n\t\t\tthis.reduced = tee.right;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn super.isProved(hyps)\r\n\t\t\t|| this.subject.isProved(hyps)\r\n\t\t\t\t&& this.leftargs.every(l => l.isProved(hyps));\r\n\t}\r\n\r\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\r\n\t\treturn this.reduced.substitute(map);\r\n\t}\r\n\r\n\tpublic static query(guess, left, leftargs, right, expected, scope: Scope) {\r\n\t\tif (guess.length == 0) throw Node.error('wut', scope);\r\n\r\n\t\tvar lef, ret;\r\n\r\n\t\tif (guess[0] == 'r') {\r\n\t\t\tif (!expected) {\r\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t}\r\n\r\n\t\t\tlef = right;\r\n\t\t\tret = expected;\r\n\t\t} else {\r\n\t\t\tif (!(1 <= guess[0] * 1 && guess[0] * 1 <= leftargs.length))\r\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent index out of range`, scope);\r\n\r\n\t\t\tlef = left[guess[0] * 1 - 1];\r\n\t\t\tret = leftargs[guess[0] * 1 - 1];\r\n\t\t}\r\n\r\n\t\treturn (function recurse(guess, lef: Metaexpr, node: Metaexpr, ptr) {\r\n\t\t\tnode = ExpressionResolver.expandMetaAndFuncalls(node);\r\n\t\t\t\r\n\t\t\tif (guess.length <= ptr) return node;\r\n\r\n\t\t\tif (/[0-9]/.test(guess[ptr])) {\r\n\t\t\t\tvar n = guess[ptr] * 1;\r\n\r\n\t\t\t\tif (lef instanceof Tee && node instanceof Tee) {\r\n\t\t\t\t\tif (lef.left.length != node.left.length) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent length mismatch`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!(1 <= n && n <= node.left.length)) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent index out of range`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn recurse(guess, lef.left[n - 1], node.left[n - 1], ptr + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tif (!(lef instanceof Funcall) || !(node instanceof Funcall)) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (ExpressionResolver.equals(lef.fun, node.fun)) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!(node.fun instanceof Fun && node.fun.expr)) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnode = node.expandOnce();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!node.args || !(1 <= n && n <= node.args.length))\r\n\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\r\n\t\t\t\treturn recurse(guess, lef.args[n - 1], node.args[n - 1], ptr + 1);\r\n\t\t\t} else if (guess[ptr] == 'r') {\r\n\t\t\t\tif (lef instanceof Tee && node instanceof Tee) {\r\n\t\t\t\t\treturn recurse(guess, lef.right, node.right, ptr + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t}\r\n\r\n\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t})(guess, lef, ret, 1);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tvar leftargs = this.leftargs.map(arg => {\r\n\t\t\treturn arg.toIndentedString(indent + 1);\r\n\t\t});\r\n\t\r\n\t\tif (leftargs.join('').length <= 50) {\r\n\t\t\tleftargs = this.leftargs.map(arg => {\r\n\t\t\t\treturn arg.toIndentedString(indent);\r\n\t\t\t});\r\n\t\r\n\t\t\tleftargs = leftargs.join(', ');\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\r\n\t\t\t\tleftargs,\r\n\t\t\t\t']'\r\n\t\t\t].join('');\r\n\t\t}\r\n\t\telse {\r\n\t\t\tleftargs = leftargs.join(',\\n' + '\\t'.repeat(indent + 1));\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\r\n\t\t\t\t'\\t' + leftargs,\r\n\t\t\t\t']'\r\n\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\treturn `${this.subject.toTeXString(false)}[${this.leftargs.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}]`;\r\n\t}\r\n}","import Scope from \"../Scope\";\r\nimport Node from \"./Node\";\r\n\r\nexport default abstract class Type extends Node {\r\n\tpublic readonly isFunctional: boolean;\r\n\tpublic readonly isSimple: boolean;\r\n\t\r\n\tpublic abstract equals(t: Type): boolean;\r\n\r\n\tconstructor (scope: Scope, doc: string, tex: string, isFunctional: boolean) {\r\n\t\tsuper(scope, doc, tex);\r\n\t\tthis.isFunctional = isFunctional;\r\n\t\tthis.isSimple = !isFunctional;\r\n\t}\r\n\r\n\tpublic abstract resolve(): Type;\r\n}","export default interface Nameable {\r\n\tname: string;\r\n}\r\n\r\nexport function isNameable(obj: object): obj is Nameable {\r\n\treturn 'name' in obj;\r\n}","var grammar;\r\n\r\nif (process.env.__webpack__) {\r\n\tgrammar = require('raw-loader!./grammar.pegjs').default;\r\n} else {\r\n\tvar fs = require('fs');\r\n\tvar path = require('path');\r\n\r\n\tgrammar = fs.readFileSync(path.join(__dirname, 'grammar.pegjs'), 'utf-8');\r\n}\r\n\r\nvar Program = require('./Program').default;\r\n\r\nmodule.exports = {grammar, Program};","export default \"start =\\r\\n\\t_ lines:(a:line _ {return a})* {return lines}\\r\\n\\r\\nline =\\r\\n\\timport\\r\\n\\t/ typedef\\r\\n\\t/ defv\\r\\n\\t/ defun\\r\\n\\t/ defschema\\r\\n\\r\\nevaluable =\\r\\n\\t_ e:evaluable_internal _ {return e}\\r\\n\\r\\nevaluable_internal =\\r\\n\\ttypedef\\r\\n\\t/ defv\\r\\n\\t/ defun\\r\\n\\t/ defschema\\r\\n\\t/ metaexpr\\r\\n\\r\\nimport =\\r\\n\\t'import' __\\r\\n\\tfilename:ident _\\r\\n\\tsem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'import',\\r\\n\\t\\t\\tfilename,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ntypedef =\\r\\n\\tdoc:(documentation __)?\\r\\n\\tbase:(\\\"base\\\" __)?\\r\\n\\t\\\"type\\\" __\\r\\n\\torigin:(o:ftype __ {return o})?\\r\\n\\tname:ident _ sem\\r\\n\\t{\\r\\n\\t\\tdoc = doc && doc[0];\\r\\n\\t\\t\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'typedef',\\r\\n\\t\\t\\tdoc,\\r\\n\\t\\t\\tbase: !!base,\\r\\n\\t\\t\\torigin,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefv =\\r\\n\\tdoc:(documentation __)? tex:(tex __)? type:type __ name:ident _ sem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefparam =\\r\\n\\ttex:(tex __)? type:type __ name:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tisParam: true,\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefschemaparam =\\r\\n\\ttex:(tex __)? type:type __ name:ident\\r\\n\\tguess:(_ ':' _ '@' g:$[a-z0-9_]+ {return g})?\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tisParam: true,\\r\\n\\t\\t\\tguess,\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n \\r\\ndefun =\\r\\n\\tdoc:(documentation __)?\\r\\n\\ttex:(tex __)?\\r\\n\\trettype:type __\\r\\n\\tname:ident _\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\texpr:(\\r\\n\\t\\t\\\"{\\\" _\\r\\n\\t\\texpr:expr0 _\\r\\n\\t\\t\\\"}\\\"\\r\\n\\t\\t{return expr}\\r\\n\\t\\t/ sem {return null}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defun',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\trettype,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefschema =\\r\\n\\tdoc:(documentation __)?\\r\\n\\tannotations: (a:annotation __ {return a})*\\r\\n\\taxiomatic:(\\\"axiomatic\\\" __)?\\r\\n\\t\\\"schema\\\" __\\r\\n\\tname:ident _\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defschemaparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defschemaparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"{\\\" _\\r\\n\\tdefdollars: (d:defdollar _ {return d})* _\\r\\n\\texpr:metaexpr _\\r\\n\\t\\\"}\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defschema',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\tannotations,\\r\\n\\t\\t\\taxiomatic: !!axiomatic,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\tdef$s: defdollars,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// var[...]\\r\\n// foo(...)[...]\\r\\n// foo[...][...]\\r\\n// (metaexpr)[...]\\r\\n// schema(?, ...)[...]\\r\\nreduction =\\r\\n\\tsubject:(\\r\\n\\t\\tschemacall\\r\\n\\t\\t/ var\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:metaexpr _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\tguesses:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:('?' {return null} / expr0) _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:('?' {return null} / expr0) _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)?\\r\\n\\tleftargs:(\\r\\n\\t\\t\\\"[\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:metaexpr _\\r\\n\\t\\t\\ttail:(\\\";\\\" _ e:metaexpr _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\"]\\\"\\r\\n\\t\\tb:(\\r\\n\\t\\t\\t_ '[' _\\r\\n\\t\\t\\t'as' __\\r\\n\\t\\t\\tm:metaexpr\\r\\n\\t\\t\\t']'\\r\\n\\t\\t\\t{return m}\\r\\n\\t\\t)?\\r\\n\\t\\t{return {a: a || [], b: b || null}}\\r\\n\\t)+\\r\\n\\t{\\r\\n\\t\\tvar ret = {\\r\\n\\t\\t\\t_type: 'reduction',\\r\\n\\t\\t\\tsubject,\\r\\n\\t\\t\\tguesses,\\r\\n\\t\\t\\tleftargs: leftargs[0].a,\\r\\n\\t\\t\\texpected: leftargs[0].b,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfor (var i = 1; i < leftargs.length; i++) {\\r\\n\\t\\t\\tret = {\\r\\n\\t\\t\\t\\t_type: 'reduction',\\r\\n\\t\\t\\t\\tsubject: ret,\\r\\n\\t\\t\\t\\tguesses: null,\\r\\n\\t\\t\\t\\tleftargs: leftargs[i].a,\\r\\n\\t\\t\\t\\texpected: leftargs[i].b,\\r\\n\\t\\t\\t\\tlocation: location()\\r\\n\\t\\t\\t};\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn ret;\\r\\n\\t}\\r\\n\\r\\n// var(...)\\r\\n// (metaexpr)(...)\\r\\nschemacall =\\r\\n\\tschema:(\\r\\n\\t\\tvar\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:metaexpr _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\targs:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:expr0 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'schemacall',\\r\\n\\t\\t\\tschema,\\r\\n\\t\\t\\targs,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// forall(f, g)\\r\\n// (expr0)(f, g)\\r\\nfuncall =\\r\\n\\tschema:(\\r\\n\\t\\tvar\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:expr0 _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\targs:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:expr0 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'funcall',\\r\\n\\t\\t\\tschema,\\r\\n\\t\\t\\targs,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// (T t) => expr0\\r\\n// (T t) => { expr0 }\\r\\nfunexpr =\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"=>\\\" _\\r\\n\\texpr:(\\r\\n\\t\\texpr0\\r\\n\\t\\t/ \\\"{\\\" _ e:expr0 _ \\\"}\\\" {return e}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'funexpr',\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// (T t) => metaexpr_internal_1\\r\\n// (T t) => { $foo = ...; metaexpr }\\r\\nschemaexpr =\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"=>\\\" _\\r\\n\\tfoo:(\\r\\n\\t\\texpr:metaexpr_internal_1\\r\\n\\t\\t{return {defdollars: [], expr}}\\r\\n\\t\\t/ \\\"{\\\" _\\r\\n\\t\\tdefdollars: (d:defdollar _ {return d})* _\\r\\n\\t\\texpr:metaexpr _\\r\\n\\t\\t\\\"}\\\"\\r\\n\\t\\t{return {defdollars, expr}}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'schemaexpr',\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\tdef$s: foo.defdollars,\\r\\n\\t\\t\\texpr: foo.expr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nmetaexpr =\\r\\n\\tleft:(\\r\\n\\t\\tl:(\\r\\n\\t\\t\\thead:metaexpr_internal_1 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:metaexpr_internal_1 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)? {return l || []}\\r\\n\\t)\\r\\n\\t\\\"|-\\\" _\\r\\n\\tdefdollars: (d:defdollar _ {return d})* _\\r\\n\\tright:metaexpr\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'tee',\\r\\n\\t\\t\\tdef$s: defdollars,\\r\\n\\t\\t\\tleft,\\r\\n\\t\\t\\tright,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/ metaexpr_internal_1\\r\\n\\r\\n/*\\r\\n * 다음이 성립하여야 한다.\\r\\n *\\r\\n * - reduction이 schemacall보다 앞이다.\\r\\n * - schemacall이 var보다 앞이다.\\r\\n *\\r\\n */\\r\\nmetaexpr_internal_1 =\\r\\n\\treduction\\r\\n\\t/ schemacall\\r\\n\\t/ var\\r\\n\\t/ schemaexpr\\r\\n\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\" {return e}\\r\\n\\r\\nexpr0 =\\r\\n\\tfuncall\\r\\n\\t/ funexpr\\r\\n\\t/ var\\r\\n\\t/ \\\"(\\\" _ e:expr0 _ \\\")\\\" {return e}\\r\\n\\r\\ndefdollar =\\r\\n\\tname:dollar_ident _\\r\\n\\t'=' _\\r\\n\\texpr:metaexpr _\\r\\n\\tsem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'def$',\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t};\\r\\n\\t}\\r\\n\\r\\ntype =\\r\\n\\tstype\\r\\n\\t/ ftype\\r\\n\\r\\nstype =\\r\\n\\tname:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'type',\\r\\n\\t\\t\\tftype: false,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nftype =\\r\\n\\t\\\"[\\\" _\\r\\n\\tfrom:(\\r\\n\\t\\ttype:type {return [type]}\\r\\n\\t\\t/ (\\r\\n\\t\\t\\ttt:(\\r\\n\\t\\t\\t\\t\\\"(\\\" _\\r\\n\\t\\t\\t\\thead: type\\r\\n\\t\\t\\t\\ttail:(_ \\\",\\\" _ t:type {return t})*\\r\\n\\t\\t\\t\\t_ \\\")\\\"\\r\\n\\t\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t\\t)\\r\\n\\t\\t\\t{return tt}\\r\\n\\t\\t)\\r\\n\\t) _\\r\\n\\t\\\"->\\\" _\\r\\n\\tto:type _\\r\\n\\t\\\"]\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'type',\\r\\n\\t\\t\\tftype: true,\\r\\n\\t\\t\\tfrom,\\r\\n\\t\\t\\tto,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nvar =\\r\\n\\tat_var\\r\\n\\t/ dollar_var\\r\\n\\t/ plain_var\\r\\n\\r\\nat_var =\\r\\n\\tname:at_ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\ttype: '@',\\r\\n\\t\\t\\tname: name.slice(1),\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndollar_var =\\r\\n\\tname:dollar_ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\ttype: '$',\\r\\n\\t\\t\\tname: name,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nplain_var =\\r\\n\\tname:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\ttype: 'normal',\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nkeyword =\\r\\n\\t\\\"as\\\"\\r\\n\\t/ \\\"axiomatic\\\"\\r\\n\\t/ \\\"base\\\"\\r\\n\\t/ \\\"import\\\"\\r\\n\\t/ \\\"schema\\\"\\r\\n\\t/ \\\"type\\\";\\r\\n\\r\\nannotation =\\r\\n\\t'@discouraged'\\r\\n\\t/ '@deprecated'\\r\\n\\r\\nident =\\r\\n\\t$(!(keyword ![a-zA-Z0-9_]) [a-zA-Z0-9_]+)\\r\\n\\r\\nat_ident =\\r\\n\\t$('@' [a-zA-Z0-9_]+)\\r\\n\\r\\ndollar_ident =\\r\\n\\t$('$' [a-zA-Z0-9_]+)\\r\\n\\r\\ndocumentation =\\r\\n\\t'\\\"' b:$(!'\\\"' a:. {return a})* '\\\"' {\\r\\n\\t\\treturn b\\r\\n\\t}\\r\\n\\r\\ntex =\\r\\n\\t'$' b:$(!'$' a:. {return a})* '$' {\\r\\n\\t\\treturn b\\r\\n\\t}\\r\\n\\r\\ncomment =\\r\\n\\t\\\"#\\\" (!newline .)*\\r\\n\\t/ \\\"//\\\" (!newline .)*\\r\\n\\t/ \\\"/*\\\" (!\\\"*/\\\" .)* \\\"*/\\\"\\r\\n\\r\\nnewline =\\r\\n\\t\\\"\\\\r\\\\n\\\" / \\\"\\\\r\\\" / \\\"\\\\n\\\"\\r\\n\\r\\n// optional whitespace\\r\\n_ =\\r\\n\\t([ \\\\t\\\\n\\\\r] / comment)*\\r\\n\\r\\n// mandatory whitespace\\r\\n__ =\\r\\n\\t([ \\\\t\\\\n\\\\r] / comment)+\\r\\n\\r\\nsem =\\r\\n\\t\\\";\\\"\";","import Scope from './Scope';\r\nimport PegInterface from './PegInterface';\r\nimport { EvaluableObject, LineObject } from './PegInterfaceDefinitions';\r\nimport ProofExplorer from './ProofExplorer';\r\n\r\nexport default class Program {\r\n\tpublic scope = new Scope(null);\r\n\tpublic readonly parser;\r\n\tpublic readonly scopeMap: Map<string, Scope> = new Map();\r\n\t\r\n\tconstructor (parser) {\r\n\t\tif (!parser) throw Error('no');\r\n\t\tthis.parser = parser;\r\n\t}\r\n\r\n\tpublic async loadModule(filename, loader): Promise<Scope> {\r\n\t\treturn this.scope = await this.loadModuleInternal(filename, loader);\r\n\t}\r\n\r\n\tprivate async loadModuleInternal(filename, loader): Promise<Scope> {\r\n\t\tif (this.scopeMap.has(filename)) {\r\n\t\t\treturn this.scopeMap.get(filename);\r\n\t\t}\r\n\r\n\t\tvar scope = new Scope(null);\r\n\r\n\t\tvar code = await loader(filename);\r\n\t\tvar parsed = this.parser.parse(code);\r\n\t\tawait this.feed(parsed, scope, loader);\r\n\r\n\t\tthis.scopeMap.set(filename, scope);\r\n\t\treturn scope;\r\n\t}\r\n\r\n\tpublic async feed(lines: LineObject[], scope: Scope=this.scope, loader) {\r\n\t\tfor (var i = 0; i < lines.length; i++) {\r\n\t\t\tvar line = lines[i];\r\n\t\t\t\r\n\t\t\tswitch (line._type) {\r\n\t\t\t\tcase 'import':\r\n\t\t\t\t\tvar scope2 = await this.loadModuleInternal(line.filename, loader);\r\n\t\t\t\t\tscope.importMap.set(line.filename, scope2);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'typedef':\r\n\t\t\t\t\tvar type = PegInterface.type(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasType(type.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Type ${type.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addType(type);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defv':\r\n\t\t\t\t\tvar variable = PegInterface.variable(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasVariable(variable.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Definition ${variable.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addVariable(variable);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defun':\r\n\t\t\t\t\tvar fun = PegInterface.fun(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasVariable(fun.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Definition ${fun.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addFun(fun);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defschema':\r\n\t\t\t\t\tvar schema = PegInterface.schema(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasSchema(schema.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Schema ${schema.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addSchema(schema);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tpublic evaluate(line: EvaluableObject) {\r\n\t\tswitch (line._type) {\r\n\t\t\tcase 'typedef':\r\n\t\t\t\treturn PegInterface.type(line, this.scope);\r\n\t\t\tcase 'defv':\r\n\t\t\t\treturn PegInterface.variable(line, this.scope);\r\n\t\t\tcase 'defun':\r\n\t\t\t\treturn PegInterface.fun(line, this.scope);\r\n\t\t\tcase 'defschema':\r\n\t\t\tcase 'schemaexpr':\r\n\t\t\t\treturn PegInterface.schema(line, this.scope);\r\n\t\t\tcase 'tee':\r\n\t\t\t\treturn PegInterface.tee(line, this.scope);\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn PegInterface.reduction(line, this.scope);\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\treturn PegInterface.schemacall(line, this.scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PegInterface.metavar(line, this.scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getProofExplorer(name: string, ktx) {\r\n\t\treturn ProofExplorer.get(this.scope, name, ktx);\r\n\t}\r\n}","import ObjectType from './nodes/ObjectType';\r\nimport Variable from './nodes/Variable';\r\nimport Fun from './nodes/Fun';\r\nimport StackTrace from './StackTrace';\r\nimport $Variable from './nodes/$Variable';\r\nimport Metaexpr from './nodes/Metaexpr';\r\n\r\nexport type NestedTypeInput = string | NestedTypeInput[];\r\n\r\nexport default class Scope {\r\n\tpublic readonly importMap: Map<string, Scope> = new Map();\r\n\r\n\tpublic readonly typedefMap: Map<string, ObjectType> = new Map();\r\n\tpublic readonly defMap: Map<string, Variable | Fun> = new Map();\r\n\tpublic readonly schemaMap: Map<string, Fun> = new Map();\r\n\tpublic readonly $Map: Map<string, $Variable> = new Map();\r\n\tpublic readonly hypotheses: Metaexpr[] = [];\r\n\r\n\tpublic readonly parent: Scope;\r\n\tpublic readonly root: Scope;\r\n\r\n\tpublic readonly trace: StackTrace;\r\n\tpublic baseType: ObjectType;\r\n\r\n\tconstructor (parent: Scope, trace?: StackTrace) {\r\n\t\tthis.parent = parent;\r\n\t\tthis.root = parent ? parent.root : this;\r\n\r\n\t\tif (trace && !(trace instanceof StackTrace)) {\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tthis.trace = trace || new StackTrace();\r\n\r\n\t\tthis.baseType = parent ? parent.baseType : null;\r\n\t}\r\n\r\n\tpublic extend(type, name, location): Scope {\r\n\t\tvar child = new Scope(this, this.trace.extend(type, name, location));\r\n\t\tthis.hypotheses.forEach(h => child.hypotheses.push(h));\r\n\t\treturn child;\r\n\t}\r\n\r\n\tpublic error(message: string): Error {\r\n\t\treturn this.trace.error(message);\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic hasOwnType(name: NestedTypeInput): boolean {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\treturn this.typedefMap.has(name)\r\n\t\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnType(name));\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\treturn name.map(e => {\r\n\t\t\treturn this.hasOwnType(e);\r\n\t\t}).every(e => e);\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic hasType(name: NestedTypeInput): boolean {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\treturn this.hasOwnType(name)\r\n\t\t\t\t|| (!!this.parent && this.parent.hasType(name));\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\treturn name.map(e => {\r\n\t\t\treturn this.hasType(e);\r\n\t\t}).every(e => e);\r\n\t}\r\n\r\n\tpublic addType(type: ObjectType): ObjectType {\r\n\t\tif (!(type instanceof ObjectType))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (!type.name)\r\n\t\t\tthrow this.error('Something\\'s wrong');\r\n\r\n\t\tif (this.hasOwnType(type.name))\r\n\t\t\tthrow this.error(`Type ${type.name} has already been declared`);\r\n\r\n\t\tif (type.isBaseType) {\r\n\t\t\tif (this.baseType) {\r\n\t\t\t\tthrow this.error('A base type already exists');\r\n\t\t\t}\r\n\r\n\t\t\t(function broadcast(scope: Scope) {\r\n\t\t\t\tscope.baseType = type;\r\n\t\t\t\tif (scope.parent) broadcast(scope.parent);\r\n\t\t\t})(this);\r\n\t\t}\r\n\r\n\t\tthis.typedefMap.set(type.name, type);\r\n\t\treturn type;\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic getType(name: NestedTypeInput): ObjectType {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\tif (!this.hasType(name))\r\n\t\t\t\tthrow this.error(`Type ${name} is not defined`);\r\n\r\n\t\t\treturn this.typedefMap.has(name)\r\n\t\t\t\t? this.typedefMap.get(name)\r\n\t\t\t\t: (!!this.parent && this.parent.getType(name))\r\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\t\treturn s.hasType(name)\r\n\t\t\t\t\t})[0].getType(name);\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\tvar from = name.slice(0, name.length - 1).map(e => {\r\n\t\t\treturn this.getType(e);\r\n\t\t});\r\n\r\n\t\tvar to = this.getType(name[name.length - 1]);\r\n\r\n\t\treturn new ObjectType({\r\n\t\t\tfunctional: true,\r\n\t\t\tfrom,\r\n\t\t\tto\r\n\t\t});\r\n\t}\r\n\r\n\tpublic hasOwnVariable(name: string): boolean {\r\n\t\treturn this.defMap.has(name)\r\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnVariable(name));\r\n\t}\r\n\r\n\tpublic hasVariable(name: string): boolean {\r\n\t\treturn this.hasOwnVariable(name)\r\n\t\t\t|| (!!this.parent && this.parent.hasVariable(name));\r\n\t}\r\n\r\n\tpublic addVariable(variable: Variable | Fun): Variable | Fun {\r\n\t\tif (!(variable instanceof Variable))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwnVariable(variable.name))\r\n\t\t\tthrow this.error(`Definition ${variable.name} has already been declared`);\r\n\r\n\t\tthis.defMap.set(variable.name, variable);\r\n\t\treturn variable;\r\n\t}\r\n\r\n\tpublic addFun(fun: Fun): Fun {\r\n\t\tif (!(fun instanceof Fun))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (!fun.name)\r\n\t\t\tthrow this.error('Cannot add anonymous fun to scope');\r\n\r\n\t\tif (this.hasOwnVariable(fun.name))\r\n\t\t\tthrow this.error(`Definition ${fun.name} has already been declared`);\r\n\r\n\t\tthis.defMap.set(fun.name, fun);\r\n\t\treturn fun;\r\n\t}\r\n\r\n\tpublic getVariable(name: string): Variable | Fun {\r\n\t\tif (!this.hasVariable(name))\r\n\t\t\tthrow this.error(`Definition ${name} is not defined`);\r\n\r\n\t\treturn this.defMap.has(name)\r\n\t\t\t? this.defMap.get(name)\r\n\t\t\t: (!!this.parent && this.parent.getVariable(name))\r\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\treturn s.hasVariable(name)\r\n\t\t\t\t})[0].getVariable(name);\r\n\t}\r\n\r\n\tpublic hasOwnSchema(name: string): boolean {\r\n\t\treturn this.schemaMap.has(name) || this.defMap.has(name)\r\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnSchema(name));\r\n\t}\r\n\r\n\tpublic hasSchema(name: string): boolean {\r\n\t\treturn this.hasOwnSchema(name)\r\n\t\t\t|| (!!this.parent && this.parent.hasSchema(name));\r\n\t}\r\n\r\n\tpublic addSchema(schema: Fun): Fun {\r\n\t\tif (!(schema instanceof Fun))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwnSchema(schema.name))\r\n\t\t\tthrow this.error(`Schema ${schema.name} has already been declared`);\r\n\r\n\t\tthis.schemaMap.set(schema.name, schema);\r\n\t\treturn schema;\r\n\t}\r\n\r\n\tpublic getSchema(name: string): Variable | Fun {\r\n\t\tif (!this.hasSchema(name))\r\n\t\t\tthrow this.error(`Schema ${name} is not defined`);\r\n\r\n\t\treturn this.schemaMap.has(name)\r\n\t\t\t? this.schemaMap.get(name)\r\n\t\t\t: this.defMap.has(name)\r\n\t\t\t\t? this.defMap.get(name)\r\n\t\t\t\t: (!!this.parent && this.parent.getSchema(name))\r\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\t\treturn s.hasSchema(name)\r\n\t\t\t\t\t})[0].getSchema(name);\r\n\t}\r\n\r\n\tpublic hasOwn$(name: string): boolean {\r\n\t\treturn this.$Map.has(name)\r\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwn$(name));\r\n\t}\r\n\r\n\tpublic has$(name: string): boolean {\r\n\t\treturn this.hasOwn$(name)\r\n\t\t\t|| (!!this.parent && this.parent.has$(name));\r\n\t}\r\n\r\n\tpublic add$($: $Variable): $Variable {\r\n\t\tif (!($ instanceof $Variable))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwn$($.name))\r\n\t\t\tthrow this.error(`$ variable ${$.name} has already been declared`);\r\n\r\n\t\tthis.$Map.set($.name, $);\r\n\t\treturn $;\r\n\t}\r\n\r\n\tpublic get$(name: string): $Variable {\r\n\t\tif (!this.has$(name))\r\n\t\t\tthrow this.error(`$ variable ${name} is not defined`);\r\n\r\n\t\treturn this.$Map.has(name)\r\n\t\t\t? this.$Map.get(name)\r\n\t\t\t: (!!this.parent && this.parent.get$(name))\r\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\treturn s.has$(name)\r\n\t\t\t\t})[0].get$(name);\r\n\t}\r\n}","export default class StackTrace {\r\n\tpublic readonly stack: any[];\r\n\r\n\tconstructor (stack?: any[]) {\r\n\t\tthis.stack = stack || [];\r\n\t}\r\n\r\n\tpublic extend(type, name, location): StackTrace {\r\n\t\treturn new StackTrace([[type, name, location]].concat(this.stack));\r\n\t}\r\n\r\n\tpublic error(message: string) {\r\n\t\tvar filename = typeof process != 'undefined' && process.argv[2];\r\n\r\n\t\treturn new Error(\r\n\t\t\tmessage\r\n\t\t\t+ '\\n\\tat '\r\n\t\t\t+ (\r\n\t\t\t\tthis.stack.length\r\n\t\t\t\t\t? this.stack.map(([type, name, location]) => {\r\n\t\t\t\t\t\treturn `${type} ${name || '<anonymous>'} (${filename || '<unknown>'}:${location.start.line}:${location.start.column})`;\r\n\t\t\t\t\t}).join('\\n\\tat ')\r\n\t\t\t\t\t: `<root> (${filename || '<unknown>'}:1:1)`\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*\r\n * PEG.js의 출력과 적절한 클래스 사이를 잇는 인터페이스.\r\n * PEG.js의 출력은 여기에서만 처리해야 한다.\r\n */\r\n\r\nimport ObjectType from './nodes/ObjectType';\r\nimport Variable from './nodes/Variable';\r\nimport Tee from './nodes/Tee';\r\nimport Fun from './nodes/Fun';\r\nimport Funcall from './nodes/Funcall';\r\nimport Reduction from './nodes/Reduction';\r\nimport { Def$Object, DefschemaObject, DefunObject, DefvObject, Expr0Object, FuncallObject, FunexprObject, MetaexprObject, ReductionObject, SchemacallObject, SchemaexprObject, StypeObject, TeeObject, TypedefObject, TypeObject, VarObject } from './PegInterfaceDefinitions';\r\nimport Scope, { NestedTypeInput } from './Scope';\r\nimport $Variable from './nodes/$Variable';\r\nimport Metaexpr from './nodes/Metaexpr';\r\nimport Expr0 from './nodes/Expr0';\r\nimport Schema from './nodes/Schema';\r\nimport ObjectFun from './nodes/ObjectFun';\r\n\r\nfunction typeObjToString(obj: TypeObject): string {\r\n\tif (obj._type != 'type')\r\n\t\tthrow Error('Assertion failed');\r\n\r\n\tif (!obj.ftype) return (obj as StypeObject).name;\r\n\treturn '[' + obj.from.map(typeObjToString).join(', ') + ' -> '\r\n\t\t\t+ typeObjToString(obj.to) + ']';\r\n}\r\n\r\n/*\r\n * Scope#getType이나 Scope#hasType 등의 입력 형태로 바꾼다.\r\n * st\t\t\t\t\t\t-> 'st'\r\n * [cls -> st]\t\t\t\t-> ['cls', 'st']\r\n * [(cls, cls) -> st]\t\t-> ['cls', 'cls', 'st']\r\n * [[cls -> st] -> st]\t\t-> [['cls', 'st'], 'st']\r\n */\r\nfunction typeObjToNestedArr(obj: TypeObject): NestedTypeInput {\r\n\tif (obj._type != 'type')\r\n\t\tthrow Error('Assertion failed');\r\n\r\n\tif (!obj.ftype) {\r\n\t\tobj = obj as StypeObject;\r\n\r\n\t\tif (!obj.name)\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\treturn obj.name;\r\n\t} else {\r\n\t\tif (!obj.from || !obj.to)\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\treturn obj.from.map(typeObjToNestedArr).concat(\r\n\t\t\t[typeObjToNestedArr(obj.to)]\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction varObjToString(obj: VarObject): string {\r\n\tswitch (obj.type) {\r\n\t\tcase '@':\r\n\t\t\treturn `@${obj.name}`;\r\n\t\tcase '$':\r\n\t\t\treturn `${obj.name}`;\r\n\t\tcase 'normal':\r\n\t\t\treturn `${obj.name}`;\r\n\t\tdefault:\r\n\t\t\tthrow Error(`Unknown type ${obj.type}`);\r\n\t}\r\n}\r\n\r\nexport default class PI {\r\n\tpublic static type(obj: TypedefObject, parentScope: Scope): ObjectType {\r\n\t\tif (obj._type != 'typedef')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope: Scope = parentScope.extend('type', obj.name, obj.location);\r\n\r\n\t\tvar origin: ObjectType = obj.origin ? scope.getType(typeObjToNestedArr(obj.origin)) : null;\r\n\r\n\t\tvar name: string = obj.name;\r\n\t\tvar doc: string = obj.doc;\r\n\t\tvar base: boolean = obj.base;\r\n\r\n\t\tif (base && origin) {\r\n\t\t\tthrow scope.error('Base type should not be an alias');\r\n\t\t}\r\n\r\n\t\tif (origin) {\r\n\t\t\treturn new ObjectType({\r\n\t\t\t\tname,\r\n\t\t\t\tdoc,\r\n\t\t\t\tbase,\r\n\t\t\t\torigin\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn new ObjectType({\r\n\t\t\tfunctional: false,\r\n\t\t\tname,\r\n\t\t\tdoc,\r\n\t\t\tbase\r\n\t\t});\r\n\t}\r\n\r\n\tpublic static variable(obj: DefvObject | VarObject, parentScope: Scope): Variable | Fun {\r\n\t\tif (!['defv', 'var'].includes(obj._type)) {\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('variable', obj.name, obj.location);\r\n\r\n\t\tif (obj._type == 'var') {\r\n\t\t\tif (obj.type != 'normal') {\r\n\t\t\t\tthrow scope.error(`Variable type ${obj.type} not allowed`);\r\n\t\t\t}\r\n\r\n\t\t\tif (!scope.hasVariable(obj.name))\r\n\t\t\t\tthrow scope.error(`Undefined identifier ${obj.name}`);\r\n\t\t\treturn scope.getVariable(obj.name);\r\n\t\t}\r\n\r\n\t\tif (!scope.hasType(typeObjToNestedArr(obj.type)))\r\n\t\t\tthrow scope.error(`Type ${typeObjToString(obj.type)} is not defined`);\r\n\r\n\t\tvar type = scope.getType(typeObjToNestedArr(obj.type));\r\n\r\n\t\treturn new Variable({\r\n\t\t\ttype,\r\n\t\t\tisParam: !!obj.isParam,\r\n\t\t\tguess: obj.guess || null,\r\n\t\t\tname: obj.name,\r\n\t\t\tdoc: obj.doc,\r\n\t\t\ttex: obj.tex\r\n\t\t}, scope);\r\n\t}\r\n\r\n\tpublic static fun(obj: DefunObject | FunexprObject, parentScope: Scope): Fun {\r\n\t\tif (obj._type != 'defun' && obj._type != 'funexpr')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar name = null,\r\n\t\t\tdoc = null,\r\n\t\t\ttex = null;\r\n\r\n\t\tif (obj._type == 'defun') {\r\n\t\t\tobj = obj as DefunObject;\r\n\t\t\tname = obj.name;\r\n\t\t\tdoc = obj.doc;\r\n\t\t\ttex = obj.tex;\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('fun', name, obj.location);\r\n\r\n\t\tvar type = null;\r\n\t\tvar params = obj.params.map(tvo => {\r\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\r\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\r\n\r\n\t\t\tvar tv = PI.variable(tvo, scope);\r\n\r\n\t\t\tif (scope.hasOwnVariable(tv.name))\r\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\r\n\r\n\t\t\treturn scope.addVariable(tv) as Variable;\r\n\t\t});\r\n\t\tvar expr = null;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'defun':\r\n\t\t\t\tif (!scope.hasType(typeObjToNestedArr(obj.rettype)))\r\n\t\t\t\t\tthrow scope.error(`Type ${typeObjToString(obj.rettype)} is not defined`);\r\n\r\n\t\t\t\tvar rettype = scope.getType(typeObjToNestedArr(obj.rettype));\r\n\r\n\t\t\t\tif (obj.expr) {\r\n\t\t\t\t\texpr = PI.expr0(obj.expr, scope);\r\n\t\t\t\t\tif (!rettype.equals(expr.type))\r\n\t\t\t\t\t\tthrow scope.error(`Expression type ${expr.type} failed to match the return type ${rettype} of fun ${name}`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttype = new ObjectType({\r\n\t\t\t\t\t\tfunctional: true,\r\n\t\t\t\t\t\tfrom: params.map(variable => variable.type),\r\n\t\t\t\t\t\tto: rettype\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'funexpr':\r\n\t\t\t\texpr = PI.expr0(obj.expr, scope);\r\n\t\t\t\ttype = null;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\r\n\t\treturn new ObjectFun({annotations: [], name, type, params, expr, doc, tex}, scope);\r\n\t}\r\n\r\n\tpublic static funcall(obj: FuncallObject, parentScope: Scope): Funcall {\r\n\t\tif (obj._type != 'funcall')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('funcall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\r\n\r\n\t\tvar fun = PI.expr0(obj.schema, scope);\r\n\r\n\t\tvar args = obj.args.map(arg => {\r\n\t\t\treturn PI.expr0(arg, scope);\r\n\t\t});\r\n\r\n\t\treturn new Funcall({fun, args}, scope);\r\n\t}\r\n\r\n\tpublic static metaexpr(obj: MetaexprObject, parentScope: Scope): Metaexpr {\r\n\t\tif (!['tee', 'reduction', 'schemacall', 'schemaexpr', 'var'].includes(obj._type))\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'tee':\r\n\t\t\t\treturn PI.tee(obj, scope);\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn PI.reduction(obj, scope);\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\treturn PI.schemacall(obj, scope);\r\n\t\t\tcase 'schemaexpr':\r\n\t\t\t\treturn PI.schema(obj, scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PI.metavar(obj, scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static expr0(obj: Expr0Object, parentScope: Scope): Expr0 {\r\n\t\tif (!['funcall', 'funexpr', 'var'].includes(obj._type)) {\r\n\t\t\tconsole.log(obj);\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'funcall':\r\n\t\t\t\treturn PI.funcall(obj, scope);\r\n\t\t\tcase 'funexpr':\r\n\t\t\t\treturn PI.fun(obj, scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PI.variable(obj, scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static metavar(obj: VarObject, parentScope: Scope): Metaexpr {\r\n\t\tif (obj._type != 'var')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj.type) {\r\n\t\t\tcase '@':\r\n\t\t\t\tif (obj.name.match(/^h[0-9]+$/)) {\r\n\t\t\t\t\tvar hypnum = Number(obj.name.slice(1)) - 1;\r\n\t\t\t\t\tif (hypnum >= scope.hypotheses.length) {\r\n\t\t\t\t\t\tthrow scope.error(`Hypothesis #${hypnum + 1} not found`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn scope.hypotheses[hypnum];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow scope.error(`Unknown selector query @${obj.name}`);\r\n\t\t\tcase '$':\r\n\t\t\t\tif (!scope.has$(obj.name)) {\r\n\t\t\t\t\tthrow scope.error(`${obj.name} is not defined`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn scope.get$(obj.name);\r\n\t\t\tcase 'normal':\r\n\t\t\t\tif (!scope.hasSchema(obj.name))\r\n\t\t\t\t\tthrow scope.error(`Schema ${obj.name} is not defined`);\r\n\r\n\t\t\t\treturn scope.getSchema(obj.name);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow scope.error(`Unknown type ${obj.type}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static tee(obj: TeeObject, parentScope: Scope): Tee {\r\n\t\tif (obj._type != 'tee')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('tee', null, obj.location);\r\n\r\n\t\tvar left = obj.left.map(o => PI.metaexpr(o, scope));\r\n\r\n\t\tvar scopeRight = scope.extend('tee.right', null, obj.right.location);\r\n\t\tleft.forEach(l => scopeRight.hypotheses.push(l));\r\n\r\n\t\tvar def$s = obj.def$s.map($ => {\r\n\t\t\tvar $v = PI.def$($, scopeRight);\r\n\r\n\t\t\tif (scopeRight.hasOwn$($v.name)) {\r\n\t\t\t\tthrow scopeRight.error(`${$.name} has already been declared`);\r\n\t\t\t}\r\n\r\n\t\t\treturn scopeRight.add$($v);\r\n\t\t});\r\n\r\n\t\tvar right = PI.metaexpr(obj.right, scopeRight);\r\n\r\n\t\treturn new Tee({left, def$s, right}, scope);\r\n\t}\r\n\r\n\tpublic static def$(obj: Def$Object, parentScope: Scope): $Variable {\r\n\t\tif (obj._type != 'def$')\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t\r\n\t\tvar scope = parentScope.extend('def$', obj.name, obj.location);\r\n\t\t\r\n\t\tvar expr = PI.metaexpr(obj.expr, scope);\r\n\r\n\t\treturn new $Variable({name: obj.name, expr}, scope);\r\n\t}\r\n\r\n\tpublic static schema(obj: DefschemaObject | SchemaexprObject, parentScope: Scope): Fun {\r\n\t\tif (obj._type != 'defschema' && obj._type != 'schemaexpr')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar name: string = null,\r\n\t\t\taxiomatic: boolean = false,\r\n\t\t\tdoc: string = null,\r\n\t\t\tannotations: string[] = [];\r\n\r\n\t\tif (obj._type == 'defschema') {\r\n\t\t\tname = obj.name; axiomatic = obj.axiomatic;\r\n\t\t\tdoc = obj.doc; annotations = obj.annotations;\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('schema', name, obj.location);\r\n\r\n\t\tvar params = obj.params.map(tvo => {\r\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\r\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\r\n\r\n\t\t\tvar tv = PI.variable(tvo, scope);\r\n\r\n\t\t\tif (scope.hasOwnVariable(tv.name))\r\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\r\n\t\t\t\r\n\t\t\treturn scope.addVariable(tv) as Variable;\r\n\t\t});\r\n\r\n\t\tvar def$s = obj.def$s.map($ => {\r\n\t\t\tvar $v = PI.def$($, scope);\r\n\r\n\t\t\tif (scope.hasOwn$($v.name)) {\r\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\r\n\t\t\t}\r\n\r\n\t\t\treturn scope.add$($v);\r\n\t\t});\r\n\r\n\t\tvar expr = PI.metaexpr(obj.expr, scope);\r\n\r\n\t\treturn new Schema({doc, annotations, axiomatic, name, params, def$s, expr}, scope);\r\n\t}\r\n\r\n\tpublic static schemacall(obj: SchemacallObject, parentScope: Scope): Funcall {\r\n\t\tif (obj._type != 'schemacall')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('schemacall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\r\n\r\n\t\tvar fun = PI.metaexpr(obj.schema, scope);\r\n\r\n\t\tvar args = obj.args.map(obj => {\r\n\t\t\treturn PI.expr0(obj, scope);\r\n\t\t});\r\n\r\n\t\treturn new Funcall({\r\n\t\t\tfun,\r\n\t\t\targs\r\n\t\t}, scope);\r\n\t}\r\n\r\n\tpublic static reduction(obj: ReductionObject, parentScope: Scope): Reduction {\r\n\t\tif (obj._type != 'reduction')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('reduction', 'name' in obj.subject ? obj.subject.name : null, obj.location);\r\n\r\n\t\tvar subject = PI.metaexpr(obj.subject, scope);\r\n\r\n\t\tvar guesses = !obj.guesses\r\n\t\t\t? null\r\n\t\t\t: obj.guesses.map(g => {\r\n\t\t\t\treturn g && PI.expr0(g, scope);\r\n\t\t\t});\r\n\r\n\t\tvar leftargs = obj.leftargs.map(obj => {\r\n\t\t\treturn PI.metaexpr(obj, scope);\r\n\t\t});\r\n\r\n\t\tvar expected = obj.expected && PI.metaexpr(obj.expected, scope);\r\n\r\n\t\treturn new Reduction({\r\n\t\t\tsubject,\r\n\t\t\tguesses,\r\n\t\t\tleftargs,\r\n\t\t\texpected\r\n\t\t}, scope);\r\n\t}\r\n}","import ExpressionResolver from \"./ExpressionResolver\";\r\nimport $Variable from \"./nodes/$Variable\";\r\nimport Fun from \"./nodes/Fun\";\r\nimport Funcall from \"./nodes/Funcall\";\r\nimport Metaexpr from \"./nodes/Metaexpr\";\r\nimport { isNameable } from \"./nodes/Nameable\";\r\nimport ObjectFun from \"./nodes/ObjectFun\";\r\nimport Reduction from \"./nodes/Reduction\";\r\nimport Schema from \"./nodes/Schema\";\r\nimport Tee from \"./nodes/Tee\";\r\nimport Variable from \"./nodes/Variable\";\r\nimport Scope from \"./Scope\";\r\n\r\nexport default class ProofExplorer {\r\n\tpublic static get(scope: Scope, name: string, ktx) {\t\r\n\t\tvar DIAMOND = '&#x25C7;',\r\n\t\t\tDOWN = '&#x25BC;',\r\n\t\t\tUP = '&#x25B2;';\r\n\t\t\r\n\t\tif (!scope.hasSchema(name)) {\r\n\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t\r\n\t\tvar theexpr = scope.getSchema(name);\r\n\t\r\n\t\tvar ncols = (function recurse(expr: Metaexpr) {\r\n\t\t\tif (expr instanceof Reduction) {\r\n\t\t\t\treturn Math.max(\r\n\t\t\t\t\t...expr.leftargs.map(recurse),\r\n\t\t\t\t\t((expr.subject instanceof Fun && expr.subject.name)\r\n\t\t\t\t\t\t|| (expr.subject instanceof Funcall\r\n\t\t\t\t\t\t\t\t&& isNameable(expr.subject.fun)\r\n\t\t\t\t\t\t\t\t&& expr.subject.fun.name)\r\n\t\t\t\t\t\t\t? 0 : recurse(expr.subject)),\r\n\t\t\t\t\t1\r\n\t\t\t\t);\r\n\t\t\t} else if (expr instanceof Schema) {\r\n\t\t\t\treturn Math.max(\r\n\t\t\t\t\t...expr.def$s.map($ => recurse($.expr)),\r\n\t\t\t\t\trecurse(expr.expr)\r\n\t\t\t\t) + 1;\r\n\t\t\t} else if (expr instanceof ObjectFun) {\r\n\t\t\t\treturn recurse(expr.expr) + 1;\r\n\t\t\t} else if (expr instanceof Tee) {\r\n\t\t\t\treturn Math.max(\r\n\t\t\t\t\t...expr.left.map(recurse),\r\n\t\t\t\t\t...expr.def$s.map($ => recurse($.expr)),\r\n\t\t\t\t\trecurse(expr.right)\r\n\t\t\t\t) + 1;\r\n\t\t\t} else {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t})(theexpr);\r\n\r\n\t\tfunction getHtmlLine(ctr: string | number, left: any[], h1: string, h2: string | string[], options?) {\r\n\t\t\tvar padding = left.length;\r\n\r\n\t\t\tvar {bbb=false, rrb=false} = options || {};\r\n\t\r\n\t\t\tvar htmlLeft = left.map((e, i, a) => `<td class=\"${rrb && i == a.length - 1 ? 'rrb' : 'brb'}\">${e.map(f => ktx(f.toTeXStringWithId(true))).join(', ')}</td>`).join('');\r\n\r\n\t\t\tfor (var i = 0; i < left.length; i++)\r\n\t\t\t\twhile(left[i].length) left[i].pop();\r\n\t\r\n\t\t\treturn `<tr><th>${ctr}</th>${htmlLeft}<td ${bbb ? 'class=\"bbb\" ' : ''}colspan=\"${ncols-padding}\">${h1}</td>${h2 instanceof Array ? h2.map(e => `<td>${e}</td>`).join('') : `<td colspan=\"2\">${h2}</td>`}</tr>`;\r\n\t\t}\r\n\r\n\t\tfunction exprToHtml(expr, expand?) {\r\n\t\t\tif (typeof expr == 'number') return `<b>${expr}</b>`;\r\n\t\t\tif (expr instanceof Array) return `<b>${expr[0]}&ndash;${expr[1]}</b>`;\r\n\t\t\tif (expand) return ktx(ExpressionResolver.expandMetaAndFuncalls(expr).toTeXString(true));\r\n\t\t\t\r\n\t\t\treturn ktx(expr.toTeXString(true));\r\n\t\t}\r\n\r\n\t\tvar ctr = 0;\r\n\r\n\t\tvar tree = (function getTree(\r\n\t\t\t\texpr: Metaexpr,\r\n\t\t\t\thypnumMap: Map<Metaexpr, number>,\r\n\t\t\t\t$Map: Map<Metaexpr, number>) {\r\n\t\t\t\r\n\t\t\tif (hypnumMap.has(expr)) {\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'R',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\tnum: hypnumMap.get(expr),\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t}\r\n\r\n\t\t\tif ($Map.has(expr)) {\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'R',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\tnum: $Map.get(expr),\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t}\r\n\r\n\t\t\tif (expr instanceof Reduction) {\r\n\t\t\t\tvar leftarglines = [];\r\n\t\t\t\tvar leftargnums = expr.leftargs.map(l => {\r\n\t\t\t\t\tif (hypnumMap.has(l)) return hypnumMap.get(l);\r\n\t\t\t\t\tif ($Map.has(l)) return $Map.get(l);\r\n\r\n\t\t\t\t\tvar lines = getTree(l, hypnumMap, $Map);\r\n\t\t\t\t\tleftarglines = leftarglines.concat(lines);\r\n\t\t\t\t\treturn lines[lines.length - 1].ctr;\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar args = null;\r\n\t\t\t\tvar subjectlines = [];\r\n\t\t\t\tvar subjectnum = hypnumMap.get(expr.subject)\r\n\t\t\t\t\t|| $Map.get(expr.subject)\r\n\t\t\t\t\t|| (expr.subject instanceof Funcall && $Map.has(expr.subject.fun)\r\n\t\t\t\t\t\t? (args = expr.subject.args, $Map.get(expr.subject.fun))\r\n\t\t\t\t\t\t: false)\r\n\t\t\t\t\t|| ((s => s instanceof Fun && s.name\r\n\t\t\t\t\t\t\t|| s instanceof Funcall && isNameable(s.fun) && s.fun.name)(expr.subject)\r\n\t\t\t\t\t\t? expr.subject\r\n\t\t\t\t\t\t: (subjectlines = getTree(expr.subject, hypnumMap, $Map))[subjectlines.length-1].ctr);\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\t...leftarglines,\r\n\t\t\t\t\t...subjectlines,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_type: 'E',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tsubject: subjectnum,\r\n\t\t\t\t\t\targs,\r\n\t\t\t\t\t\tleftargs: leftargnums,\r\n\t\t\t\t\t\treduced: expr.reduced\r\n\t\t\t\t\t}\r\n\t\t\t\t];\r\n\t\t\t} else if (expr instanceof Funcall) {\r\n\t\t\t\tif (hypnumMap.has(expr.fun)) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RC',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tschema: hypnumMap.get(expr.fun),\r\n\t\t\t\t\t\targs: expr.args,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($Map.has(expr.fun)) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RC',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tschema: $Map.get(expr.fun),\r\n\t\t\t\t\t\targs: expr.args,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (expr.fun instanceof Schema && expr.fun.name) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RCX',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!(expr.fun instanceof Schema)) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'NP',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar schemalines = getTree(expr.fun, hypnumMap, $Map);\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\t...schemalines,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_type: 'RC',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tschema: schemalines[schemalines.length - 1].ctr,\r\n\t\t\t\t\t\targs: expr.args,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}\r\n\t\t\t\t];\r\n\t\t\t} else if (expr instanceof Variable) {\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'NP',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t} else if (expr instanceof Fun) {\r\n\t\t\t\tif (expr instanceof Schema && expr.name && expr != theexpr) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RS',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!expr.expr) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'NP',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$Map = new Map($Map);\r\n\r\n\t\t\t\tvar start = ctr + 1;\r\n\r\n\t\t\t\tvar $lines = [];\r\n\t\t\t\t\r\n\t\t\t\tif (expr instanceof Schema) {\r\n\t\t\t\t\texpr.def$s.forEach($ => {\r\n\t\t\t\t\t\tvar lines = getTree($.expr, hypnumMap, $Map);\r\n\t\t\t\t\t\t$lines = $lines.concat(lines);\r\n\r\n\t\t\t\t\t\tvar $num = lines[lines.length - 1].ctr;\r\n\t\t\t\t\t\t$Map.set($, $num);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'V',\r\n\t\t\t\t\t$lines,\r\n\t\t\t\t\tlines: getTree(expr.expr, hypnumMap, $Map),\r\n\t\t\t\t\t// getHtmlLine 함수가 이 배열을 조작하기 때문에\r\n\t\t\t\t\t// shallow copy 해야 한다.\r\n\t\t\t\t\tparams: expr.params.slice(),\r\n\t\t\t\t\tctr: [start ,ctr]\r\n\t\t\t\t}];\r\n\t\t\t} else if (expr instanceof Tee) {\r\n\t\t\t\thypnumMap = new Map(hypnumMap);\r\n\t\t\t\tvar leftlines = [];\r\n\r\n\t\t\t\tvar start = ctr + 1;\r\n\r\n\t\t\t\texpr.left.forEach(l => {\r\n\t\t\t\t\thypnumMap.set(l, ++ctr);\r\n\t\t\t\t\tleftlines.push({\r\n\t\t\t\t\t\t_type: 'H',\r\n\t\t\t\t\t\tctr,\r\n\t\t\t\t\t\texpr: l\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\t\t\t$Map = new Map($Map);\r\n\r\n\t\t\t\tvar $lines = [];\r\n\t\t\t\texpr.def$s.forEach($ => {\r\n\t\t\t\t\tvar lines = getTree($.expr, hypnumMap, $Map);\r\n\t\t\t\t\t$lines = $lines.concat(lines);\r\n\r\n\t\t\t\t\tvar $num = lines[lines.length - 1].ctr;\r\n\t\t\t\t\t$Map.set($, $num);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'T',\r\n\t\t\t\t\tleftlines,\r\n\t\t\t\t\t$lines,\r\n\t\t\t\t\trightlines: getTree(expr.right, hypnumMap, $Map),\r\n\t\t\t\t\tctr: [start, ctr]\r\n\t\t\t\t}];\r\n\t\t\t} else if (expr instanceof $Variable) {\r\n\t\t\t\tif (!$Map.has(expr)) {\r\n\t\t\t\t\tthrow Error(`${expr.name} is not defined`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'R',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\tnum: $Map.get(expr),\r\n\t\t\t\t\texpr: expr.expr\r\n\t\t\t\t}];\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('Unknown metaexpr', expr);\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: '?',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t}\r\n\t\t})(theexpr, new Map(), new Map());\r\n\r\n\t\tvar html = '<table class=\"explorer\">';\r\n\t\thtml += `<tr><th>#</th><th colspan=\"${ncols}\">expr</th><th colspan=\"2\">rule</th></tr>`;\r\n\t\t\r\n\t\thtml += (function tree2html(lines, left) {\r\n\t\t\treturn lines.map(line => {\r\n\t\t\t\tswitch (line._type) {\r\n\t\t\t\t\tcase 'V':\r\n\t\t\t\t\t\treturn tree2html(line.$lines, left.concat([line.params]))\r\n\t\t\t\t\t\t\t+ tree2html(line.lines, left.concat([line.params]));\r\n\t\t\t\t\tcase 'T':\r\n\t\t\t\t\t\tvar newleft = left.concat([[]]);\r\n\r\n\t\t\t\t\t\tvar ret = '';\r\n\r\n\t\t\t\t\t\tif (line.leftlines.length == 0) {\r\n\t\t\t\t\t\t\tvar emptyleft = Array(left.length + 1).fill([]);\r\n\r\n\t\t\t\t\t\t\tret += getHtmlLine(\r\n\t\t\t\t\t\t\t\t'', emptyleft, '', '', {bbb: true, rrb: true}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tret += line.leftlines.map((line, i, a) => {\r\n\t\t\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\t\t\tnewleft,\r\n\t\t\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t\t\t'assumption',\r\n\t\t\t\t\t\t\t\t\t{bbb: i == a.length - 1, rrb: true}\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}).join('');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tret += tree2html(\r\n\t\t\t\t\t\t\tline.$lines,\r\n\t\t\t\t\t\t\tnewleft\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tret += tree2html(\r\n\t\t\t\t\t\t\tline.rightlines,\r\n\t\t\t\t\t\t\tnewleft\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\treturn ret;\r\n\t\t\t\t\tcase '?':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t'???'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'H':\r\n\t\t\t\t\t\tthrow Error('no');\r\n\t\t\t\t\tcase 'R':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.num)]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'RS':\r\n\t\t\t\t\tcase 'RCX':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.expr)]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'RC':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t[DIAMOND, `${exprToHtml(line.schema)} (${line.args.map(a => exprToHtml(a)).join(', ')})`]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'E':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.reduced, true),\r\n\t\t\t\t\t\t\t[DOWN, `${exprToHtml(line.subject)}${line.args ? ' (' + line.args.map(a => exprToHtml(a)).join(', ') + ')' : ''} [${line.leftargs.map(a => exprToHtml(a)).join(', ')}]`]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'NP':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t'<b class=\"red\">not proved</b>'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\t`Unknown type ${line._type}`,\r\n\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}).join('');\r\n\t\t})(tree[0].$lines.concat(tree[0].lines), []);\r\n\t\t\r\n\t\thtml += '</table>';\r\n\t\r\n\t\treturn html;\r\n\t}\r\n}"],"sourceRoot":""}