{"version":3,"sources":["webpack://math/webpack/universalModuleDefinition","webpack://math/webpack/bootstrap","webpack://math/./src/nodes/Node.ts","webpack://math/./src/nodes/Metaexpr.ts","webpack://math/./src/nodes/ObjectType.ts","webpack://math/./src/nodes/Fun.ts","webpack://math/./src/nodes/$Variable.ts","webpack://math/./src/nodes/Variable.ts","webpack://math/./src/nodes/Funcall.ts","webpack://math/./src/nodes/ObjectFun.ts","webpack://math/./src/nodes/Expr0.ts","webpack://math/./src/nodes/MetaType.ts","webpack://math/./src/nodes/Schema.ts","webpack://math/./src/nodes/Tee.ts","webpack://math/./src/nodes/Type.ts","webpack://math/./src/nodes/Nameable.ts","webpack://math/./src/nodes/Reduction.ts","webpack://math/./src/entry.js","webpack://math/./src/grammar.pegjs","webpack://math/./src/Program.ts","webpack://math/./src/PegInterface.ts","webpack://math/./src/ExecutionContext.ts","webpack://math/./src/ProofExplorer.ts","webpack://math/./src/Scope.ts","webpack://math/./src/StackTrace.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","ctr","Node","trace","doc","tex","_id","toIndentedString","message","error","Error","replace","precedence","code","match","g1","hyps","length","prec","Array","console","log","my","normalizePrecedence","your","id","args","ret","shouldConsolidate","_match","PREC_FUNEXPR","PREC_COMMA","PREC_COLONEQQ","EqualsPriority","Metaexpr","type","super","obj","context","equals","getEqualsPriority","equalsInternal","ObjectType","origin","isFunctional","isBaseType","base","functional","from","map","f","some","e","to","resolved","resolve","toSimpleString","join","indent","isSimple","toTeXString","Fun","annotations","sealed","params","expr","parsed","parseTeX","variable","isProved","ONE","placeholders","types","push","isParam","thisCall","fun","objCall","Map","set","substitute","$Variable","andFuncalls","expandMeta","FOUR","escapeTeX","Variable","guess","ZERO","Funcall","isNameable","resolvedType","paramTypes","argTypes","arg","callee","isExpandable","isCallable","expandOnce","THREE","thisIsExpandable","objIsExpandable","every","_","repeat","funcallToTeXString","ObjectFun","has","uses","makeTeX","Expr0","MetaType","left","right","Schema","axiomatic","def$s","_isProvedCache","cache","_context","toTeXStringWithId","Tee","$","concat","lef","TWO","expanded","Type","Reduction","subject","guesses","leftargs","as","forEach","derefs","tee","query","leftargTypes","leftargsExpanded","reduced","parameter","argument","Number","recurse","ptr","test","grammar","default","Program","parser","scopeMap","filename","loader","scope","loadModuleInternal","fileUri","parse","feed","lines","line","_type","scope2","importMap","hasType","addType","hasVariable","addVariable","addFun","schema","hasSchema","addSchema","reduction","schemacall","metavar","ktx","typeObjToString","ftype","typeObjToNestedArr","varObjToString","PI","parentScope","extend","location","getType","includes","getVariable","tvo","tv","hasOwnVariable","rettype","expr0","funcall","hypnum","slice","hypotheses","has$","get$","getSchema","metaexpr","scopeRight","$v","def$","hasOwn$","add$","oldContext","using","g","ExecutionContext","usingList","ProofExplorer","DIAMOND","theexpr","ncols","Math","max","getHtmlLine","h1","h2","options","padding","bbb","rrb","htmlLeft","a","pop","exprToHtml","expand","tree","getTree","hypnumMap","$Map","num","leftarglines","leftargnums","subjectlines","subjectnum","schemalines","start","$lines","$num","leftlines","rightlines","html","tree2html","newleft","fill","Scope","parent","typedefMap","defMap","schemaMap","baseType","child","h","values","hasOwnType","broadcast","filter","hasOwnSchema","StackTrace","stack","element","column"],"mappings":"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","file":"math.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"math\"] = factory();\n\telse\n\t\troot[\"math\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","import StackTrace from '../StackTrace';\n\nvar ctr = 0;\n\nexport type Precedence = boolean | number | [number, number];\n\nexport default abstract class Node {\n\tpublic readonly _id: number;\n\n\tpublic readonly trace: StackTrace;\n\tpublic readonly doc: string;\n\tpublic readonly tex: string;\n\tpublic precedence: Precedence;\n\n\tpublic static readonly PREC_FUNEXPR = 1000;\n\tpublic static readonly PREC_COMMA = 1000;\n\tpublic static readonly PREC_COLONEQQ = 100000;\n\n\tconstructor (trace: StackTrace, doc: string, tex: string) {\n\t\tthis._id = ++ctr;\n\t\tthis.trace = trace;\n\t\tthis.doc = doc;\n\t\tthis.tex = tex;\n\t}\n\n\tpublic toString() {\n\t\treturn this.toIndentedString(0);\n\t}\n\n\tpublic abstract toIndentedString(indent: number, root?: boolean): string;\n\tpublic abstract toTeXString(prec?: Precedence, root?: boolean): string;\n\n\tpublic error(message: string) {\n\t\treturn Node.error(message, this.trace);\n\t}\n\n\tpublic static error(message: string, trace: StackTrace) {\n\t\tif (trace) {\n\t\t\treturn trace.error(message);\n\t\t} else {\n\t\t\treturn new Error(message);\n\t\t}\n\t}\n\n\tpublic static escapeTeX(s) {\n\t\treturn s.replace(/&|%|\\$|#|_|{|}|~|\\^|\\\\/g, m => ({\n\t\t\t'&': '\\\\&', '%': '\\\\%', '$': '\\\\$',\n\t\t\t'#': '\\\\#', '_': '\\\\_', '{': '\\\\{',\n\t\t\t'}': '\\\\}',\n\t\t\t'~': '\\\\textasciitilde',\n\t\t\t'^': '\\\\textasciicircum',\n\t\t\t'\\\\': '\\\\textbackslash'\n\t\t})[m]);\n\t}\n\n\tpublic static parseTeX(tex) {\n\t\tvar precedence: Precedence = false;\n\n\t\tvar code = tex.replace(/^!<prec=([0-9]+)>/, (match, g1) => {\n\t\t\tprecedence = g1 * 1;\n\t\t\treturn '';\n\t\t});\n\n\t\treturn {precedence, code};\n\t}\n\n\tpublic isProved(hyps?): boolean {\n\t\thyps = hyps || [];\n\n\t\tfor (var i = 0; i < hyps.length; i++) {\n\t\t\tif (hyps[i] == this) return true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/*\n\t* false corresponds to 0.\n\t* true corresponds to w * 2.\n\t*/\n\tpublic static normalizePrecedence(prec: Precedence) {\n\t\tif (prec === false) return [0, 0];\n\t\tif (prec === true) return [2, 0];\n\t\tif (typeof prec == 'number') return [0, prec];\n\n\t\tif (!(prec instanceof Array && prec.length == 2)) {\n\t\t\tconsole.log(prec);\n\t\t\tthrow Error('wut');\n\t\t}\n\n\t\treturn prec;\n\t}\n\n\tpublic shouldConsolidate(prec: Precedence) {\n\t\tvar my = Node.normalizePrecedence(this.precedence || false),\n\t\t\tyour = Node.normalizePrecedence(prec || false);\n\n\t\tif (my[0] == 0 && my[1] == 0) return false;\n\n\t\treturn !(my[0] < your[0] || my[0] == your[0] && my[1] < your[1]);\n\t}\n\n\tpublic makeTeX(id, args, prec) {\n\t\targs = args || [];\n\t\tprec = prec || false;\n\t\t\n\t\tvar ret = this.tex;\n\n\t\tif (this.shouldConsolidate(prec)) {\n\t\t\tret = '\\\\left(' + ret + '\\\\right)';\n\t\t}\n\n\t\treturn ret.replace(/#([0-9]+)/g, (match, g1) => {\n\t\t\treturn args[g1 * 1 - 1] || `\\\\texttt{\\\\textcolor{red}{\\\\#${g1}}}`;\n\t\t}).replace(/<<(.+?)>>/, (_match, g1) => {\n\t\t\treturn `\\\\href{#${id}}{${g1}}`;\n\t\t});\n\t}\n}","import ExecutionContext from \"../ExecutionContext\";\nimport StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Node from \"./Node\";\nimport Type from \"./Type\";\nimport Variable from \"./Variable\";\n\n/**\n * 숫자가 큰 것이 우선순위가 높다.\n */\nexport enum EqualsPriority {\n\t/** Variable */\n\tZERO,\n\t/** Fun */\n\tONE,\n\t/** Tee */\n\tTWO,\n\t/** Funcall */\n\tTHREE,\n\t/** $Variable, Reduction */\n\tFOUR\n}\n\nexport default abstract class Metaexpr extends Node {\n\tpublic readonly type: Type;\n\n\tconstructor(trace: StackTrace, doc: string, tex: string, type: Type) {\n\t\tsuper(trace, doc, tex);\n\n\t\tif (!type) throw Node.error('Assertion failed', trace);\n\n\t\tthis.type = type;\n\t}\n\n\tpublic abstract substitute(map: Map<Variable, Expr0>): Metaexpr;\n\n\t/**\n\t * \n\t * @param andFuncalls 이름 없는 Funcall도 푼다.\n\t */\n\tpublic abstract expandMeta(andFuncalls: boolean): Metaexpr;\n\n\tpublic equals(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (this === obj) return true;\n\t\tif (!this.type.equals(obj.type)) return false;\n\n\t\tif (obj.getEqualsPriority() > this.getEqualsPriority())\n\t\t\treturn obj.equalsInternal(this, context);\n\t\t\n\t\treturn this.equalsInternal(obj, context);\n\t}\n\n\tprotected abstract getEqualsPriority(): EqualsPriority;\n\n\tprotected abstract equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean;\n}","import Nameable from './Nameable';\nimport Node from './Node';\nimport Type from './Type';\n\nexport default class ObjectType extends Type implements Nameable {\n\n\tpublic readonly isBaseType: boolean;\n\tpublic readonly name: string;\n\tpublic readonly origin: ObjectType;\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: ObjectType;\n\n\tconstructor (o) {\n\t\tif (o.origin) {\n\t\t\tsuper(null, o.doc, null, o.origin.isFunctional);\n\n\t\t\tthis.isBaseType = !!o.base;\n\n\t\t\tif (typeof o.name != 'string')\n\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\n\t\t\tthis.name = o.name;\n\n\t\t\tif (!(o.origin instanceof ObjectType))\n\t\t\t\tthrow Node.error('!(o.origin instanceof ObjectType)', null);\n\n\t\t\tthis.origin = o.origin;\n\t\t} else {\n\t\t\tsuper(null, o.doc, null, o.functional);\n\n\t\t\tthis.isBaseType = !!o.base;\n\n\t\t\tif (typeof o.functional != 'boolean')\n\t\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\n\n\t\t\tif (!o.functional) {\n\t\t\t\tif (typeof o.name != 'string')\n\t\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\n\t\t\t\tthis.name = o.name;\n\t\t\t} else {\n\t\t\t\tif (o.from.map(f => f instanceof ObjectType).some(e => !e))\n\t\t\t\t\tthrow Node.error('o.from.map(f => f instanceof ObjectType).some(e => !e)', null);\n\t\t\t\tif (!(o.to instanceof ObjectType))\n\t\t\t\t\tthrow Node.error('!(o.to instanceof ObjectType)', null);\n\n\t\t\t\tthis.from = o.from;\n\t\t\t\tthis.to = o.to;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toSimpleString() {\n\t\tif (this.name) return this.name;\n\n\t\tvar resolved = this.resolve();\n\n\t\treturn `[${resolved.from.map(e => e.toSimpleString()).join(', ')} -> ${resolved.to.toSimpleString()}]`;\n\t}\n\n\tpublic toIndentedString(indent): string {\n\t\tif (this.isSimple) return this.name;\n\n\t\treturn `${this.name ? this.name + ': ' : ''}[${this.resolve().from.join(', ')} -> ${this.resolve().to}]`;\n\t}\n\n\tpublic toTeXString(root?: boolean) {\n\t\tif (this.isSimple) return `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\n\n\t\tif (!root && this.name) {\n\t\t\treturn `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\n\t\t}\n\n\t\treturn `${this.name ? `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}: ` : ''}`\n\t\t\t+ `\\\\left[${this.resolve().from.map(e => e.toTeXString()).join(' \\\\times ')}`\n\t\t\t+ ` \\\\to ${this.resolve().to.toTeXString()} \\\\right]`;\n\t}\n\n\tpublic resolve(): ObjectType {\n\t\treturn this.origin ? this.origin.resolve() : this;\n\t}\n\n\tpublic equals(t: Type): boolean {\n\t\tif (!(t instanceof ObjectType)) return false;\n\n\t\tif (this.origin) return this.origin.equals(t);\n\t\tif (t.origin) return this.equals(t.origin);\n\n\t\tif (this.isSimple != t.isSimple) return false;\n\n\t\tif (this.isSimple) return this === t;\n\n\t\tif (this.from.length != t.from.length) return false;\n\n\t\tfor (var i = 0; i < this.from.length; i++)\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\n\n\t\treturn this.to.equals(t.to);\n\t}\n}","import Expr0 from './Expr0';\nimport Nameable from './Nameable';\n\nexport default abstract class Fun extends Expr0 implements Nameable {\n\n\tpublic readonly annotations: string[];\n\tpublic readonly sealed: boolean;\n\tpublic readonly name: string;\n\tpublic readonly params: Variable[];\n\tpublic readonly expr: Metaexpr;\n\n\t/*\n\t * name, expr 중 하나 이상 있어야 하고 type, expr 중\n\t * 한 개만 있어야 한다.\n\t */\n\tconstructor ({doc, tex, annotations, sealed, type, name, params, expr}: FunArgumentType, trace: StackTrace) {\n\t\tif (!name && !expr)\n\t\t\tthrow Node.error('Anonymous fun cannot be primitive', trace);\n\n\t\tif (type && expr)\n\t\t\tthrow Node.error('no', trace);\n\n\t\tif (!type && !expr)\n\t\t\tthrow Node.error('Cannot guess the type of a primitive fun', trace);\n\t\t\n\t\tvar precedence = false;\n\n\t\tif (tex) {\n\t\t\tvar parsed = Node.parseTeX(tex);\n\t\t\tprecedence = parsed.precedence;\n\t\t\ttex = parsed.code;\n\t\t} else {\n\t\t\ttex = null;\n\t\t}\n\t\t\n\t\tsuper(\n\t\t\ttrace, doc, tex,\n\t\t\ttype || new (expr.type instanceof ObjectType ? ObjectType : MetaType)({\n\t\t\t\tfunctional: true,\n\t\t\t\tfrom: params.map(variable => variable.type),\n\t\t\t\tto: expr.type as any\n\t\t\t})\n\t\t);\n\n\t\tthis.annotations = annotations;\n\t\tthis.sealed = sealed;\n\t\tthis.precedence = precedence;\n\t\tthis.name = name;\n\t\tthis.params = params;\n\t\tthis.expr = expr;\n\t}\n\n\tpublic isProved(hyps?) {\n\t\thyps = hyps || [];\n\t\t\n\t\treturn super.isProved(hyps)\n\t\t\t|| this.expr && this.expr.isProved(hyps);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.ONE;\n\t}\n\t\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (!(this.expr && !this.sealed)\n\t\t\t\t&& !(obj instanceof Fun && obj.expr && !obj.sealed)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar placeholders = [];\n\t\tvar types = (this.type.resolve() as ObjectType | MetaType).from;\n\n\t\tfor (var i = 0; i < types.length; i++) {\n\t\t\tplaceholders.push(new Variable({\n\t\t\t\tisParam: true,\n\t\t\t\ttype: types[i],\n\t\t\t\tname: '$' + i\n\t\t\t}, this.trace));\n\t\t}\n\n\t\tvar thisCall = this.expr && !this.sealed\n\t\t\t? this.call(placeholders)\n\t\t\t: new Funcall({\n\t\t\t\tfun: this,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\n\t\tvar objCall = obj instanceof Fun && obj.expr && !obj.sealed\n\t\t\t? obj.call(placeholders)\n\t\t\t: new Funcall({\n\t\t\t\tfun: obj,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\t\t\n\t\treturn thisCall.equals(objCall, context);\n\t}\n\n\tpublic abstract isCallable(context: ExecutionContext): boolean;\n\n\tpublic call(args: Expr0[]): Metaexpr {\n\t\tif (!this.expr) {\n\t\t\tthrow Error('Cannot call a primitive fun');\n\t\t}\n\n\t\tif (this.params.length != args.length) {\n\t\t\tthrow Error('Illegal arguments length');\n\t\t}\n\n\t\tvar map: Map<Variable, Expr0> = new Map();\n\n\t\tfor (var i = 0; i < this.params.length; i++) {\n\t\t\tmap.set(this.params[i], args[i]);\n\t\t}\n\n\t\treturn this.expr.substitute(map);\n\t}\n}\n\nimport Funcall from './Funcall';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport Node from './Node';\nimport ObjectType from './ObjectType';\nimport Type from './Type';\nimport Variable from './Variable';\nimport StackTrace from '../StackTrace';\nimport ExecutionContext from '../ExecutionContext';\n\ninterface FunArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\tannotations: string[];\n\tsealed: boolean;\n\ttype?: Type;\n\tname?: string;\n\tparams: Variable[];\n\texpr?: Metaexpr;\n}","import ExecutionContext from \"../ExecutionContext\";\nimport StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Metaexpr, { EqualsPriority } from \"./Metaexpr\";\nimport Nameable from \"./Nameable\";\nimport Node, { Precedence } from \"./Node\";\nimport Variable from \"./Variable\";\n\ninterface $VariableArgumentType {\n\tname: string;\n\texpr: Metaexpr;\n}\n\nexport default class $Variable extends Metaexpr implements Nameable {\n\n\tpublic readonly name: string;\n\tpublic readonly expr: Metaexpr;\n\n\tconstructor ({name, expr}: $VariableArgumentType, trace: StackTrace) {\n\t\tsuper(trace, null, null, expr.type);\n\n\t\tif (!name || !expr) {\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tthis.name = name;\n\t\tthis.expr = expr;\n\t}\n\n\tpublic isProved(hyps?): boolean {\n\t\thyps = hyps || [];\n\t\t\n\t\treturn super.isProved(hyps)\n\t\t\t|| this.expr.isProved(hyps);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn this.expr.substitute(map);\n\t}\n\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\treturn this.expr.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FOUR;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\treturn this.expr.equals(obj, context);\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn this.name;\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `\\\\mathtt{${Node.escapeTeX(this.name)}}`;\n\t}\n}","import ExecutionContext from '../ExecutionContext';\nimport StackTrace from '../StackTrace';\nimport Expr0 from './Expr0';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport Nameable from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\n\ninterface VariableArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\ttype: ObjectType;\n\tname: string;\n\tisParam: boolean;\n\tguess?: string;\n}\n\nexport default class Variable extends Expr0 implements Nameable {\n\t\n\tpublic readonly isParam: boolean;\n\tpublic readonly guess: string;\n\tpublic readonly type: ObjectType;\n\tpublic readonly name: string;\n\n\tconstructor ({doc, tex, type, name, isParam, guess}: VariableArgumentType, trace: StackTrace) {\n\t\tsuper(trace, doc, tex, type);\n\n\t\tthis.isParam = !!isParam;\n\t\tthis.guess = guess || null;\n\n\t\tif (typeof name != 'string')\n\t\t\tthrow Node.error('Assertion failed', trace);\n\n\t\tthis.name = name;\n\t}\n\n\tpublic isProved(hyps) {\n\t\thyps = hyps || [];\n\t\n\t\treturn super.isProved(hyps);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn map.get(this) || this;\n\t}\n\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\treturn this;\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.ZERO;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\treturn false;\n\t}\n\n\t// pr f\n\tpublic toSimpleString() {\n\t\treturn this.type.toSimpleString() + ' ' + this.name;\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn `${root ? this.type + ' ' : ''}${this.name}<${this._id}>`;\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar id = this.isParam ? `id-${this._id}` : `def-${this.name}`;\n\n\t\tvar tex = this.tex\n\t\t\t|| (\n\t\t\t\tthis.name.length == 1\n\t\t\t\t\t? Node.escapeTeX(this.name)\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.name)}}`\n\t\t\t);\n\t\t\n\t\treturn `\\\\href{#${id}}{${tex}}`;\n\t}\n\n\tpublic toTeXStringWithId(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.isParam) throw Error('wut');\n\n\t\tvar id =`id-${this._id}`;\n\n\t\treturn [\n\t\t\t`\\\\htmlId{${id}}{`,\n\t\t\tthis.toTeXString(prec, root),\n\t\t\t`}`\n\t\t].join('');\n\t}\n}","import ExecutionContext from '../ExecutionContext';\nimport StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Expr0 from './Expr0';\nimport Fun from './Fun';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport { isNameable } from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectFun from './ObjectFun';\nimport ObjectType from './ObjectType';\nimport Schema from './Schema';\nimport Variable from './Variable';\n\ninterface FuncallArgumentType {\n\tfun: Metaexpr;\n\targs: Expr0[];\n}\n\nexport default class Funcall extends Expr0 {\n\t\n\tpublic readonly fun: Metaexpr;\n\tpublic readonly args: Expr0[];\n\n\tconstructor ({fun, args}: FuncallArgumentType, trace: StackTrace) {\n\t\tif (fun.type.isSimple) {\n\t\t\tvar name = isNameable(fun) ? fun.name : '<anonymous>';\n\t\t\tthrow Node.error(`${name} is not callable`, trace);\n\t\t}\n\n\t\tif (!(args instanceof Array) || args.map(e => e instanceof Node).some(e => !e))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t\t \n\t\tvar resolvedType = fun.type.resolve() as ObjectType | MetaType,\n\t\t\tparamTypes = resolvedType.from,\n\t\t\targTypes = args.map(e => e.type);\n\n\t\tif (paramTypes.length != argTypes.length)\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(argTypes[i])) {\n\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t}\n\t\t}\n\n\t\tsuper(trace, null, null, resolvedType.to);\n\t\t\n\t\tthis.fun = fun;\n\t\tthis.args = args;\n\t}\n\n\tpublic isProved(hyps?) {\n\t\thyps = hyps || [];\n\t\n\t\treturn super.isProved(hyps) || this.fun.isProved(hyps);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn new Funcall({\n\t\t\tfun: this.fun.substitute(map),\n\t\t\targs: this.args.map(arg => arg.substitute(map))\n\t\t}, this.trace);\n\t}\n\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\tvar fun = this.fun.expandMeta(andFuncalls),\n\t\t\targs = this.args.map(arg => arg.expandMeta(andFuncalls));\n\t\t\n\t\tif (!(fun instanceof Fun) || !fun.expr || fun.name && !(fun instanceof Schema))\n\t\t\treturn new Funcall({fun, args}, this.trace);\n\n\t\treturn fun.call(args).expandMeta(andFuncalls);\n\t}\n\n\tpublic isExpandable(context: ExecutionContext): boolean {\n\t\tvar callee: Metaexpr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\treturn callee.isExpandable(context);\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) return false;\n\n\t\treturn callee.isCallable(context);\n\t}\n\t\n\tpublic expandOnce(context: ExecutionContext): Metaexpr {\n\t\tif (!this.isExpandable(context)) {\n\t\t\tthrow Error('Cannot expand');\n\t\t}\n\n\t\tvar callee: Metaexpr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\treturn new Funcall({\n\t\t\t\tfun: callee.expandOnce(context),\n\t\t\t\targs: this.args\n\t\t\t}, this.trace);\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\treturn callee.call(this.args);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.THREE;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (!(obj instanceof Funcall)) {\n\t\t\tif (!this.isExpandable(context)) return false;\n\n\t\t\treturn this.expandOnce(context).equals(obj, context);\n\t\t}\n\n\t\tif (this.fun.equals(obj.fun, context)) {\n\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\tif (!this.args[i].equals(obj.args[i], context)) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.fun instanceof Funcall && this.fun.isExpandable(context)) {\n\t\t\treturn this.expandOnce(context).equals(obj, context);\n\t\t}\n\n\t\tif (obj.fun instanceof Funcall && obj.fun.isExpandable(context)) {\n\t\t\treturn this.equals(obj.expandOnce(context), context);\n\t\t}\n\n\t\tvar thisIsExpandable = this.isExpandable(context),\n\t\t\tobjIsExpandable = obj.isExpandable(context);\n\t\t\n\t\tif (this.fun == obj.fun || !thisIsExpandable && !objIsExpandable) {\n\t\t\tif (this.fun != obj.fun) return false;\n\n\t\t\tif (!thisIsExpandable && !objIsExpandable) {\n\t\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\t\tif (!this.args[i].equals(obj.args[i], context)) return false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (this.args.every((_, i) => {\n\t\t\t\treturn this.args[i].equals(obj.args[i], context);\n\t\t\t})) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (thisIsExpandable) {\n\t\t\treturn this.expandOnce(context).equals(obj, context);\n\t\t}\n\n\t\treturn this.equals(obj.expandOnce(context), context);\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar args: any = this.args.map(arg => {\n\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (args.join('').length <= 50) {\n\t\t\targs = this.args.map(arg => {\n\t\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\targs = args.join(', ');\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn `${this.fun.name || `(${this.fun})`}(${args})`;\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t!(this.fun instanceof Fun) || !this.fun.name\n\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t: this.fun.name,\n\t\t\t\t\t`(${args})`\n\t\t\t\t].join('');\n\t\t\t}\n\t\t} else {\n\t\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn [\n\t\t\t\t\tthis.fun.name || `(${this.fun.toIndentedString(indent)})`,\n\t\t\t\t\t'(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t(\n\t\t\t\t\t\t!(this.fun instanceof Fun) || !('name' in this.fun && this.fun.name)\n\t\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t\t: this.fun.name\n\t\t\t\t\t) + '(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (this.fun instanceof Schema) {\n\t\t\treturn (\n\t\t\t\tthis.fun.name\n\t\t\t\t\t? `\\\\href{#schema-${this.fun.isProved() ? 'p' : 'np'}-${this.fun.name}}{\\\\textsf{${Node.escapeTeX(this.fun.name)}}}`\n\t\t\t\t\t: this.fun.toTeXString(false)\n\t\t\t) + `\\\\mathord{\\\\left(${this.args.map(arg => {\n\t\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\n\t\t\t}).join(', ')}\\\\right)}`;\n\t\t}\n\n\t\tif (this.fun instanceof ObjectFun)\n\t\t\treturn this.fun.funcallToTeXString(this.args, prec);\n\t\t\n\t\tvar args = this.args.map(arg => {\n\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\n\t\t});\n\n\t\treturn (\n\t\t\t!(isNameable(this.fun) && this.fun.name) || this.fun instanceof Variable\n\t\t\t\t? this.fun.toTeXString(false)\n\t\t\t\t: this.fun.name.length == 1\n\t\t\t\t\t? Node.escapeTeX(this.fun.name)\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.fun.name)}}`\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}","import ExecutionContext from \"../ExecutionContext\";\nimport StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Fun from \"./Fun\";\nimport Metaexpr from \"./Metaexpr\";\nimport Node, { Precedence } from \"./Node\";\nimport ObjectType from \"./ObjectType\";\nimport Type from \"./Type\";\nimport Variable from \"./Variable\";\n\ninterface ObjectFunArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\tannotations: string[];\n\tsealed: boolean;\n\ttype?: Type;\n\tname?: string;\n\tparams: Variable[];\n\texpr?: Expr0;\n}\n\nexport default class ObjectFun extends Fun {\n\t\n\tconstructor ({doc, tex, annotations, sealed, type, name, params, expr}: ObjectFunArgumentType, trace: StackTrace) {\n\t\tsuper({doc, tex, annotations, sealed, type, name, params, expr}, trace);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 최상단에만 선언되므로 치환되어야 할 것을 포함하지 않으므로 확인하지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new ObjectFun({\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new ObjectFun({\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic isCallable(context: ExecutionContext): boolean {\n\t\treturn this.expr && (!this.sealed || context.uses(this));\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (this.name) return this.name;\n\t\t\n\t\treturn [\n\t\t\t`ƒ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\n\t\tif (!root)\n\t\t\treturn `\\\\href{#def-${this.name}}\\\\mathrm{${Node.escapeTeX(this.name)}}`;\n\t\n\t\tif (!this.expr)\n\t\t\treturn this.funcallToTeXString(this.params, prec);\n\t\n\t\treturn this.funcallToTeXString(this.params, Node.PREC_COLONEQQ)\n\t\t\t\t+ `\\\\coloneqq ${this.expr.toTeXString(Node.PREC_COLONEQQ)}`;\n\t}\n\n\tpublic funcallToTeXString(args, prec) {\n\t\targs = args.map(arg => {\n\t\t\treturn arg.toTeXString(this.tex ? this.precedence : Node.PREC_COMMA);\n\t\t});\n\t\n\t\tif (this.tex) {\n\t\t\treturn this.makeTeX('def-' + this.name, args, prec);\n\t\t}\n\t\n\t\treturn (\n\t\t\t!this.name\n\t\t\t\t? this.toTeXString(false)\n\t\t\t\t: `\\\\href{#def-${this.name}}{${this.name.length == 1 ? Node.escapeTeX(this.name) : `\\\\mathrm{${Node.escapeTeX(this.name)}}`}}`\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}","import Metaexpr from \"./Metaexpr\";\n\nexport default abstract class Expr0 extends Metaexpr {\n\t\n}","import Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Type from './Type';\n\ninterface SimpleMetaTypeArgumentType {\n\tfunctional: false;\n\tleft: Type[];\n\tright: Type;\n}\n\ninterface FunctionalMetaTypeArgumentType {\n\tfunctional: true;\n\tfrom: ObjectType[];\n\tto: MetaType;\n}\n\ntype MetaTypeArgumentType = SimpleMetaTypeArgumentType | FunctionalMetaTypeArgumentType;\n\nexport default class MetaType extends Type {\n\t\n\tpublic readonly left: Type[];\n\tpublic readonly right: Type;\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: MetaType;\n\n\tconstructor (o: MetaTypeArgumentType) {\n\t\tsuper(null, null, null, o.functional);\n\n\t\tif (typeof o.functional != 'boolean')\n\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\n\n\t\tif (o.functional == false) {\n\t\t\tif (!(o.left instanceof Array))\n\t\t\t\tthrow Node.error('left should be an array', null);\n\n\t\t\tthis.left = o.left;\n\t\t\tthis.right = o.right;\n\t\t} else {\n\t\t\tif (o.from.some(f => !(f instanceof ObjectType)))\n\t\t\t\tthrow Node.error('o.from.some(f => !(f instanceof ObjectType))', null);\n\t\t\tif (!(o.to instanceof MetaType))\n\t\t\t\tthrow Node.error('!(o.to instanceof MetaType)', null);\n\n\t\t\tif (o.to.isFunctional)\n\t\t\t\tthrow Node.error('Functional metatype in functional metatype is not supported', null);\n\n\t\t\tthis.from = o.from;\n\t\t\tthis.to = o.to;\n\t\t}\n\t}\n\n\tpublic resolve(): MetaType {\n\t\treturn this;\n\t}\n\n\tpublic toIndentedString(indent: number) {\n\t\tif (this.isSimple) return `[${this.left.join(', ')} |- ${this.right}]`;\n\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tpublic equals(t: Type): boolean {\n\t\tif (!(t instanceof MetaType)) return false;\n\n\t\tif (this.isSimple != t.isSimple) return false;\n\n\t\tif (this.isSimple) {\n\t\t\tif (this.left.length != t.left.length) return false;\n\n\t\t\tfor (let i = 0; i < this.left.length; i++) {\n\t\t\t\tif (!this.left[i].equals(t.left[i])) return false;\n\t\t\t}\n\n\t\t\tif (!this.right.equals(t.right)) return false;\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.from.length != t.from.length) return false;\n\n\t\tfor (let i = 0; i < this.from.length; i++)\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\n\n\t\treturn this.to.equals(t.to);\n\t}\n}","import Fun from \"./Fun\";\n\nexport default class Schema extends Fun {\n\n\tpublic readonly axiomatic: boolean;\n\tpublic readonly using: ObjectFun[];\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly context: ExecutionContext;\n\tprivate _isProvedCache: boolean;\n\n\tconstructor ({doc, tex, annotations, axiomatic, name, params, context, def$s, expr}: SchemaArgumentType, trace: StackTrace) {\n\t\tif (!expr) {\n\t\t\tthrow Node.error('wut', trace);\n\t\t}\n\n\t\tsuper({doc, tex, annotations, sealed: false, type: null, name, params, expr}, trace);\n\t\t\n\t\tthis.axiomatic = axiomatic;\n\t\tthis.def$s = def$s || [];\n\t\tthis.context = context;\n\t}\n\t\n\tpublic isProved(hyps?) {\n\t\tif (this._isProvedCache) return true;\n\n\t\tif (!hyps && typeof this._isProvedCache == 'boolean') {\n\t\t\treturn this._isProvedCache;\n\t\t}\n\n\t\tvar cache = !hyps;\n\t\thyps = hyps || [];\n\t\t\n\t\tvar ret = this.axiomatic || super.isProved(hyps);\n\t\tif (cache) this._isProvedCache = ret;\n\t\treturn ret;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 최상단에만 선언되므로 치환되어야 할 것을 포함하지 않으므로 확인하지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new Schema({\n\t\t\tannotations: this.annotations,\n\t\t\taxiomatic: this.axiomatic,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tcontext: this.context,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new Schema({\n\t\t\tannotations: this.annotations,\n\t\t\taxiomatic: this.axiomatic,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tcontext: this.context,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic isCallable(_context: ExecutionContext): boolean {\n\t\treturn true;\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn [\n\t\t\t`∫ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.expandMeta(true).toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\t\t\n\t\tvar id = `schema-${this.isProved() ? 'p' : 'np'}-${this.name}`;\n\t\n\t\tif (!root)\n\t\t\treturn `\\\\href{#${id}}\\\\mathsf{${Node.escapeTeX(this.name)}}`;\n\t\n\t\treturn `\\\\href{#${id}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}\\\\mathord{\\\\left(${this.params.map(e => e.toTeXStringWithId(Node.PREC_COMMA) + (e.guess ? `: \\\\texttt{@${e.guess}}` : '')).join(', ')}\\\\right)}:\\\\\\\\\\\\quad`\n\t\t\t\t+ this.expr.expandMeta(true).toTeXString(true);\n\t}\n}\n\nimport $Variable from \"./$Variable\";\nimport Expr0 from \"./Expr0\";\nimport Metaexpr from \"./Metaexpr\";\nimport Node, { Precedence } from \"./Node\";\nimport ObjectType from \"./ObjectType\";\nimport Variable from \"./Variable\";\nimport ObjectFun from \"./ObjectFun\";\nimport StackTrace from \"../StackTrace\";\nimport ExecutionContext from \"../ExecutionContext\";\n\ninterface SchemaArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\tannotations: string[];\n\taxiomatic: boolean;\n\tname?: string;\n\tparams: Variable[];\n\tcontext: ExecutionContext;\n\tdef$s: $Variable[];\n\texpr: Metaexpr;\n}","import ExecutionContext from '../ExecutionContext';\nimport StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Expr0 from './Expr0';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Variable from './Variable';\n\ninterface TeeArgumentType {\n\tleft: Metaexpr[];\n\tdef$s?: $Variable[];\n\tright: Metaexpr;\n}\n\nexport default class Tee extends Metaexpr {\n\n\tpublic readonly left: Metaexpr[];\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly right: Metaexpr;\n\n\tconstructor ({left, def$s, right}: TeeArgumentType, trace: StackTrace) {\n\t\tif (!(left instanceof Array\n\t\t\t\t&& left.every(l => {\n\t\t\t\t\treturn l.type instanceof ObjectType\n\t\t\t\t\t\t|| l.type instanceof MetaType;\n\t\t\t\t}))) {\n\t\t\tconsole.log(left);\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tif (def$s && !(def$s instanceof Array && def$s.every($ => $ instanceof $Variable)))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\n\t\tif (!(right.type instanceof ObjectType || right.type instanceof MetaType)) {\n\t\t\tconsole.log(right);\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tif (right.type.isFunctional) {\n\t\t\tthrow Node.error('RHS of a rule cannot be a schema', trace);\n\t\t}\n\n\t\tsuper(trace, null, null, new MetaType({\n\t\t\tfunctional: false,\n\t\t\tleft: left.map(e => e.type),\n\t\t\tright: right.type\n\t\t}));\n\n\t\tthis.left = left;\n\t\tthis.def$s = def$s || [];\n\t\tthis.right = right;\n\t\tthis.precedence = Node.PREC_COMMA;\n\t}\n\n\tpublic isProved(hyps?) {\n\t\thyps = hyps || [];\n\t\n\t\treturn super.isProved(hyps) || this.right.isProved(hyps.concat(this.left));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tvar left = this.left.map(e => e.substitute(map));\n\t\tvar right = this.right.substitute(map);\n\n\t\treturn new Tee({\n\t\t\tleft, right\n\t\t}, this.trace);\n\t}\n\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\tvar left = this.left.map(lef => lef.expandMeta(andFuncalls));\n\t\tvar right = this.right.expandMeta(andFuncalls);\n\n\t\treturn new Tee({left, right}, this.trace);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.TWO;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (!(obj instanceof Tee)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tif (this.left.length != obj.left.length) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tfor (var i = 0; i < this.left.length; i++) {\n\t\t\tif (!this.left[i].equals(obj.left[i], context)) return false;\n\t\t}\n\n\t\treturn this.right.equals(obj.right, context);\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (!this.left.length) {\n\t\t\treturn '|- ' + this.right.toIndentedString(indent);\n\t\t}\n\t\n\t\treturn [\n\t\t\t'\\t' + this.left.map(e => e.toIndentedString(indent + 1)).join(',\\n' + '\\t'.repeat(indent + 1)),\n\t\t\t'|-',\n\t\t\t'\\t' + this.right.toIndentedString(indent + 1)\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar expanded = this.expandMeta(true) as Tee;\n\n\t\treturn [\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\t\t\t`{${expanded.left.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')} \\\\vdash ${expanded.right.toTeXString(Node.PREC_COMMA)}}`,\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t].join('');\n\t}\n}","import StackTrace from \"../StackTrace\";\nimport Node from \"./Node\";\n\nexport default abstract class Type extends Node {\n\tpublic readonly isFunctional: boolean;\n\tpublic readonly isSimple: boolean;\n\t\n\tpublic abstract equals(t: Type): boolean;\n\n\tconstructor (trace: StackTrace, doc: string, tex: string, isFunctional: boolean) {\n\t\tsuper(trace, doc, tex);\n\t\tthis.isFunctional = isFunctional;\n\t\tthis.isSimple = !isFunctional;\n\t}\n\n\tpublic abstract resolve(): Type;\n}","export default interface Nameable {\n\tname: string;\n}\n\nexport function isNameable(obj: object): obj is Nameable {\n\treturn 'name' in obj;\n}","import ExecutionContext from '../ExecutionContext';\nimport StackTrace from '../StackTrace';\nimport Expr0 from './Expr0';\nimport Fun from './Fun';\nimport Funcall from './Funcall';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Tee from './Tee';\nimport Variable from './Variable';\n\ninterface ReductionArgumentType {\n\tsubject: Metaexpr;\n\tguesses: Expr0[];\n\tleftargs: Metaexpr[];\n\tas: Metaexpr;\n}\n\nexport default class Reduction extends Metaexpr {\n\t\n\tpublic readonly subject: Metaexpr;\n\tpublic readonly guesses: Expr0[];\n\tpublic readonly leftargs: Metaexpr[];\n\tpublic readonly reduced: Metaexpr;\n\n\tconstructor ({subject, guesses, leftargs, as}: ReductionArgumentType, context: ExecutionContext, trace: StackTrace) {\n\t\tif (guesses) {\n\t\t\tlet resolvedType = subject.type.resolve() as ObjectType | MetaType,\n\t\t\t\tparamTypes = resolvedType.from,\n\t\t\t\targTypes = guesses.map(e => e && e.type);\n\n\t\t\tif (paramTypes.length != argTypes.length)\n\t\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\t\tif (argTypes[i] && !paramTypes[i].equals(argTypes[i])) {\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (subject instanceof Fun) {\n\t\t\tsubject.params.forEach((p, i) => {\n\t\t\t\tif (!(guesses && guesses[i]) && !p.guess) {\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} could not be guessed`, trace);\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tvar derefs = subject.params.map((p, i) => {\n\t\t\t\tif (guesses && guesses[i]) return guesses[i];\n\n\t\t\t\tvar tee = (subject as Fun).expr.expandMeta(false) as Tee;\n\t\n\t\t\t\treturn Reduction.query(\n\t\t\t\t\tp.guess,\n\t\t\t\t\ttee.left, leftargs,\n\t\t\t\t\ttee.right, as,\n\t\t\t\t\tcontext, trace\n\t\t\t\t);\n\t\t\t});\n\t\n\t\t\tsubject = new Funcall({\n\t\t\t\tfun: subject,\n\t\t\t\targs: derefs,\n\t\t\t}, trace);\n\t\t} else if (guesses) {\n\t\t\tthrow Node.error('Something\\'s wrong', trace);\n\t\t}\n\t\n\t\tif (!(subject.type instanceof MetaType && subject.type.isSimple))\n\t\t\tthrow Node.error('Subject is not reducible', trace);\n\t\n\t\tif (!(leftargs instanceof Array)\n\t\t\t\t|| leftargs.map(e => e instanceof Node).some(e => !e))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\n\t\tvar paramTypes = subject.type.left,\n\t\t\tleftargTypes = leftargs.map(e => e.type);\n\n\t\tif (paramTypes.length != leftargTypes.length)\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${leftargTypes.length}`, trace);\n\n\t\tfor (let i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(leftargTypes[i]))\n\t\t\t\tthrow Node.error(`Illegal argument type (expected ${paramTypes[i]}): ${leftargTypes[i]}`, trace);\n\t\t}\n\n\t\tsuper(trace, null, null, subject.type.right);\n\n\t\tthis.subject = subject;\n\t\tthis.leftargs = leftargs;\n\n\t\tvar tee = subject.expandMeta(true);\n\n\t\tif (!(tee instanceof Tee)) {\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tvar leftargsExpanded = leftargs.map(arg => {\n\t\t\treturn arg.expandMeta(true);\n\t\t});\n\n\t\tfor (let i = 0; i < tee.left.length; i++) {\n\t\t\tif (!tee.left[i].equals(leftargsExpanded[i], context)) {\n\t\t\t\tthrow Node.error(`LHS #${i + 1} failed to match:\n\n--- EXPECTED ---\n${tee.left[i].expandMeta(true)}\n----------------\n\n--- RECEIVED ---\n${leftargs[i].expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\t\t}\n\n\t\tif (as) {\n\t\t\tif (!tee.right.equals(as, context)) {\n\t\t\t\tthrow Node.error(`RHS failed to match:\n\n--- EXPECTED ---\n${tee.right.expandMeta(true)}\n----------------\n\n--- RECEIVED (from [as ...]) ---\n${as.expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\n\t\t\tthis.reduced = as;\n\t\t} else {\n\t\t\tthis.reduced = tee.right;\n\t\t}\n\t}\n\n\tpublic isProved(hyps?): boolean {\n\t\thyps = hyps || [];\n\t\t\n\t\treturn super.isProved(hyps)\n\t\t\t|| this.subject.isProved(hyps)\n\t\t\t\t&& this.leftargs.every(l => l.isProved(hyps));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn this.reduced.substitute(map);\n\t}\n\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\treturn this.reduced.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FOUR;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\treturn this.reduced.equals(obj, context);\n\t}\n\n\tpublic static query(\n\t\t\tguess: string,\n\t\t\tleft: Metaexpr[], leftargs: Metaexpr[],\n\t\t\tright: Metaexpr, as: Metaexpr,\n\t\t\tcontext: ExecutionContext, trace: StackTrace) {\n\t\tif (guess.length == 0) throw Node.error('wut', trace);\n\n\t\tvar parameter: Metaexpr, argument: Metaexpr;\n\n\t\tif (guess[0] == 'r') {\n\t\t\tif (!as) {\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: expected output is not given`, trace);\n\t\t\t}\n\n\t\t\tparameter = right;\n\t\t\targument = as;\n\t\t} else {\n\t\t\tvar n = Number(guess[0]);\n\n\t\t\tif (!(1 <= n && n <= leftargs.length))\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent index out of range`, trace);\n\n\t\t\tparameter = left[n - 1];\n\t\t\targument = leftargs[n - 1];\n\t\t}\n\n\t\treturn (function recurse(\n\t\t\t\tguess: string, ptr: number,\n\t\t\t\tparameter: Metaexpr, argument: Metaexpr) {\n\t\t\targument = argument.expandMeta(true);\n\t\t\t\n\t\t\tif (guess.length <= ptr) return argument;\n\n\t\t\tif (/[0-9]/.test(guess[ptr])) {\n\t\t\t\tvar n = Number(guess[ptr]);\n\n\t\t\t\tif (parameter instanceof Tee && argument instanceof Tee) {\n\t\t\t\t\tif (parameter.left.length != argument.left.length) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent length mismatch`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(1 <= n && n <= argument.left.length)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent index out of range`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn recurse(guess, ptr + 1, parameter.left[n - 1], argument.left[n - 1]);\n\t\t\t\t}\n\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(parameter instanceof Funcall) || !(argument instanceof Funcall)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (parameter.fun.equals(argument.fun, context)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!argument.isExpandable(context)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\targument = argument.expandOnce(context);\n\t\t\t\t}\n\n\t\t\t\tif (!argument.args || !(1 <= n && n <= argument.args.length))\n\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, trace);\n\n\t\t\t\treturn recurse(guess, ptr + 1, parameter.args[n - 1], argument.args[n - 1]);\n\t\t\t} else if (guess[ptr] == 'r') {\n\t\t\t\tif (parameter instanceof Tee && argument instanceof Tee) {\n\t\t\t\t\treturn recurse(guess, ptr + 1, parameter.right, argument.right);\n\t\t\t\t}\n\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, trace);\n\t\t\t}\n\n\t\t\tthrow Node.error(`Cannot dereference @${guess}`, trace);\n\t\t})(guess, 1, parameter, argument);\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar leftargs: any = this.leftargs.map(arg => {\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (leftargs.join('').length <= 50) {\n\t\t\tleftargs = this.leftargs.map(arg => {\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\tleftargs = leftargs.join(', ');\n\t\n\t\t\treturn [\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t\tleftargs,\n\t\t\t\t']'\n\t\t\t].join('');\n\t\t}\n\t\telse {\n\t\t\tleftargs = leftargs.join(',\\n' + '\\t'.repeat(indent + 1));\n\t\n\t\t\treturn [\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t\t'\\t' + leftargs,\n\t\t\t\t']'\n\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t}\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `${this.subject.toTeXString(false)}[${this.leftargs.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}]`;\n\t}\n}","var grammar;\n\nif (process.env.__webpack__) {\n\tgrammar = require('raw-loader!./grammar.pegjs').default;\n} else {\n\tvar fs = require('fs');\n\tvar path = require('path');\n\n\tgrammar = fs.readFileSync(path.join(__dirname, 'grammar.pegjs'), 'utf-8');\n}\n\nvar Program = require('./Program').default;\n\nmodule.exports = {grammar, Program};","export default \"start =\\n\\t_ lines:(a:line _ {return a})* {return lines}\\n\\nline =\\n\\timport\\n\\t/ typedef\\n\\t/ defv\\n\\t/ defun\\n\\t/ defschema\\n\\nevaluable =\\n\\t_ e:evaluable_internal _ {return e}\\n\\nevaluable_internal =\\n\\ttypedef\\n\\t/ defv\\n\\t/ defun\\n\\t/ defschema\\n\\t/ metaexpr\\n\\nimport =\\n\\t'import' __\\n\\tfilename:ident _\\n\\tsem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'import',\\n\\t\\t\\tfilename,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ntypedef =\\n\\tdoc:(documentation __)?\\n\\tbase:(\\\"base\\\" __)?\\n\\t\\\"type\\\" __\\n\\torigin:(o:ftype __ {return o})?\\n\\tname:ident _ sem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'typedef',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\tbase: !!base,\\n\\t\\t\\torigin,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefv =\\n\\tdoc:(documentation __)? tex:(tex __)? type:type __ name:ident _ sem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: false,\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefparam =\\n\\ttex:(tex __)? type:type __ name:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: true,\\n\\t\\t\\tdoc: null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefschemaparam =\\n\\ttex:(tex __)? type:type __ name:ident\\n\\tguess:(_ ':' _ '@' g:$[a-z0-9_]+ {return g})?\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: true,\\n\\t\\t\\tdoc: null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\tguess,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n \\ndefun =\\n\\tdoc:(documentation __)?\\n\\ttex:(tex __)?\\n\\tsealed:('sealed' __)?\\n\\trettype:type __\\n\\tname:ident _\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\texpr:(\\n\\t\\t\\\"{\\\" _\\n\\t\\texpr:expr0 _\\n\\t\\t\\\"}\\\"\\n\\t\\t{return expr}\\n\\t\\t/ sem {return null}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defun',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\tsealed: !!sealed,\\n\\t\\t\\trettype,\\n\\t\\t\\tname,\\n\\t\\t\\tparams,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefschema =\\n\\tdoc:(documentation __)?\\n\\tannotations: (a:annotation __ {return a})*\\n\\taxiomatic:(\\\"axiomatic\\\" __)?\\n\\t\\\"schema\\\" __\\n\\tname:ident _\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defschemaparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defschemaparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\tusing:(\\n\\t\\t'using' __\\n\\t\\tx:(\\n\\t\\t\\thead:ident _\\n\\t\\t\\ttail:(',' _ n:ident _ {return n})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)\\n\\t\\t{return x}\\n\\t)?\\n\\t\\\"{\\\" _\\n\\tdefdollars: (d:defdollar _ {return d})* _\\n\\texpr:metaexpr _\\n\\t\\\"}\\\"\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defschema',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\tannotations,\\n\\t\\t\\taxiomatic: !!axiomatic,\\n\\t\\t\\tname,\\n\\t\\t\\tparams,\\n\\t\\t\\tusing: using || [],\\n\\t\\t\\tdef$s: defdollars,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// var[...]\\n// foo(...)[...]\\n// foo[...][...]\\n// (metaexpr)[...]\\n// schema(?, ...)[...]\\nreduction =\\n\\tsubject:(\\n\\t\\tschemacall\\n\\t\\t/ var\\n\\t\\t/ \\\"(\\\" _\\n\\t\\te:metaexpr _\\n\\t\\t\\\")\\\"\\n\\t\\t{return e}\\n\\t) _\\n\\tguesses:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:('?' {return null} / expr0) _\\n\\t\\t\\ttail:(\\\",\\\" _ e:('?' {return null} / expr0) _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)?\\n\\tleftargs:(\\n\\t\\t\\\"[\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:metaexpr _\\n\\t\\t\\ttail:(\\\";\\\" _ e:metaexpr _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\"]\\\"\\n\\t\\tb:(\\n\\t\\t\\t_ '[' _\\n\\t\\t\\t'as' __\\n\\t\\t\\tm:metaexpr\\n\\t\\t\\t']'\\n\\t\\t\\t{return m}\\n\\t\\t)?\\n\\t\\t{return {a: a || [], b: b || null}}\\n\\t)+\\n\\t{\\n\\t\\tvar ret = {\\n\\t\\t\\t_type: 'reduction',\\n\\t\\t\\tsubject,\\n\\t\\t\\tguesses,\\n\\t\\t\\tleftargs: leftargs[0].a,\\n\\t\\t\\tas: leftargs[0].b,\\n\\t\\t\\tlocation: location()\\n\\t\\t};\\n\\n\\t\\tfor (var i = 1; i < leftargs.length; i++) {\\n\\t\\t\\tret = {\\n\\t\\t\\t\\t_type: 'reduction',\\n\\t\\t\\t\\tsubject: ret,\\n\\t\\t\\t\\tguesses: null,\\n\\t\\t\\t\\tleftargs: leftargs[i].a,\\n\\t\\t\\t\\tas: leftargs[i].b,\\n\\t\\t\\t\\tlocation: location()\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t}\\n\\n// var(...)\\n// (metaexpr)(...)\\nschemacall =\\n\\tschema:(\\n\\t\\tvar\\n\\t\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\"\\n\\t\\t{return e}\\n\\t) _\\n\\targs:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:expr0 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'schemacall',\\n\\t\\t\\tschema,\\n\\t\\t\\targs,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// forall(f, g)\\n// (expr0)(f, g)\\nfuncall =\\n\\tschema:(\\n\\t\\tvar\\n\\t\\t/ \\\"(\\\" _\\n\\t\\te:expr0 _\\n\\t\\t\\\")\\\"\\n\\t\\t{return e}\\n\\t) _\\n\\targs:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:expr0 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'funcall',\\n\\t\\t\\tschema,\\n\\t\\t\\targs,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// (T t) => expr0\\n// (T t) => { expr0 }\\nfunexpr =\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\t\\\"=>\\\" _\\n\\texpr:(\\n\\t\\texpr0\\n\\t\\t/ \\\"{\\\" _ e:expr0 _ \\\"}\\\" {return e}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'funexpr',\\n\\t\\t\\tparams,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// (T t) => metaexpr_internal_1\\n// (T t) => { $foo = ...; metaexpr }\\nschemaexpr =\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\t\\\"=>\\\" _\\n\\tfoo:(\\n\\t\\texpr:metaexpr_internal_1\\n\\t\\t{return {defdollars: [], expr}}\\n\\t\\t/ \\\"{\\\" _\\n\\t\\tdefdollars: (d:defdollar _ {return d})* _\\n\\t\\texpr:metaexpr _\\n\\t\\t\\\"}\\\"\\n\\t\\t{return {defdollars, expr}}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'schemaexpr',\\n\\t\\t\\tparams,\\n\\t\\t\\tdef$s: foo.defdollars,\\n\\t\\t\\texpr: foo.expr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nmetaexpr =\\n\\tleft:(\\n\\t\\tl:(\\n\\t\\t\\thead:metaexpr_internal_1 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:metaexpr_internal_1 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)? {return l || []}\\n\\t)\\n\\t\\\"|-\\\" _\\n\\tdefdollars: (d:defdollar _ {return d})* _\\n\\tright:metaexpr\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'tee',\\n\\t\\t\\tdef$s: defdollars,\\n\\t\\t\\tleft,\\n\\t\\t\\tright,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\t/ metaexpr_internal_1\\n\\n/*\\n * 다음이 성립하여야 한다.\\n *\\n * - reduction이 schemacall보다 앞이다.\\n * - schemacall이 var보다 앞이다.\\n *\\n */\\nmetaexpr_internal_1 =\\n\\treduction\\n\\t/ schemacall\\n\\t/ var\\n\\t/ schemaexpr\\n\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\" {return e}\\n\\nexpr0 =\\n\\tfuncall\\n\\t/ funexpr\\n\\t/ var\\n\\t/ \\\"(\\\" _ e:expr0 _ \\\")\\\" {return e}\\n\\ndefdollar =\\n\\tname:dollar_ident _\\n\\t'=' _\\n\\texpr:metaexpr _\\n\\tsem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'def$',\\n\\t\\t\\tname,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t};\\n\\t}\\n\\ntype =\\n\\tstype\\n\\t/ ftype\\n\\nstype =\\n\\tname:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'type',\\n\\t\\t\\tftype: false,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nftype =\\n\\t\\\"[\\\" _\\n\\tfrom:(\\n\\t\\ttype:type {return [type]}\\n\\t\\t/ (\\n\\t\\t\\ttt:(\\n\\t\\t\\t\\t\\\"(\\\" _\\n\\t\\t\\t\\thead: type\\n\\t\\t\\t\\ttail:(_ \\\",\\\" _ t:type {return t})*\\n\\t\\t\\t\\t_ \\\")\\\"\\n\\t\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t\\t)\\n\\t\\t\\t{return tt}\\n\\t\\t)\\n\\t) _\\n\\t\\\"->\\\" _\\n\\tto:type _\\n\\t\\\"]\\\"\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'type',\\n\\t\\t\\tftype: true,\\n\\t\\t\\tfrom,\\n\\t\\t\\tto,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nvar =\\n\\tat_var\\n\\t/ dollar_var\\n\\t/ plain_var\\n\\nat_var =\\n\\tname:at_ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: '@',\\n\\t\\t\\tname: name.slice(1),\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndollar_var =\\n\\tname:dollar_ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: '$',\\n\\t\\t\\tname: name,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nplain_var =\\n\\tname:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: 'normal',\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nkeyword =\\n\\t'as'\\n\\t/ 'axiomatic'\\n\\t/ 'base'\\n\\t/ 'import'\\n\\t/ 'schema'\\n\\t/ 'sealed'\\n\\t/ 'type'\\n\\t/ 'using'\\n\\nannotation =\\n\\t'@discouraged'\\n\\t/ '@deprecated'\\n\\nident =\\n\\t$(!(keyword ![a-zA-Z0-9_]) [a-zA-Z0-9_]+)\\n\\nat_ident =\\n\\t$('@' [a-zA-Z0-9_]+)\\n\\ndollar_ident =\\n\\t$('$' [a-zA-Z0-9_]+)\\n\\ndocumentation =\\n\\t'\\\"' b:$(!'\\\"' a:. {return a})* '\\\"' {\\n\\t\\treturn b\\n\\t}\\n\\ntex =\\n\\t'$' b:$(!'$' a:. {return a})* '$' {\\n\\t\\treturn b\\n\\t}\\n\\ncomment =\\n\\t\\\"#\\\" (!newline .)*\\n\\t/ \\\"//\\\" (!newline .)*\\n\\t/ \\\"/*\\\" (!\\\"*/\\\" .)* \\\"*/\\\"\\n\\nnewline =\\n\\t\\\"\\\\r\\\\n\\\" / \\\"\\\\r\\\" / \\\"\\\\n\\\"\\n\\n// optional whitespace\\n_ =\\n\\t([ \\\\t\\\\n\\\\r] / comment)*\\n\\n// mandatory whitespace\\n__ =\\n\\t([ \\\\t\\\\n\\\\r] / comment)+\\n\\nsem =\\n\\t\\\";\\\"\";","import PegInterface from './PegInterface';\nimport { EvaluableObject, LineObject } from './PegInterfaceDefinitions';\nimport ProofExplorer from './ProofExplorer';\nimport Scope from './Scope';\n\ninterface LoaderReturnType {\n\tfileUri?: string;\n\tcode: string;\n}\n\ntype LoaderType = (packageName: string) => (LoaderReturnType | Promise<LoaderReturnType>);\n\nexport default class Program {\n\tpublic scope: Scope;\n\tpublic readonly parser;\n\tpublic readonly scopeMap: Map<string, Scope> = new Map();\n\t\n\tconstructor (parser) {\n\t\tif (!parser) throw Error('no');\n\t\tthis.parser = parser;\n\t}\n\n\tpublic async loadModule(filename: string, loader: LoaderType): Promise<Scope> {\n\t\treturn this.scope = await this.loadModuleInternal(filename, loader);\n\t}\n\n\tprivate async loadModuleInternal(filename: string, loader: LoaderType): Promise<Scope> {\n\t\tif (this.scopeMap.has(filename)) {\n\t\t\treturn this.scopeMap.get(filename);\n\t\t}\n\n\t\tvar {fileUri, code} = await loader(filename);\n\n\t\tvar scope = new Scope(fileUri, null);\n\t\tvar parsed = this.parser.parse(code);\n\n\t\tawait this.feed(parsed, scope, loader);\n\n\t\tthis.scopeMap.set(filename, scope);\n\t\treturn scope;\n\t}\n\n\tpublic async feed(lines: LineObject[], scope: Scope=this.scope, loader) {\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tvar line = lines[i];\n\t\t\t\n\t\t\tswitch (line._type) {\n\t\t\t\tcase 'import':\n\t\t\t\t\tvar scope2 = await this.loadModuleInternal(line.filename, loader);\n\t\t\t\t\tscope.importMap.set(line.filename, scope2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'typedef':\n\t\t\t\t\tvar type = PegInterface.type(line, scope);\n\n\t\t\t\t\tif (scope.hasType(type.name)) {\n\t\t\t\t\t\tthrow scope.error(`Type ${type.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addType(type);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defv':\n\t\t\t\t\tvar variable = PegInterface.variable(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(variable.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${variable.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addVariable(variable);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defun':\n\t\t\t\t\tvar fun = PegInterface.fun(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(fun.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${fun.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addFun(fun);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defschema':\n\t\t\t\t\tvar schema = PegInterface.schema(line, scope, null);\n\n\t\t\t\t\tif (scope.hasSchema(schema.name)) {\n\t\t\t\t\t\tthrow scope.error(`Schema ${schema.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addSchema(schema);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic evaluate(line: EvaluableObject) {\n\t\tvar scope = new Scope('<repl>', this.scope);\n\n\t\tswitch (line._type) {\n\t\t\tcase 'typedef':\n\t\t\t\treturn PegInterface.type(line, scope);\n\t\t\tcase 'defv':\n\t\t\t\treturn PegInterface.variable(line, scope);\n\t\t\tcase 'defun':\n\t\t\t\treturn PegInterface.fun(line, scope);\n\t\t\tcase 'defschema':\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PegInterface.schema(line, scope, null);\n\t\t\tcase 'tee':\n\t\t\t\treturn PegInterface.tee(line, scope, null);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PegInterface.reduction(line, scope, null);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PegInterface.schemacall(line, scope, null);\n\t\t\tcase 'var':\n\t\t\t\treturn PegInterface.metavar(line, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t}\n\t}\n\n\tpublic getProofExplorer(name: string, ktx) {\n\t\treturn ProofExplorer.get(this.scope, name, ktx);\n\t}\n}","/*\n * PEG.js의 출력과 적절한 클래스 사이를 잇는 인터페이스.\n * PEG.js의 출력은 여기에서만 처리해야 한다.\n */\n\nimport ExecutionContext from './ExecutionContext';\nimport $Variable from './nodes/$Variable';\nimport Expr0 from './nodes/Expr0';\nimport Fun from './nodes/Fun';\nimport Funcall from './nodes/Funcall';\nimport Metaexpr from './nodes/Metaexpr';\nimport ObjectFun from './nodes/ObjectFun';\nimport ObjectType from './nodes/ObjectType';\nimport Reduction from './nodes/Reduction';\nimport Schema from './nodes/Schema';\nimport Tee from './nodes/Tee';\nimport Variable from './nodes/Variable';\nimport { Def$Object, DefschemaObject, DefunObject, DefvObject, Expr0Object, FuncallObject, FunexprObject, MetaexprObject, ReductionObject, SchemacallObject, SchemaexprObject, StypeObject, TeeObject, TypedefObject, TypeObject, VarObject } from './PegInterfaceDefinitions';\nimport Scope, { NestedTypeInput } from './Scope';\n\nfunction typeObjToString(obj: TypeObject): string {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) return (obj as StypeObject).name;\n\treturn '[' + obj.from.map(typeObjToString).join(', ') + ' -> '\n\t\t\t+ typeObjToString(obj.to) + ']';\n}\n\n/*\n * Scope#getType이나 Scope#hasType 등의 입력 형태로 바꾼다.\n * st\t\t\t\t\t\t-> 'st'\n * [cls -> st]\t\t\t\t-> ['cls', 'st']\n * [(cls, cls) -> st]\t\t-> ['cls', 'cls', 'st']\n * [[cls -> st] -> st]\t\t-> [['cls', 'st'], 'st']\n */\nfunction typeObjToNestedArr(obj: TypeObject): NestedTypeInput {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) {\n\t\tobj = obj as StypeObject;\n\n\t\tif (!obj.name)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.name;\n\t} else {\n\t\tif (!obj.from || !obj.to)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.from.map(typeObjToNestedArr).concat(\n\t\t\t[typeObjToNestedArr(obj.to)]\n\t\t);\n\t}\n}\n\nfunction varObjToString(obj: VarObject): string {\n\tswitch (obj.type) {\n\t\tcase '@':\n\t\t\treturn `@${obj.name}`;\n\t\tcase '$':\n\t\t\treturn `${obj.name}`;\n\t\tcase 'normal':\n\t\t\treturn `${obj.name}`;\n\t\tdefault:\n\t\t\tthrow Error(`Unknown type ${obj.type}`);\n\t}\n}\n\nexport default class PI {\n\tpublic static type(obj: TypedefObject, parentScope: Scope): ObjectType {\n\t\tif (obj._type != 'typedef')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope: Scope = parentScope.extend('type', obj.name, obj.location);\n\n\t\tvar origin: ObjectType = obj.origin ? scope.getType(typeObjToNestedArr(obj.origin)) : null;\n\n\t\tvar name: string = obj.name;\n\t\tvar doc: string = obj.doc;\n\t\tvar base: boolean = obj.base;\n\n\t\tif (base && origin) {\n\t\t\tthrow scope.error('Base type should not be an alias');\n\t\t}\n\n\t\tif (origin) {\n\t\t\treturn new ObjectType({\n\t\t\t\tname,\n\t\t\t\tdoc,\n\t\t\t\tbase,\n\t\t\t\torigin\n\t\t\t});\n\t\t}\n\n\t\treturn new ObjectType({\n\t\t\tfunctional: false,\n\t\t\tname,\n\t\t\tdoc,\n\t\t\tbase\n\t\t});\n\t}\n\n\tpublic static variable(obj: DefvObject | VarObject, parentScope: Scope): Variable | Fun {\n\t\tif (!['defv', 'var'].includes(obj._type)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tvar scope = parentScope.extend('variable', obj.name, obj.location);\n\n\t\tif (obj._type == 'var') {\n\t\t\tif (obj.type != 'normal') {\n\t\t\t\tthrow scope.error(`Variable type ${obj.type} not allowed`);\n\t\t\t}\n\n\t\t\tif (!scope.hasVariable(obj.name))\n\t\t\t\tthrow scope.error(`Undefined identifier ${varObjToString(obj)}`);\n\t\t\treturn scope.getVariable(obj.name);\n\t\t}\n\n\t\tif (!scope.hasType(typeObjToNestedArr(obj.type)))\n\t\t\tthrow scope.error(`Type ${typeObjToString(obj.type)} is not defined`);\n\n\t\tvar type = scope.getType(typeObjToNestedArr(obj.type));\n\n\t\treturn new Variable({\n\t\t\ttype,\n\t\t\tisParam: !!obj.isParam,\n\t\t\tguess: obj.guess || null,\n\t\t\tname: obj.name,\n\t\t\tdoc: obj.doc,\n\t\t\ttex: obj.tex\n\t\t}, scope.trace);\n\t}\n\n\tpublic static fun(obj: DefunObject | FunexprObject, parentScope: Scope): ObjectFun {\n\t\tif (obj._type != 'defun' && obj._type != 'funexpr')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar name = null,\n\t\t\tdoc = null,\n\t\t\ttex = null,\n\t\t\tsealed = false;\n\n\t\tif (obj._type == 'defun') {\n\t\t\tobj = obj as DefunObject;\n\t\t\tname = obj.name;\n\t\t\tdoc = obj.doc;\n\t\t\ttex = obj.tex;\n\t\t\tsealed = obj.sealed;\n\t\t}\n\n\t\tvar scope = parentScope.extend('fun', name, obj.location);\n\n\t\tvar type = null;\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\n\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\n\t\t\treturn scope.addVariable(tv) as Variable;\n\t\t});\n\t\tvar expr = null;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'defun':\n\t\t\t\tif (!scope.hasType(typeObjToNestedArr(obj.rettype)))\n\t\t\t\t\tthrow scope.error(`Type ${typeObjToString(obj.rettype)} is not defined`);\n\n\t\t\t\tvar rettype = scope.getType(typeObjToNestedArr(obj.rettype));\n\n\t\t\t\tif (obj.expr) {\n\t\t\t\t\texpr = PI.expr0(obj.expr, scope);\n\t\t\t\t\tif (!rettype.equals(expr.type))\n\t\t\t\t\t\tthrow scope.error(`Expression type ${expr.type} failed to match the return type ${rettype} of fun ${name}`);\n\t\t\t\t} else {\n\t\t\t\t\ttype = new ObjectType({\n\t\t\t\t\t\tfunctional: true,\n\t\t\t\t\t\tfrom: params.map(variable => variable.type),\n\t\t\t\t\t\tto: rettype\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'funexpr':\n\t\t\t\texpr = PI.expr0(obj.expr, scope);\n\t\t\t\ttype = null;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\n\t\tif (!expr && sealed) {\n\t\t\tthrow scope.error('Cannot seal a primitive fun');\n\t\t}\n\n\t\treturn new ObjectFun({annotations: [], sealed, type, name, params, expr, doc, tex}, scope.trace);\n\t}\n\n\tpublic static funcall(obj: FuncallObject, parentScope: Scope): Funcall {\n\t\tif (obj._type != 'funcall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('funcall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.expr0(obj.schema, scope);\n\n\t\tvar args = obj.args.map(arg => {\n\t\t\treturn PI.expr0(arg, scope);\n\t\t});\n\n\t\treturn new Funcall({fun, args}, scope.trace);\n\t}\n\n\tpublic static metaexpr(obj: MetaexprObject, parentScope: Scope, context: ExecutionContext): Metaexpr {\n\t\tif (!['tee', 'reduction', 'schemacall', 'schemaexpr', 'var'].includes(obj._type))\n\t\t\tthrow Error('Assertion failed');\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'tee':\n\t\t\t\treturn PI.tee(obj, scope, context);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PI.reduction(obj, scope, context);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PI.schemacall(obj, scope, context);\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PI.schema(obj, scope, context);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.metavar(obj, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static expr0(obj: Expr0Object, parentScope: Scope): Expr0 {\n\t\tif (!['funcall', 'funexpr', 'var'].includes(obj._type)) {\n\t\t\tconsole.log(obj);\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'funcall':\n\t\t\t\treturn PI.funcall(obj, scope);\n\t\t\tcase 'funexpr':\n\t\t\t\treturn PI.fun(obj, scope);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.variable(obj, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static metavar(obj: VarObject, parentScope: Scope): Metaexpr {\n\t\tif (obj._type != 'var')\n\t\t\tthrow Error('Assertion failed');\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj.type) {\n\t\t\tcase '@':\n\t\t\t\tif (obj.name.match(/^h[0-9]+$/)) {\n\t\t\t\t\tvar hypnum = Number(obj.name.slice(1)) - 1;\n\t\t\t\t\tif (hypnum >= scope.hypotheses.length) {\n\t\t\t\t\t\tthrow scope.error(`Hypothesis #${hypnum + 1} not found`);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn scope.hypotheses[hypnum];\n\t\t\t\t}\n\n\t\t\t\tthrow scope.error(`Unknown selector query ${varObjToString(obj)}`);\n\t\t\tcase '$':\n\t\t\t\tif (!scope.has$(obj.name)) {\n\t\t\t\t\tthrow scope.error(`${varObjToString(obj)} is not defined`);\n\t\t\t\t}\n\n\t\t\t\treturn scope.get$(obj.name);\n\t\t\tcase 'normal':\n\t\t\t\tif (!scope.hasSchema(obj.name))\n\t\t\t\t\tthrow scope.error(`Schema ${varObjToString(obj)} is not defined`);\n\n\t\t\t\treturn scope.getSchema(obj.name);\n\t\t\tdefault:\n\t\t\t\tthrow scope.error(`Unknown type ${obj.type}`);\n\t\t}\n\t}\n\n\tpublic static tee(obj: TeeObject, parentScope: Scope, context: ExecutionContext): Tee {\n\t\tif (obj._type != 'tee')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('tee', null, obj.location);\n\n\t\tvar left = obj.left.map(o => PI.metaexpr(o, scope, context));\n\n\t\tvar scopeRight = scope.extend('tee.right', null, obj.right.location);\n\t\tleft.forEach(l => scopeRight.hypotheses.push(l));\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scopeRight, context);\n\n\t\t\tif (scopeRight.hasOwn$($v.name)) {\n\t\t\t\tthrow scopeRight.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scopeRight.add$($v);\n\t\t});\n\n\t\tvar right = PI.metaexpr(obj.right, scopeRight, context);\n\n\t\treturn new Tee({left, def$s, right}, scope.trace);\n\t}\n\n\tpublic static def$(obj: Def$Object, parentScope: Scope, context: ExecutionContext): $Variable {\n\t\tif (obj._type != 'def$')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar scope = parentScope.extend('def$', obj.name, obj.location);\n\t\t\n\t\tvar expr = PI.metaexpr(obj.expr, scope, context);\n\n\t\treturn new $Variable({name: obj.name, expr}, scope.trace);\n\t}\n\n\tpublic static schema(obj: DefschemaObject | SchemaexprObject, parentScope: Scope, oldContext: ExecutionContext): Schema {\n\t\tif (obj._type != 'defschema' && obj._type != 'schemaexpr')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar name = obj._type == 'defschema' ? obj.name : null;\n\n\t\tvar scope = parentScope.extend('schema', name, obj.location);\n\n\t\tvar axiomatic: boolean = false,\n\t\t\tdoc: string = null,\n\t\t\tannotations: string[] = [],\n\t\t\tcontext = oldContext;\n\n\t\tif (obj._type == 'defschema') {\n\t\t\taxiomatic = obj.axiomatic;\n\t\t\tdoc = obj.doc;\n\t\t\tannotations = obj.annotations;\n\n\t\t\tif (oldContext) {\n\t\t\t\tconsole.log(oldContext);\n\t\t\t\tthrow Error('duh');\n\t\t\t}\n\n\t\t\tvar using: ObjectFun[] = obj.using.map(name => {\n\t\t\t\tif (!scope.hasVariable(name)) {\n\t\t\t\t\tthrow scope.error(`Variable ${name} is not defined`);\n\t\t\t\t}\n\n\t\t\t\tvar fun = scope.getVariable(name);\n\n\t\t\t\tif (!(fun instanceof ObjectFun)) {\n\t\t\t\t\tthrow scope.error(`${name} is not a macro`);\n\t\t\t\t}\n\n\t\t\t\treturn fun;\n\t\t\t});\n\n\t\t\tcontext = new ExecutionContext(using);\n\t\t}\n\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\n\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\t\n\t\t\treturn scope.addVariable(tv) as Variable;\n\t\t});\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scope, context);\n\n\t\t\tif (scope.hasOwn$($v.name)) {\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scope.add$($v);\n\t\t});\n\n\t\tvar expr = PI.metaexpr(obj.expr, scope, context);\n\n\t\treturn new Schema({doc, annotations, axiomatic, name, params, context, def$s, expr}, scope.trace);\n\t}\n\n\tpublic static schemacall(obj: SchemacallObject, parentScope: Scope, context: ExecutionContext): Funcall {\n\t\tif (obj._type != 'schemacall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('schemacall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.metaexpr(obj.schema, scope, context);\n\n\t\tvar args = obj.args.map(obj => {\n\t\t\treturn PI.expr0(obj, scope);\n\t\t});\n\n\t\treturn new Funcall({\n\t\t\tfun,\n\t\t\targs\n\t\t}, scope.trace);\n\t}\n\n\tpublic static reduction(obj: ReductionObject, parentScope: Scope, context: ExecutionContext): Reduction {\n\t\tif (obj._type != 'reduction')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tif (!context) {\n\t\t\tthrow Error('duh');\n\t\t}\n\n\t\tvar scope = parentScope.extend('reduction', 'name' in obj.subject ? obj.subject.name : null, obj.location);\n\n\t\tvar subject = PI.metaexpr(obj.subject, scope, context);\n\n\t\tvar guesses = !obj.guesses\n\t\t\t? null\n\t\t\t: obj.guesses.map(g => {\n\t\t\t\treturn g && PI.expr0(g, scope);\n\t\t\t});\n\n\t\tvar leftargs = obj.leftargs.map(obj => {\n\t\t\treturn PI.metaexpr(obj, scope, context);\n\t\t});\n\n\t\tvar as = obj.as && PI.metaexpr(obj.as, scope, context);\n\n\t\treturn new Reduction({\n\t\t\tsubject,\n\t\t\tguesses,\n\t\t\tleftargs,\n\t\t\tas\n\t\t}, context, scope.trace);\n\t}\n}","import ObjectFun from \"./nodes/ObjectFun\";\n\nexport default class ExecutionContext {\n\n\tpublic readonly usingList: ObjectFun[];\n\n\tconstructor (usingList?: ObjectFun[]) {\n\t\tthis.usingList = usingList || [];\n\t}\n\n\tpublic uses(fun: ObjectFun) {\n\t\treturn this.usingList.includes(fun);\n\t}\n}","import $Variable from \"./nodes/$Variable\";\nimport Fun from \"./nodes/Fun\";\nimport Funcall from \"./nodes/Funcall\";\nimport Metaexpr from \"./nodes/Metaexpr\";\nimport { isNameable } from \"./nodes/Nameable\";\nimport ObjectFun from \"./nodes/ObjectFun\";\nimport Reduction from \"./nodes/Reduction\";\nimport Schema from \"./nodes/Schema\";\nimport Tee from \"./nodes/Tee\";\nimport Variable from \"./nodes/Variable\";\nimport Scope from \"./Scope\";\n\nexport default class ProofExplorer {\n\tpublic static get(scope: Scope, name: string, ktx) {\n\t\tvar DIAMOND = '&#x25C7;',\n\t\t\tDOWN = '&#x25BC;';\n\t\t// var UP = '&#x25B2;';\n\t\t\n\t\tif (!scope.hasSchema(name)) {\n\t\t\tthrow Error('wut');\n\t\t}\n\t\n\t\tvar theexpr = scope.getSchema(name);\n\t\n\t\tvar ncols = (function recurse(expr: Metaexpr) {\n\t\t\tif (expr instanceof Reduction) {\n\t\t\t\treturn Math.max(\n\t\t\t\t\t...expr.leftargs.map(recurse),\n\t\t\t\t\t((expr.subject instanceof Fun && expr.subject.name)\n\t\t\t\t\t\t|| (expr.subject instanceof Funcall\n\t\t\t\t\t\t\t\t&& isNameable(expr.subject.fun)\n\t\t\t\t\t\t\t\t&& expr.subject.fun.name)\n\t\t\t\t\t\t\t? 0 : recurse(expr.subject)),\n\t\t\t\t\t1\n\t\t\t\t);\n\t\t\t} else if (expr instanceof Schema) {\n\t\t\t\treturn Math.max(\n\t\t\t\t\t...expr.def$s.map($ => recurse($.expr)),\n\t\t\t\t\trecurse(expr.expr)\n\t\t\t\t) + 1;\n\t\t\t} else if (expr instanceof ObjectFun) {\n\t\t\t\treturn recurse(expr.expr) + 1;\n\t\t\t} else if (expr instanceof Tee) {\n\t\t\t\treturn Math.max(\n\t\t\t\t\t...expr.left.map(recurse),\n\t\t\t\t\t...expr.def$s.map($ => recurse($.expr)),\n\t\t\t\t\trecurse(expr.right)\n\t\t\t\t) + 1;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t})(theexpr);\n\n\t\tfunction getHtmlLine(ctr: string | number, left: any[], h1: string, h2: string | string[], options?) {\n\t\t\tvar padding = left.length;\n\n\t\t\tvar {bbb=false, rrb=false} = options || {};\n\t\n\t\t\tvar htmlLeft = left.map((e, i, a) => `<td class=\"${rrb && i == a.length - 1 ? 'rrb' : 'brb'}\">${e.map(f => ktx(f.toTeXStringWithId(true))).join(', ')}</td>`).join('');\n\n\t\t\tfor (var i = 0; i < left.length; i++)\n\t\t\t\twhile(left[i].length) left[i].pop();\n\t\n\t\t\treturn `<tr><th>${ctr}</th>${htmlLeft}<td ${bbb ? 'class=\"bbb\" ' : ''}colspan=\"${ncols-padding}\">${h1}</td>${h2 instanceof Array ? h2.map(e => `<td>${e}</td>`).join('') : `<td colspan=\"2\">${h2}</td>`}</tr>`;\n\t\t}\n\n\t\tfunction exprToHtml(expr, expand?) {\n\t\t\tif (typeof expr == 'number') return `<b>${expr}</b>`;\n\t\t\tif (expr instanceof Array) return `<b>${expr[0]}&ndash;${expr[1]}</b>`;\n\t\t\tif (expand) return ktx(expr.expandMeta(true).toTeXString(true));\n\t\t\t\n\t\t\treturn ktx(expr.toTeXString(true));\n\t\t}\n\n\t\tvar ctr = 0;\n\n\t\tvar tree = (function getTree(\n\t\t\t\texpr: Metaexpr,\n\t\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t\t$Map: Map<Metaexpr, number>) {\n\t\t\t\n\t\t\tif (hypnumMap.has(expr)) {\n\t\t\t\treturn [{\n\t\t\t\t\t_type: 'R',\n\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\tnum: hypnumMap.get(expr),\n\t\t\t\t\texpr\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif ($Map.has(expr)) {\n\t\t\t\treturn [{\n\t\t\t\t\t_type: 'R',\n\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\tnum: $Map.get(expr),\n\t\t\t\t\texpr\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (expr instanceof Reduction) {\n\t\t\t\tvar leftarglines = [];\n\t\t\t\tvar leftargnums = expr.leftargs.map(l => {\n\t\t\t\t\tif (hypnumMap.has(l)) return hypnumMap.get(l);\n\t\t\t\t\tif ($Map.has(l)) return $Map.get(l);\n\n\t\t\t\t\tvar lines = getTree(l, hypnumMap, $Map);\n\t\t\t\t\tleftarglines = leftarglines.concat(lines);\n\t\t\t\t\treturn lines[lines.length - 1].ctr;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tvar args = null;\n\t\t\t\tvar subjectlines = [];\n\t\t\t\tvar subjectnum = hypnumMap.get(expr.subject)\n\t\t\t\t\t|| $Map.get(expr.subject)\n\t\t\t\t\t|| (expr.subject instanceof Funcall && $Map.has(expr.subject.fun)\n\t\t\t\t\t\t? (args = expr.subject.args, $Map.get(expr.subject.fun))\n\t\t\t\t\t\t: false)\n\t\t\t\t\t|| ((s => s instanceof Fun && s.name\n\t\t\t\t\t\t\t|| s instanceof Funcall && isNameable(s.fun) && s.fun.name)(expr.subject)\n\t\t\t\t\t\t? expr.subject\n\t\t\t\t\t\t: (subjectlines = getTree(expr.subject, hypnumMap, $Map))[subjectlines.length-1].ctr);\n\n\t\t\t\treturn [\n\t\t\t\t\t...leftarglines,\n\t\t\t\t\t...subjectlines,\n\t\t\t\t\t{\n\t\t\t\t\t\t_type: 'E',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\tsubject: subjectnum,\n\t\t\t\t\t\targs,\n\t\t\t\t\t\tleftargs: leftargnums,\n\t\t\t\t\t\treduced: expr.reduced\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t} else if (expr instanceof Funcall) {\n\t\t\t\tif (hypnumMap.has(expr.fun)) {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\t_type: 'RC',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\tschema: hypnumMap.get(expr.fun),\n\t\t\t\t\t\targs: expr.args,\n\t\t\t\t\t\texpr\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tif ($Map.has(expr.fun)) {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\t_type: 'RC',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\tschema: $Map.get(expr.fun),\n\t\t\t\t\t\targs: expr.args,\n\t\t\t\t\t\texpr\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tif (expr.fun instanceof Schema && expr.fun.name) {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\t_type: 'RCX',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\texpr\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tif (!(expr.fun instanceof Schema)) {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\t_type: 'NP',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\texpr\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tvar schemalines = getTree(expr.fun, hypnumMap, $Map);\n\n\t\t\t\treturn [\n\t\t\t\t\t...schemalines,\n\t\t\t\t\t{\n\t\t\t\t\t\t_type: 'RC',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\tschema: schemalines[schemalines.length - 1].ctr,\n\t\t\t\t\t\targs: expr.args,\n\t\t\t\t\t\texpr\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t} else if (expr instanceof Variable) {\n\t\t\t\treturn [{\n\t\t\t\t\t_type: 'NP',\n\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\texpr\n\t\t\t\t}];\n\t\t\t} else if (expr instanceof Fun) {\n\t\t\t\tif (expr instanceof Schema && expr.name && expr != theexpr) {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\t_type: 'RS',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\texpr\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tif (!expr.expr) {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\t_type: 'NP',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\texpr\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\t$Map = new Map($Map);\n\n\t\t\t\tvar start = ctr + 1;\n\n\t\t\t\tvar $lines = [];\n\t\t\t\t\n\t\t\t\tif (expr instanceof Schema) {\n\t\t\t\t\texpr.def$s.forEach($ => {\n\t\t\t\t\t\tvar lines = getTree($.expr, hypnumMap, $Map);\n\t\t\t\t\t\t$lines = $lines.concat(lines);\n\n\t\t\t\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t\t\t\t$Map.set($, $num);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn [{\n\t\t\t\t\t_type: 'V',\n\t\t\t\t\t$lines,\n\t\t\t\t\tlines: getTree(expr.expr, hypnumMap, $Map),\n\t\t\t\t\t// getHtmlLine 함수가 이 배열을 조작하기 때문에\n\t\t\t\t\t// shallow copy 해야 한다.\n\t\t\t\t\tparams: expr.params.slice(),\n\t\t\t\t\tctr: [start ,ctr]\n\t\t\t\t}];\n\t\t\t} else if (expr instanceof Tee) {\n\t\t\t\thypnumMap = new Map(hypnumMap);\n\t\t\t\tvar leftlines = [];\n\n\t\t\t\tvar start = ctr + 1;\n\n\t\t\t\texpr.left.forEach(l => {\n\t\t\t\t\thypnumMap.set(l, ++ctr);\n\t\t\t\t\tleftlines.push({\n\t\t\t\t\t\t_type: 'H',\n\t\t\t\t\t\tctr,\n\t\t\t\t\t\texpr: l\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t$Map = new Map($Map);\n\n\t\t\t\tvar $lines = [];\n\t\t\t\texpr.def$s.forEach($ => {\n\t\t\t\t\tvar lines = getTree($.expr, hypnumMap, $Map);\n\t\t\t\t\t$lines = $lines.concat(lines);\n\n\t\t\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t\t\t$Map.set($, $num);\n\t\t\t\t});\n\n\t\t\t\treturn [{\n\t\t\t\t\t_type: 'T',\n\t\t\t\t\tleftlines,\n\t\t\t\t\t$lines,\n\t\t\t\t\trightlines: getTree(expr.right, hypnumMap, $Map),\n\t\t\t\t\tctr: [start, ctr]\n\t\t\t\t}];\n\t\t\t} else if (expr instanceof $Variable) {\n\t\t\t\tif (!$Map.has(expr)) {\n\t\t\t\t\tthrow Error(`${expr.name} is not defined`);\n\t\t\t\t}\n\n\t\t\t\treturn [{\n\t\t\t\t\t_type: 'R',\n\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\tnum: $Map.get(expr),\n\t\t\t\t\texpr: expr.expr\n\t\t\t\t}];\n\t\t\t} else {\n\t\t\t\tconsole.log('Unknown metaexpr', expr);\n\t\t\t\treturn [{\n\t\t\t\t\t_type: '?',\n\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\texpr\n\t\t\t\t}];\n\t\t\t}\n\t\t})(theexpr, new Map(), new Map());\n\n\t\tvar html = '<table class=\"explorer\">';\n\t\thtml += `<tr><th>#</th><th colspan=\"${ncols}\">expr</th><th colspan=\"2\">rule</th></tr>`;\n\t\t\n\t\thtml += (function tree2html(lines, left) {\n\t\t\treturn lines.map(line => {\n\t\t\t\tswitch (line._type) {\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\treturn tree2html(line.$lines, left.concat([line.params]))\n\t\t\t\t\t\t\t+ tree2html(line.lines, left.concat([line.params]));\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\tvar newleft = left.concat([[]]);\n\n\t\t\t\t\t\tvar ret = '';\n\n\t\t\t\t\t\tif (line.leftlines.length == 0) {\n\t\t\t\t\t\t\tvar emptyleft = Array(left.length + 1).fill([]);\n\n\t\t\t\t\t\t\tret += getHtmlLine(\n\t\t\t\t\t\t\t\t'', emptyleft, '', '', {bbb: true, rrb: true}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tret += line.leftlines.map((line, i, a) => {\n\t\t\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\t\t\tnewleft,\n\t\t\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t\t\t'assumption',\n\t\t\t\t\t\t\t\t\t{bbb: i == a.length - 1, rrb: true}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}).join('');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tret += tree2html(\n\t\t\t\t\t\t\tline.$lines,\n\t\t\t\t\t\t\tnewleft\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tret += tree2html(\n\t\t\t\t\t\t\tline.rightlines,\n\t\t\t\t\t\t\tnewleft\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\tcase '?':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'???'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'H':\n\t\t\t\t\t\tthrow Error('no');\n\t\t\t\t\tcase 'R':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.num)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RS':\n\t\t\t\t\tcase 'RCX':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.expr)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RC':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, `${exprToHtml(line.schema)} (${line.args.map(a => exprToHtml(a)).join(', ')})`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'E':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.reduced, true),\n\t\t\t\t\t\t\t[DOWN, `${exprToHtml(line.subject)}${line.args ? ' (' + line.args.map(a => exprToHtml(a)).join(', ') + ')' : ''} [${line.leftargs.map(a => exprToHtml(a)).join(', ')}]`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'NP':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'<b class=\"red\">not proved</b>'\n\t\t\t\t\t\t);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\t`Unknown type ${line._type}`,\n\t\t\t\t\t\t\t''\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}).join('');\n\t\t})(tree[0].$lines.concat(tree[0].lines), []);\n\t\t\n\t\thtml += '</table>';\n\t\n\t\treturn html;\n\t}\n}","import $Variable from './nodes/$Variable';\nimport Fun from './nodes/Fun';\nimport Metaexpr from './nodes/Metaexpr';\nimport ObjectFun from './nodes/ObjectFun';\nimport ObjectType from './nodes/ObjectType';\nimport Schema from './nodes/Schema';\nimport Variable from './nodes/Variable';\nimport { LocationObject } from './PegInterfaceDefinitions';\nimport StackTrace from './StackTrace';\n\nexport type NestedTypeInput = string | NestedTypeInput[];\n\n/**\n * 변수 영역(scope).\n * 구문 분석 과정에서 name resolution을 할 때에만 사용해야 한다.\n */\nexport default class Scope {\n\tpublic readonly importMap: Map<string, Scope> = new Map();\n\n\tpublic readonly typedefMap: Map<string, ObjectType> = new Map();\n\tpublic readonly defMap: Map<string, Variable | ObjectFun> = new Map();\n\tpublic readonly schemaMap: Map<string, Schema> = new Map();\n\tpublic readonly $Map: Map<string, $Variable> = new Map();\n\tpublic readonly hypotheses: Metaexpr[] = [];\n\n\tpublic readonly parent: Scope;\n\tpublic readonly root: Scope;\n\n\tpublic readonly trace: StackTrace;\n\tpublic baseType: ObjectType;\n\n\tpublic readonly fileUri: string;\n\n\tconstructor (fileUri: string, parent: Scope, trace?: StackTrace) {\n\t\tthis.fileUri = fileUri;\n\n\t\tthis.parent = parent;\n\t\tthis.root = parent ? parent.root : this;\n\n\t\tif (trace && !(trace instanceof StackTrace)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tthis.trace = trace || new StackTrace(fileUri);\n\n\t\tthis.baseType = parent ? parent.baseType : null;\n\t}\n\n\tpublic extend(type: string, name: string, location: LocationObject): Scope {\n\t\tvar child = new Scope(this.fileUri, this, this.trace.extend({type, name, location}));\n\t\tthis.hypotheses.forEach(h => child.hypotheses.push(h));\n\t\treturn child;\n\t}\n\n\tpublic error(message: string): Error {\n\t\treturn this.trace.error(message);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasOwnType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasOwnType(e);\n\t\t}).every(e => e);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.hasOwnType(name)\n\t\t\t\t|| (!!this.parent && this.parent.hasType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasType(e);\n\t\t}).every(e => e);\n\t}\n\n\tpublic addType(type: ObjectType): ObjectType {\n\t\tif (!(type instanceof ObjectType))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!type.name)\n\t\t\tthrow this.error('Something\\'s wrong');\n\n\t\tif (this.hasOwnType(type.name))\n\t\t\tthrow this.error(`Type ${type.name} has already been declared`);\n\n\t\tif (type.isBaseType) {\n\t\t\tif (this.baseType) {\n\t\t\t\tthrow this.error('A base type already exists');\n\t\t\t}\n\n\t\t\t(function broadcast(scope: Scope) {\n\t\t\t\tscope.baseType = type;\n\t\t\t\tif (scope.parent) broadcast(scope.parent);\n\t\t\t})(this);\n\t\t}\n\n\t\tthis.typedefMap.set(type.name, type);\n\t\treturn type;\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic getType(name: NestedTypeInput): ObjectType {\n\t\tif (typeof name == 'string') {\n\t\t\tif (!this.hasType(name))\n\t\t\t\tthrow this.error(`Type ${name} is not defined`);\n\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t? this.typedefMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getType(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasType(name)\n\t\t\t\t\t})[0].getType(name);\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\tvar from = name.slice(0, name.length - 1).map(e => {\n\t\t\treturn this.getType(e);\n\t\t});\n\n\t\tvar to = this.getType(name[name.length - 1]);\n\n\t\treturn new ObjectType({\n\t\t\tfunctional: true,\n\t\t\tfrom,\n\t\t\tto\n\t\t});\n\t}\n\n\tpublic hasOwnVariable(name: string): boolean {\n\t\treturn this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnVariable(name));\n\t}\n\n\tpublic hasVariable(name: string): boolean {\n\t\treturn this.hasOwnVariable(name)\n\t\t\t|| (!!this.parent && this.parent.hasVariable(name));\n\t}\n\n\tpublic addVariable(variable: Variable | Fun): Variable | Fun {\n\t\tif (!(variable instanceof Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnVariable(variable.name))\n\t\t\tthrow this.error(`Definition ${variable.name} has already been declared`);\n\n\t\tthis.defMap.set(variable.name, variable);\n\t\treturn variable;\n\t}\n\n\tpublic addFun(fun: ObjectFun): ObjectFun {\n\t\tif (!(fun instanceof ObjectFun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!fun.name)\n\t\t\tthrow this.error('Cannot add anonymous fun to scope');\n\n\t\tif (this.hasOwnVariable(fun.name))\n\t\t\tthrow this.error(`Definition ${fun.name} has already been declared`);\n\n\t\tthis.defMap.set(fun.name, fun);\n\t\treturn fun;\n\t}\n\n\tpublic getVariable(name: string): Variable | ObjectFun {\n\t\tif (!this.hasVariable(name))\n\t\t\tthrow this.error(`Definition ${name} is not defined`);\n\n\t\treturn this.defMap.has(name)\n\t\t\t? this.defMap.get(name)\n\t\t\t: (!!this.parent && this.parent.getVariable(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.hasVariable(name)\n\t\t\t\t})[0].getVariable(name);\n\t}\n\n\tpublic hasOwnSchema(name: string): boolean {\n\t\treturn this.schemaMap.has(name) || this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnSchema(name));\n\t}\n\n\tpublic hasSchema(name: string): boolean {\n\t\treturn this.hasOwnSchema(name)\n\t\t\t|| (!!this.parent && this.parent.hasSchema(name));\n\t}\n\n\tpublic addSchema(schema: Schema): Schema {\n\t\tif (!(schema instanceof Fun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnSchema(schema.name))\n\t\t\tthrow this.error(`Schema ${schema.name} has already been declared`);\n\n\t\tthis.schemaMap.set(schema.name, schema);\n\t\treturn schema;\n\t}\n\n\tpublic getSchema(name: string): Variable | Fun {\n\t\tif (!this.hasSchema(name))\n\t\t\tthrow this.error(`Schema ${name} is not defined`);\n\n\t\treturn this.schemaMap.has(name)\n\t\t\t? this.schemaMap.get(name)\n\t\t\t: this.defMap.has(name)\n\t\t\t\t? this.defMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getSchema(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasSchema(name)\n\t\t\t\t\t})[0].getSchema(name);\n\t}\n\n\tpublic hasOwn$(name: string): boolean {\n\t\treturn this.$Map.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwn$(name));\n\t}\n\n\tpublic has$(name: string): boolean {\n\t\treturn this.hasOwn$(name)\n\t\t\t|| (!!this.parent && this.parent.has$(name));\n\t}\n\n\tpublic add$($: $Variable): $Variable {\n\t\tif (!($ instanceof $Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwn$($.name))\n\t\t\tthrow this.error(`$ variable ${$.name} has already been declared`);\n\n\t\tthis.$Map.set($.name, $);\n\t\treturn $;\n\t}\n\n\tpublic get$(name: string): $Variable {\n\t\tif (!this.has$(name))\n\t\t\tthrow this.error(`$ variable ${name} is not defined`);\n\n\t\treturn this.$Map.has(name)\n\t\t\t? this.$Map.get(name)\n\t\t\t: (!!this.parent && this.parent.get$(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.has$(name)\n\t\t\t\t})[0].get$(name);\n\t}\n}","import { LocationObject } from \"./PegInterfaceDefinitions\";\n\ninterface StackTraceElement {\n\ttype: string;\n\tname: string;\n\tlocation: LocationObject;\n}\n\nexport default class StackTrace {\n\n\tpublic readonly fileUri: string;\n\tpublic readonly stack: StackTraceElement[];\n\n\tconstructor (fileUri: string, stack?: StackTraceElement[]) {\n\t\tthis.fileUri = fileUri;\n\t\tthis.stack = stack || [];\n\t}\n\n\tpublic extend(element: StackTraceElement): StackTrace {\n\t\treturn new StackTrace(this.fileUri, [element].concat(this.stack));\n\t}\n\n\tpublic error(message: string) {\n\t\tvar fileUri = this.fileUri || '<unknown>';\n\n\t\treturn new Error(\n\t\t\tmessage\n\t\t\t+ '\\n\\tat '\n\t\t\t+ (\n\t\t\t\tthis.stack.length\n\t\t\t\t\t? this.stack.map(({type, name, location}) => {\n\t\t\t\t\t\treturn `${type} ${name || '<anonymous>'} (${fileUri}:${location.start.line}:${location.start.column})`;\n\t\t\t\t\t}).join('\\n\\tat ')\n\t\t\t\t\t: `<root> (${fileUri}:1:1)`\n\t\t\t)\n\t\t);\n\t}\n}"],"sourceRoot":""}