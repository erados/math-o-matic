{"version":3,"sources":["webpack://math/webpack/universalModuleDefinition","webpack://math/webpack/bootstrap","webpack://math/./src/nodes/Node.ts","webpack://math/./src/nodes/Typevar.ts","webpack://math/./src/nodes/Type.ts","webpack://math/./src/nodes/Schema.ts","webpack://math/./src/ExpressionResolver.ts","webpack://math/./src/nodes/Schemacall.ts","webpack://math/./src/nodes/MetaType.ts","webpack://math/./src/nodes/Tee.ts","webpack://math/./src/nodes/$var.ts","webpack://math/./src/entry.js","webpack://math/./src/grammar.pegjs","webpack://math/./src/Program.ts","webpack://math/./src/Scope.ts","webpack://math/./src/StackTrace.ts","webpack://math/./node_modules/process/browser.js","webpack://math/./src/PegInterface.ts","webpack://math/./src/nodes/Reduction.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","ctr","Node","scope","_id","toIndentedString","message","error","Error","replace","tex","precedence","code","match","g1","hyps","length","prec","Array","console","log","my","normalizePrecedence","your","id","args","ret","shouldConsolidate","_match","PREC_FUNEXPR","PREC_COMMA","PREC_COLONEQQ","Typevar","type","isParam","guess","doc","super","_type","isProved","toSimpleString","indent","escapeTeX","Type","isBaseType","base","origin","isFunctional","isSimple","functional","from","map","f","some","e","to","resolved","resolve","join","toTeXString","equals","Schema","shouldValidate","annotations","axiomatic","params","def$s","expr","parseTeX","typevar","proved","repeat","expandMetaAndFuncalls","funcallToTeXString","arg","makeTeX","iscall","a","makecall","schema","ER","substitute","has","left","right","reduced","callee","Map","set","expandCallOnce","callee_","expandMeta","b","recurseWrap","recurse","depth","every","_","placeholders","len","push","nequalscall","nequalstrue","nrecursecall","nrecursetrue","Schemacall","resolvedType","paramTypes","argTypes","MetaType","Tee","includes","$","concat","expanded","$var","grammar","default","Program","lines","forEach","line","hasType","addType","hasTypevar","addTypevar","fun","addFun","hasSchema","addSchema","typedef","defv","defun","defschema","tee","reduction","schemacall","var","schemaexpr","ktx","DIAMOND","schemaMap","theexpr","ncols","Math","max","leftargs","subject","getHtmlLine","h1","h2","options","padding","bbb","rrb","htmlLeft","pop","exprToHtml","expand","tree","getTree","hypnumMap","$Map","num","leftarglines","leftargnums","subjectlines","subjectnum","schemalines","start","$lines","$num","slice","leftlines","rightlines","html","tree2html","newleft","fill","Scope","parent","trace","typedefMap","defMap","hypotheses","baseType","location","child","extend","h","hasOwnType","broadcast","getType","hasOwnTypevar","getTypevar","hasOwnSchema","getSchema","hasOwn$","has$","get$","StackTrace","stack","filename","process","argv","column","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","runClearTimeout","marker","Item","array","noop","nextTick","arguments","apply","title","browser","env","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","typeObjToString","obj","ftype","typeObjToNestedArr","PI","parentScope","tvo","tv","rettype","expr0","metavar","funcall","hypnum","Number","metaexpr","scopeRight","$v","def$","add$","guesses","g","Reduction","derefs","query","leftargTypes","lef","that","node","ptr","test"],"mappings":"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","file":"math.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"math\"] = factory();\n\telse\n\t\troot[\"math\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","var ctr = 0;\r\n\r\nexport type Precedence = boolean | number | [number, number];\r\n\r\ninterface Nodeable {\r\n\ttoIndentedString: (indent: number, root?: boolean) => string;\r\n\ttoTeXString: (prec?: Precedence, root?: boolean) => string;\r\n\tisProved: (hyps) => boolean;\r\n}\r\n\r\nexport default abstract class Node implements Nodeable {\r\n\tpublic readonly _id: number;\r\n\tpublic readonly scope: Scope;\r\n\r\n\tpublic type: Type | MetaType;\r\n\tpublic doc: string;\r\n\tpublic tex: string;\r\n\tpublic precedence: Precedence;\r\n\r\n\tpublic static readonly PREC_FUNEXPR = 1000;\r\n\tpublic static readonly PREC_COMMA = 1000;\r\n\tpublic static readonly PREC_COLONEQQ = 100000;\r\n\r\n\tconstructor (scope?: Scope) {\r\n\t\tthis._id = ++ctr;\r\n\t\tthis.scope = scope;\r\n\t}\r\n\r\n\tpublic toString() {\r\n\t\treturn this.toIndentedString(0);\r\n\t}\r\n\r\n\tpublic abstract toIndentedString(indent: number, root?: boolean): string;\r\n\tpublic abstract toTeXString(prec?: Precedence, root?: boolean): string;\r\n\r\n\tpublic error(message) {\r\n\t\tif (this.scope) {\r\n\t\t\treturn this.scope.error(message);\r\n\t\t} else {\r\n\t\t\treturn new Error(message);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static escapeTeX(s) {\r\n\t\treturn s.replace(/&|%|\\$|#|_|{|}|~|\\^|\\\\/g, m => ({\r\n\t\t\t'&': '\\\\&', '%': '\\\\%', '$': '\\\\$',\r\n\t\t\t'#': '\\\\#', '_': '\\\\_', '{': '\\\\{',\r\n\t\t\t'}': '\\\\}',\r\n\t\t\t'~': '\\\\textasciitilde',\r\n\t\t\t'^': '\\\\textasciicircum',\r\n\t\t\t'\\\\': '\\\\textbackslash'\r\n\t\t})[m]);\r\n\t}\r\n\r\n\tpublic static parseTeX(tex) {\r\n\t\tvar precedence: Precedence = false;\r\n\r\n\t\tvar code = tex.replace(/^!<prec=([0-9]+)>/, (match, g1) => {\r\n\t\t\tprecedence = g1 * 1;\r\n\t\t\treturn '';\r\n\t\t});\r\n\r\n\t\treturn {precedence, code};\r\n\t}\r\n\r\n\tpublic isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\r\n\t\tfor (var i = 0; i < hyps.length; i++) {\r\n\t\t\tif (hyps[i] == this) return true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/*\r\n\t* false corresponds to 0.\r\n\t* true corresponds to w * 2.\r\n\t*/\r\n\tpublic static normalizePrecedence(prec: Precedence) {\r\n\t\tif (prec === false) return [0, 0];\r\n\t\tif (prec === true) return [2, 0];\r\n\t\tif (typeof prec == 'number') return [0, prec];\r\n\r\n\t\tif (!(prec instanceof Array && prec.length == 2)) {\r\n\t\t\tconsole.log(prec);\r\n\t\t\tthrow Error('wut');\r\n\t\t}\r\n\r\n\t\treturn prec;\r\n\t}\r\n\r\n\tpublic shouldConsolidate(prec: Precedence) {\r\n\t\tvar my = Node.normalizePrecedence(this.precedence || false),\r\n\t\t\tyour = Node.normalizePrecedence(prec || false);\r\n\r\n\t\tif (my[0] == 0 && my[1] == 0) return false;\r\n\r\n\t\treturn !(my[0] < your[0] || my[0] == your[0] && my[1] < your[1]);\r\n\t}\r\n\r\n\tpublic makeTeX(id, args, prec) {\r\n\t\targs = args || [];\r\n\t\tprec = prec || false;\r\n\t\t\r\n\t\tvar ret = this.tex;\r\n\r\n\t\tif (this.shouldConsolidate(prec)) {\r\n\t\t\tret = '\\\\left(' + ret + '\\\\right)';\r\n\t\t}\r\n\r\n\t\treturn ret.replace(/#([0-9]+)/g, (match, g1) => {\r\n\t\t\treturn args[g1 * 1 - 1] || `\\\\texttt{\\\\textcolor{red}{\\\\#${g1}}}`;\r\n\t\t}).replace(/<<(.+?)>>/, (_match, g1) => {\r\n\t\t\treturn `\\\\href{#${id}}{${g1}}`;\r\n\t\t});\r\n\t}\r\n}\r\n\r\n// 순환 참조를 피하기 위하여 export 후 import 한다.\r\nimport ExpressionResolver from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport MetaType from './MetaType';\r\nimport Type from './Type';","import Scope from '../Scope';\r\nimport Node, {Precedence} from './Node';\r\nimport Type from './Type';\r\n\r\ninterface TypevarArgumentType {\r\n\ttype: Type,\r\n\tisParam: boolean,\r\n\tguess?: string,\r\n\tname: string,\r\n\tdoc?: string,\r\n\ttex?: string\r\n}\r\n\r\nexport default class Typevar extends Node {\r\n\tpublic readonly _type = 'typevar';\r\n\r\n\tpublic readonly isParam: boolean;\r\n\tpublic readonly guess: string;\r\n\tpublic readonly type: Type;\r\n\tpublic readonly name: string;\r\n\r\n\tconstructor ({type, isParam, guess, name, doc, tex}: TypevarArgumentType, scope?: Scope) {\r\n\t\tsuper(scope);\r\n\r\n\t\tthis.doc = doc;\r\n\t\tthis.tex = tex;\r\n\r\n\t\tthis.isParam = !!isParam;\r\n\t\tthis.guess = guess || null;\r\n\r\n\t\ttype = type as Type;\r\n\r\n\t\tif (typeof name != 'string')\r\n\t\t\tthrow this.error('Assertion failed');\r\n\r\n\t\tthis.type = type;\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tpublic isProved(hyps) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps);\r\n\t}\r\n\r\n\t// pr f\r\n\tpublic toSimpleString() {\r\n\t\treturn this.type.toSimpleString() + ' ' + this.name;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn `${root ? this.type + ' ' : ''}${this.name}<${this._id}>`;\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tvar id = this.isParam ? `id-${this._id}` : `def-${this.name}`;\r\n\r\n\t\tvar tex = this.tex\r\n\t\t\t|| (\r\n\t\t\t\tthis.name.length == 1\r\n\t\t\t\t\t? Node.escapeTeX(this.name)\r\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.name)}}`\r\n\t\t\t);\r\n\t\t\r\n\t\treturn `\\\\href{#${id}}{${tex}}`;\r\n\t}\r\n}","import Node from './Node';\r\n\r\nexport default class Type extends Node {\r\n\tpublic readonly _type = 'type';\r\n\r\n\tpublic readonly isBaseType: boolean;\r\n\tpublic readonly isFunctional: boolean;\r\n\tpublic readonly isSimple: boolean;\r\n\tpublic readonly name: string;\r\n\tpublic readonly origin: Type;\r\n\tpublic readonly from: Type[];\r\n\tpublic readonly to: Type;\r\n\r\n\tconstructor (o) {\r\n\t\tsuper();\r\n\r\n\t\tthis.doc = o.doc;\r\n\t\tthis.isBaseType = !!o.base;\r\n\r\n\t\tif (o.origin) {\r\n\t\t\tif (typeof o.name != 'string')\r\n\t\t\t\tthrow this.error('typeof o.name != \\'string\\'');\r\n\t\t\tthis.name = o.name;\r\n\r\n\t\t\tif (!(o.origin instanceof Type))\r\n\t\t\t\tthrow this.error('!(o.origin instanceof Type)');\r\n\r\n\t\t\tthis.isFunctional = o.origin.isFunctional;\r\n\t\t\tthis.isSimple = o.origin.isSimple;\r\n\t\t\tthis.origin = o.origin;\r\n\t\t} else {\r\n\t\t\tif (typeof o.functional != 'boolean')\r\n\t\t\t\tthrow this.error('typeof o.functional != \\'boolean\\'');\r\n\t\t\tthis.isFunctional = o.functional;\r\n\t\t\tthis.isSimple = !o.functional;\r\n\r\n\t\t\tif (!o.functional) {\r\n\t\t\t\tif (typeof o.name != 'string')\r\n\t\t\t\t\tthrow this.error('typeof o.name != \\'string\\'');\r\n\t\t\t\tthis.name = o.name;\r\n\t\t\t} else {\r\n\t\t\t\tif (o.from.map(f => f instanceof Type).some(e => !e))\r\n\t\t\t\t\tthrow this.error('o.from.map(f => f instanceof Type).some(e => !e)');\r\n\t\t\t\tif (!(o.to instanceof Type))\r\n\t\t\t\t\tthrow this.error('!(o.to instanceof Type)');\r\n\r\n\t\t\t\tthis.from = o.from;\r\n\t\t\t\tthis.to = o.to;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toSimpleString() {\r\n\t\tif (this.name) return this.name;\r\n\r\n\t\tvar resolved = this.resolve();\r\n\r\n\t\treturn `[${resolved.from.map(e => e.toSimpleString()).join(', ')} -> ${resolved.to.toSimpleString()}]`;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent): string {\r\n\t\tif (this.isSimple) return this.name;\r\n\r\n\t\treturn `${this.name ? this.name + ': ' : ''}[${this.resolve().from.join(', ')} -> ${this.resolve().to}]`;\r\n\t}\r\n\r\n\tpublic toTeXString(root?: boolean) {\r\n\t\tif (this.isSimple) return `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\r\n\r\n\t\tif (!root && this.name) {\r\n\t\t\treturn `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\r\n\t\t}\r\n\r\n\t\treturn `${this.name ? `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}: ` : ''}`\r\n\t\t\t+ `\\\\left[${this.resolve().from.map(e => e.toTeXString()).join(' \\\\times ')}`\r\n\t\t\t+ ` \\\\to ${this.resolve().to.toTeXString()} \\\\right]`;\r\n\t}\r\n\r\n\tpublic resolve(): Type {\r\n\t\treturn this.origin ? this.origin.resolve() : this;\r\n\t}\r\n\r\n\tpublic equals(t: object): boolean {\r\n\t\tif (!(t instanceof Type)) return false;\r\n\r\n\t\tif (this.origin) return this.origin.equals(t);\r\n\t\tif (t.origin) return this.equals(t.origin);\r\n\r\n\t\tif (this.isSimple != t.isSimple) return false;\r\n\r\n\t\tif (this.isSimple) return this === t;\r\n\r\n\t\tif (this.from.length != t.from.length) return false;\r\n\r\n\t\tfor (var i = 0; i < this.from.length; i++)\r\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\r\n\r\n\t\treturn this.to.equals(t.to);\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport Type from './Type';\r\nimport MetaType from './MetaType';\r\n\r\nimport ExpressionResolver, { Metaexpr } from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport Typevar from './Typevar';\r\nimport $var from './$var';\r\n\r\ninterface SchemaArgumentType {\r\n\tshouldValidate: boolean;\r\n\tannotations: string[];\r\n\taxiomatic?: boolean;\r\n\ttype?: Type | MetaType;\r\n\tname?: string;\r\n\tparams?: (Typevar | Schema)[];\r\n\tdef$s?: $var[];\r\n\texpr?: Metaexpr;\r\n\tdoc?: string;\r\n\ttex?: string;\r\n}\r\n\r\nexport default class Schema extends Node {\r\n\tpublic readonly _type = 'schema';\r\n\r\n\tpublic readonly shouldValidate;\r\n\tpublic readonly annotations: string[];\r\n\tpublic readonly axiomatic: boolean;\r\n\tpublic readonly name: string;\r\n\tpublic readonly params;\r\n\tpublic readonly def$s: $var[];\r\n\tpublic readonly expr: Metaexpr;\r\n\tpublic readonly type: Type | MetaType;\r\n\tpublic readonly proved: boolean;\r\n\r\n\t/*\r\n\t * name, expr 중 하나 이상 있어야 하고 type, expr 중\r\n\t * 한 개만 있어야 한다.\r\n\t */\r\n\tconstructor ({doc, tex, shouldValidate, annotations, axiomatic, type, /* nullable */ name, params, def$s, expr}: SchemaArgumentType, scope?: Scope) {\r\n\t\tsuper(scope);\r\n\r\n\t\tthis.doc = doc;\r\n\t\tthis.shouldValidate = shouldValidate;\r\n\t\tthis.annotations = annotations;\r\n\r\n\t\tif (tex) {\r\n\t\t\tvar {precedence, code} = Node.parseTeX(tex);\r\n\r\n\t\t\tthis.precedence = precedence;\r\n\t\t\tthis.tex = code;\r\n\t\t} else {\r\n\t\t\tthis.precedence = false;\r\n\t\t\tthis.tex = null;\r\n\t\t}\r\n\r\n\t\tif (!name && !expr)\r\n\t\t\tthrow this.error('Anonymous fun cannot be primitive');\r\n\r\n\t\tif (type && expr)\r\n\t\t\tthrow this.error('no');\r\n\r\n\t\tif (!type && !expr)\r\n\t\t\tthrow this.error('Cannot guess the type of a primitive fun');\r\n\r\n\t\tif (name !== null && typeof name != 'string')\r\n\t\t\tthrow this.error('Assertion failed');\r\n\r\n\t\tif (expr && !(expr.type instanceof Type || expr.type instanceof MetaType)) {\r\n\t\t\tthrow this.error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tthis.axiomatic = axiomatic;\r\n\t\tthis.name = name;\r\n\r\n\t\tif (!(params instanceof Array)\r\n\t\t\t\t|| params.map(e => e instanceof Typevar).some(e => !e))\r\n\t\t\tthrow this.error('Assertion failed');\r\n\t\t\r\n\t\tif (expr !== null && !(expr instanceof Node))\r\n\t\t\tthrow this.error('Assertion failed');\r\n\r\n\t\tthis.type = type || new (expr.type instanceof Type ? Type : MetaType)({\r\n\t\t\tfunctional: true,\r\n\t\t\tfrom: params.map(typevar => typevar.type),\r\n\t\t\tto: expr.type\r\n\t\t});\r\n\r\n\t\tthis.params = params;\r\n\t\tthis.def$s = def$s || [];\r\n\t\tthis.expr = expr;\r\n\r\n\t\tthis.proved = this.isProved();\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn this.proved\r\n\t\t\t|| super.isProved(hyps)\r\n\t\t\t|| this.axiomatic\r\n\t\t\t|| this.expr && this.expr.isProved(hyps);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn [\r\n\t\t\t`∫ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\r\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\r\n\t\t\t'}'\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tif (!this.name) {\r\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\r\n\t\t\treturn [\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\r\n\r\n\t\t\t\t(\r\n\t\t\t\t\tthis.params.length == 1\r\n\t\t\t\t\t? this.params[0].toTeXString(false)\r\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\r\n\t\t\t\t),\r\n\t\t\t\t'\\\\mapsto ',\r\n\t\t\t\tExpressionResolver.expandMetaAndFuncalls(this.expr).toTeXString(false),\r\n\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\r\n\t\t\t].join('');\r\n\t\t}\r\n\r\n\t\tif (!this.shouldValidate) {\r\n\t\t\tif (!root)\r\n\t\t\t\treturn `\\\\href{#def-${this.name}}\\\\mathrm{${Node.escapeTeX(this.name)}}`;\r\n\t\t\r\n\t\t\tif (!this.expr)\r\n\t\t\t\treturn this.funcallToTeXString(this.params, prec);\r\n\t\t\r\n\t\t\treturn this.funcallToTeXString(this.params, Node.PREC_COLONEQQ)\r\n\t\t\t\t\t+ `\\\\coloneqq ${this.expr.toTeXString(Node.PREC_COLONEQQ)}`;\r\n\t\t} else {\r\n\t\t\tvar id = `schema-${this.proved ? 'p' : 'np'}-${this.name}`;\r\n\t\t\r\n\t\t\tif (!root)\r\n\t\t\t\treturn `\\\\href{#${id}}\\\\mathsf{${Node.escapeTeX(this.name)}}`;\r\n\t\t\r\n\t\t\treturn `\\\\href{#${id}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}\\\\mathord{\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA) + (e.guess ? `: \\\\texttt{@${e.guess}}` : '')).join(', ')}\\\\right)}:\\\\\\\\\\\\quad`\r\n\t\t\t\t+ ExpressionResolver.expandMetaAndFuncalls(this.expr).toTeXString(true);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic funcallToTeXString(args, prec) {\r\n\t\targs = args.map(arg => {\r\n\t\t\treturn arg.toTeXString(this.tex ? this.precedence : Node.PREC_COMMA);\r\n\t\t});\r\n\t\r\n\t\tif (this.tex) {\r\n\t\t\treturn this.makeTeX('def-' + this.name, args, prec);\r\n\t\t}\r\n\t\r\n\t\treturn (\r\n\t\t\t!this.name\r\n\t\t\t\t? this.toTeXString(false)\r\n\t\t\t\t: `\\\\href{#def-${this.name}}{${this.name.length == 1 ? Node.escapeTeX(this.name) : `\\\\mathrm{${Node.escapeTeX(this.name)}}`}}`\r\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\r\n\t}\r\n}","export type Expr0 = Schemacall | Schema | Typevar;\r\nexport type Metaexpr = Tee | Reduction | Schemacall | Schema | $var | Expr0;\r\n\r\nfunction iscall(a: Metaexpr): a is Schemacall {\r\n\treturn a._type == 'schemacall';\r\n}\r\n\r\nfunction makecall(a: Metaexpr, args: Expr0[]): Schemacall {\r\n\tif (a._type == 'typevar' || a._type == 'schema') {\r\n\t\treturn new Schemacall({\r\n\t\t\tschema: a,\r\n\t\t\targs\r\n\t\t});\r\n\t}\r\n\r\n\tconsole.log(a);\r\n\tthrow Error();\r\n}\r\n\r\nexport default class ER {\r\n\tpublic static substitute(expr: Metaexpr, map: Map<Typevar | Schema, Expr0>): Metaexpr {\r\n\t\tswitch (expr._type) {\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\treturn new Schemacall({\r\n\t\t\t\t\tschema: ER.substitute(expr.schema, map),\r\n\t\t\t\t\targs: expr.args.map(arg => ER.substitute(arg, map))\r\n\t\t\t\t});\r\n\t\t\tcase 'schema':\r\n\t\t\t\tif (!expr.expr) return expr;\r\n\r\n\t\t\t\t// 이름이 있는 것은 최상단에만 선언되므로 치환되어야 할 것을 포함하지 않으므로 확인하지 않는다는 생각이 들어 있다.\r\n\t\t\t\tif (expr.name) return expr;\r\n\r\n\t\t\t\t// 위의 expr.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\r\n\t\t\t\tif (expr.params.some(e => map.has(e)))\r\n\t\t\t\t\tthrow Error('Parameter collision');\r\n\r\n\t\t\t\treturn new Schema({\r\n\t\t\t\t\tshouldValidate: expr.shouldValidate,\r\n\t\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\t\taxiomatic: expr.axiomatic,\r\n\t\t\t\t\tname: null,\r\n\t\t\t\t\tparams: expr.params,\r\n\t\t\t\t\texpr: ER.substitute(expr.expr, map)\r\n\t\t\t\t});\r\n\t\t\tcase 'typevar':\r\n\t\t\t\treturn map.get(expr) || expr;\r\n\t\t\tcase 'tee':\r\n\t\t\t\tvar left = expr.left.map(e => ER.substitute(e, map));\r\n\t\t\t\tvar right = ER.substitute(expr.right, map);\r\n\r\n\t\t\t\treturn new Tee({\r\n\t\t\t\t\tleft, right\r\n\t\t\t\t});\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn ER.substitute(expr.reduced, map);\r\n\t\t\tcase '$var':\r\n\t\t\t\treturn ER.substitute(expr.expr, map);\r\n\t\t\tdefault:\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tthrow Error(`Unknown type ${expr._type}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static call(callee: Metaexpr, args: Expr0[]): Metaexpr {\r\n\t\tif (callee._type != 'schema') {\r\n\t\t\tconsole.log(callee);\r\n\t\t\tthrow Error('Illegal type');\r\n\t\t}\r\n\r\n\t\tif (!callee.expr) {\r\n\t\t\tthrow Error('Cannot call a callable without a body');\r\n\t\t}\r\n\r\n\t\tif (callee.params.length != args.length) {\r\n\t\t\tthrow Error('Illegal arguments length');\r\n\t\t}\r\n\r\n\t\tvar map = new Map();\r\n\r\n\t\tfor (var i = 0; i < callee.params.length; i++) {\r\n\t\t\tmap.set(callee.params[i], args[i]);\r\n\t\t}\r\n\r\n\t\treturn ER.substitute(callee.expr, map);\r\n\t}\r\n\r\n\tpublic static expandCallOnce(expr: Metaexpr): Metaexpr {\r\n\t\tif (!iscall(expr)) {\r\n\t\t\tthrow Error('Illegal type');\r\n\t\t}\r\n\r\n\t\tif (iscall(expr.schema)) {\r\n\t\t\tvar schema = ER.expandCallOnce(expr.schema);\r\n\t\t\treturn makecall(schema, expr.args);\r\n\t\t}\r\n\r\n\t\tvar callee_ = expr.schema;\r\n\r\n\t\twhile (callee_._type == '$var') {\r\n\t\t\tcallee_ = callee_.expr;\r\n\t\t}\r\n\r\n\t\tif (callee_._type != 'schema') {\r\n\t\t\tthrow Error('Something\\'s wrong');\r\n\t\t}\r\n\r\n\t\tif (!callee_.expr) {\r\n\t\t\tthrow Error('Could not expand');\r\n\t\t}\r\n\r\n\t\treturn ER.call(callee_, expr.args);\r\n\t}\r\n\r\n\t// expand0은 하지 않는다.\r\n\tpublic static expandMeta(expr: Metaexpr): Metaexpr {\r\n\t\tswitch (expr._type) {\r\n\t\t\tcase 'tee':\r\n\t\t\t\tvar left = expr.left.map(ER.expandMeta);\r\n\t\t\t\tvar right = ER.expandMeta(expr.right);\r\n\r\n\t\t\t\treturn new Tee({left, right});\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\tvar schema = ER.expandMeta(expr.schema),\r\n\t\t\t\t\targs = expr.args;\r\n\t\t\t\t\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tif (!schema.expr || schema.name && !schema.shouldValidate)\r\n\t\t\t \t\treturn new Schemacall({schema, args});\r\n\r\n\t\t\t\treturn ER.expandMeta(ER.call(schema, args));\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn ER.expandMeta(expr.reduced);\r\n\t\t\tcase 'schema':\r\n\t\t\t\tif (!expr.expr) return expr;\r\n\t\t\t\tif (expr.type._type == 'type' && expr.name) return expr;\r\n\r\n\t\t\t\treturn new Schema({\r\n\t\t\t\t\tshouldValidate: expr.shouldValidate,\r\n\t\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\t\taxiomatic: expr.axiomatic,\r\n\t\t\t\t\tname: null,\r\n\t\t\t\t\tparams: expr.params,\r\n\t\t\t\t\texpr: ER.expandMeta(expr.expr)\r\n\t\t\t\t});\r\n\t\t\tcase 'typevar':\r\n\t\t\t\treturn expr;\r\n\t\t\tcase '$var':\r\n\t\t\t\treturn ER.expandMeta(expr.expr);\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(expr);\r\n\t\t\t\tthrow Error('Unknown metaexpr');\r\n\t\t}\r\n\t}\r\n\r\n\t// expr0의 이름 없는 funcall까지 풀음.\r\n\tpublic static expandMetaAndFuncalls(expr: Metaexpr) {\r\n\t\tswitch (expr._type) {\r\n\t\t\tcase 'tee':\r\n\t\t\t\tvar left = expr.left.map(ER.expandMetaAndFuncalls);\r\n\t\t\t\tvar right = ER.expandMetaAndFuncalls(expr.right);\r\n\r\n\t\t\t\treturn new Tee({left, right});\r\n\t\t\tcase 'schema':\r\n\t\t\t\tif (!expr.expr) return expr;\r\n\t\t\t\tif (expr.type._type == 'type' && expr.name) return expr;\r\n\r\n\t\t\t\treturn new Schema({\r\n\t\t\t\t\tshouldValidate: expr.shouldValidate,\r\n\t\t\t\t\tannotations: expr.annotations,\r\n\t\t\t\t\taxiomatic: expr.axiomatic,\r\n\t\t\t\t\tname: null,\r\n\t\t\t\t\tparams: expr.params,\r\n\t\t\t\t\texpr: ER.expandMetaAndFuncalls(expr.expr)\r\n\t\t\t\t});\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\tvar schema = ER.expandMetaAndFuncalls(expr.schema);\r\n\t\t\t\tvar args = expr.args.map(ER.expandMetaAndFuncalls);\r\n\r\n\t\t\t\tif (!schema.expr || schema.name && !schema.shouldValidate)\r\n\t\t\t \t\treturn new Schemacall({schema, args});\r\n\r\n\t\t\t\treturn ER.expandMetaAndFuncalls(ER.call(schema, args));\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn ER.expandMetaAndFuncalls(expr.reduced);\r\n\t\t\tcase 'typevar':\r\n\t\t\t\treturn expr;\r\n\t\t\tcase '$var':\r\n\t\t\t\treturn ER.expandMetaAndFuncalls(expr.expr);\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(expr);\r\n\t\t\t\tthrow Error('Unknown metaexpr');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static nequalscall = 0;\r\n\tpublic static nequalstrue = 0;\r\n\tpublic static nrecursecall = 0;\r\n\tpublic static nrecursetrue = 0;\r\n\r\n\t/*\r\n\t * 스펙 참조.\r\n\t */\r\n\tpublic static equals(a: Metaexpr, b: Metaexpr) {\r\n\t\tfunction recurse(a: Metaexpr, b: Metaexpr, depth: number) {\r\n\t\t\tif (a == b) return true;\r\n\r\n\t\t\tif (!a.type.equals(b.type)) return false;\r\n\r\n\t\t\tif (a._type == 'reduction') {\r\n\t\t\t\treturn recurseWrap(a.reduced, b, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (b._type == 'reduction') {\r\n\t\t\t\treturn recurseWrap(a, b.reduced, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (a._type == '$var') {\r\n\t\t\t\treturn recurseWrap(a.expr, b, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (b._type == '$var') {\r\n\t\t\t\treturn recurseWrap(a, b.expr, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (iscall(a) && iscall(b)) {\r\n\t\t\t\tif (iscall(a.schema)) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\tER.expandCallOnce(a), b, depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (iscall(b.schema)) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\ta, ER.expandCallOnce(b), depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (a.schema == b.schema || !a.schema.expr && !b.schema.expr) {\r\n\t\t\t\t\tif (a.schema != b.schema) return false;\r\n\r\n\t\t\t\t\tif (!a.schema.expr && !b.schema.expr) {\r\n\t\t\t\t\t\tfor (var i = 0; i < a.args.length; i++) {\r\n\t\t\t\t\t\t\tif (!recurseWrap(a.args[i], b.args[i], depth + 1)) return false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (a.args.every((_, i) => {\r\n\t\t\t\t\t\treturn recurseWrap(a.args[i], (b as Schemacall).args[i], depth + 1);\r\n\t\t\t\t\t})) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (a.schema.expr) {\r\n\t\t\t\t\treturn recurseWrap(ER.expandCallOnce(a), b, depth + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recurseWrap(a, ER.expandCallOnce(b), depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (iscall(a)) {\r\n\t\t\t\tif (iscall(a.schema)) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\tER.expandCallOnce(a), b, depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!a.schema.expr) return false;\r\n\r\n\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\tER.expandCallOnce(a), b, depth + 1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (iscall(b)) {\r\n\t\t\t\tif (iscall(b.schema)) {\r\n\t\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\t\ta, ER.expandCallOnce(b), depth + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!b.schema.expr) return false;\r\n\r\n\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\ta, ER.expandCallOnce(b), depth + 1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (a._type == 'tee') {\r\n\t\t\t\tb = b as Tee;\r\n\r\n\t\t\t\tfor (var i = 0; i < a.left.length; i++) {\r\n\t\t\t\t\tif (!recurseWrap(a.left[i], b.left[i], depth + 1)) return false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recurseWrap(a.right, b.right, depth + 1);\r\n\t\t\t}\r\n\r\n\t\t\tif (a.type.isFunctional) {\r\n\t\t\t\tvar placeholders = [];\r\n\t\t\t\tvar len = a.type.resolve().from.length;\r\n\r\n\t\t\t\tfor (var i = 0; i < len; i++) {\r\n\t\t\t\t\tplaceholders.push(new Typevar({\r\n\t\t\t\t\t\tisParam: true,\r\n\t\t\t\t\t\ttype: a.type.resolve().from[i],\r\n\t\t\t\t\t\tname: '$' + i\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recurseWrap(\r\n\t\t\t\t\tmakecall(a, placeholders), makecall(b, placeholders), depth + 1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar recurseWrap = recurse;\r\n\r\n\t\t// function recurseWrap(a, b, depth) {\r\n\t\t// \tER.nrecursecall++;\r\n\r\n\t\t// \tconsole.log(`depth ${depth}\\n${a}\\n\\n${b}`);\r\n\t\t// \tvar ret = recurse(a, b, depth);\r\n\t\t// \tconsole.log(`depth ${depth} → ${ret}`);\r\n\r\n\t\t// \tif (ret) ER.nrecursetrue++;\r\n\r\n\t\t// \treturn ret;\r\n\t\t// }\r\n\r\n\t\tER.nequalscall++;\r\n\t\tvar ret = recurseWrap(a, b, 0);\r\n\t\tif (ret) ER.nequalstrue++;\r\n\t\treturn ret;\r\n\t}\r\n}\r\n\r\n// 순환 참조를 피하기 위하여 export 후 import 한다.\r\nimport $var from \"./nodes/$var\";\r\nimport Reduction from \"./nodes/Reduction\";\r\nimport Schema from \"./nodes/Schema\";\r\nimport Schemacall from \"./nodes/Schemacall\";\r\nimport Tee from \"./nodes/Tee\";\r\nimport Typevar from \"./nodes/Typevar\";","import Node, { Precedence } from './Node';\r\nimport Typevar from './Typevar';\r\nimport MetaType from './MetaType';\r\nimport Type from './Type';\r\nimport Scope from '../Scope';\r\nimport Schema from './Schema';\r\n\r\nexport default class Schemacall extends Node {\r\n\tpublic readonly _type = 'schemacall';\r\n\r\n\tpublic readonly type: Type | MetaType;\r\n\tpublic readonly schema;\r\n\tpublic readonly args;\r\n\r\n\tconstructor ({schema, args}, scope?: Scope) {\r\n\t\tsuper(scope);\r\n\r\n\t\tif (schema.type.isSimple)\r\n\t\t\tthrow this.error(`${schema.name} is not callable`);\r\n\r\n\t\tif (!(args instanceof Array) || args.map(e => e instanceof Node).some(e => !e))\r\n\t\t\tthrow this.error('Assertion failed');\r\n\t\t\t \r\n\t\tvar resolvedType = schema.type.resolve(),\r\n\t\t\tparamTypes = resolvedType.from,\r\n\t\t\targTypes = args.map(e => e.type);\r\n\r\n\t\tif (paramTypes.length != argTypes.length)\r\n\t\t\tthrow this.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`);\r\n\r\n\t\tfor (var i = 0; i < paramTypes.length; i++) {\r\n\t\t\tif (!paramTypes[i].equals(argTypes[i])) {\r\n\t\t\t\tthrow this.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tthis.schema = schema;\r\n\t\tthis.type = resolvedType.to;\r\n\t\tthis.args = args;\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps) || this.schema.isProved(hyps);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tvar args = this.args.map(arg => {\r\n\t\t\tif (arg instanceof Typevar) return `${arg.name}<${arg._id}>`;\r\n\t\t\treturn arg.toIndentedString(indent + 1);\r\n\t\t});\r\n\t\r\n\t\tif (args.join('').length <= 50) {\r\n\t\t\targs = this.args.map(arg => {\r\n\t\t\t\tif (arg instanceof Typevar) return `${arg.name}<${arg._id}>`;\r\n\t\t\t\treturn arg.toIndentedString(indent);\r\n\t\t\t});\r\n\t\r\n\t\t\targs = args.join(', ');\r\n\t\r\n\t\t\tif (this.schema.shouldValidate) {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t`${this.schema.name || `(${this.schema})`}(`,\r\n\t\t\t\t\targs,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('');\r\n\t\t\t} else {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t`${this.schema._type != 'schema' || !this.schema.name ? '(' + this.schema.toIndentedString(indent) + ')' : this.schema.name}(`,\r\n\t\t\t\t\targs,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('');\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\r\n\t\t\t\r\n\t\t\tif (this.schema.shouldValidate) {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t`${this.schema.name || `(${this.schema.toIndentedString(indent)})`}(`,\r\n\t\t\t\t\t'\\t' + args,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t\t} else {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t`${this.schema._type != 'schema' || !this.schema.name ? '(' + this.schema.toIndentedString(indent) + ')' : this.schema.name}(`,\r\n\t\t\t\t\t'\\t' + args,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tif (this.schema.shouldValidate) {\r\n\t\t\treturn (\r\n\t\t\t\tthis.schema.name\r\n\t\t\t\t\t? `\\\\href{#schema-${this.schema.proved ? 'p' : 'np'}-${this.schema.name}}{\\\\textsf{${Node.escapeTeX(this.schema.name)}}}`\r\n\t\t\t\t\t: this.schema.toTeXString(false)\r\n\t\t\t) + `\\\\mathord{\\\\left(${this.args.map(arg => {\r\n\t\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\r\n\t\t\t}).join(', ')}\\\\right)}`;\r\n\t\t}\r\n\r\n\t\tif (this.schema instanceof Schema)\r\n\t\t\treturn this.schema.funcallToTeXString(this.args, prec);\r\n\t\t\r\n\t\tvar args = this.args.map(arg => {\r\n\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\r\n\t\t});\r\n\r\n\t\treturn `${!this.schema.name || this.schema._type == 'typevar'\r\n\t\t\t\t? this.schema.toTeXString(false)\r\n\t\t\t\t: this.schema.name.length == 1\r\n\t\t\t\t\t? Node.escapeTeX(this.schema.name)\r\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.schema.name)}}`}`\r\n\t\t\t+ `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport Type from './Type';\r\n\r\nexport default class MetaType extends Node {\r\n\tpublic readonly _type = 'metatype';\r\n\r\n\tpublic readonly isFunctional: boolean;\r\n\tpublic readonly isSimple: boolean;\r\n\tpublic readonly name: string;\r\n\tpublic readonly left;\r\n\tpublic readonly right;\r\n\tpublic readonly from: Type[];\r\n\tpublic readonly to: MetaType;\r\n\r\n\tconstructor (o) {\r\n\t\tsuper();\r\n\r\n\t\tif (typeof o.functional != 'boolean')\r\n\t\t\tthrow this.error('typeof o.functional != \\'boolean\\'');\r\n\t\t\r\n\t\tthis.isFunctional = o.functional;\r\n\t\tthis.isSimple = !o.functional;\r\n\r\n\t\tif (!o.functional) {\r\n\t\t\tif (!(o.left instanceof Array))\r\n\t\t\t\tthrow this.error('left should be an array');\r\n\r\n\t\t\tthis.left = o.left;\r\n\t\t\tthis.right = o.right;\r\n\t\t} else {\r\n\t\t\tif (o.from.some(f => !(f instanceof Type)))\r\n\t\t\t\tthrow this.error('o.from.some(f => !(f instanceof Type))');\r\n\t\t\tif (!(o.to instanceof MetaType))\r\n\t\t\t\tthrow this.error('!(o.to instanceof MetaType)');\r\n\r\n\t\t\tif (o.to.isFunctional)\r\n\t\t\t\tthrow this.error('Functional metatype in functional metatype is not supported');\r\n\r\n\t\t\tthis.from = o.from;\r\n\t\t\tthis.to = o.to;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic resolve() {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number) {\r\n\t\tif (this.isSimple) return `[${this.left.join(', ')} |- ${this.right}]`;\r\n\r\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tthrow new Error('Method not implemented.');\r\n\t}\r\n\r\n\tpublic equals(t: object): boolean {\r\n\t\tif (!(t instanceof MetaType)) return false;\r\n\r\n\t\tif (this.isSimple != t.isSimple) return false;\r\n\r\n\t\tif (this.isSimple) {\r\n\t\t\tif (this.left.length != t.left.length) return false;\r\n\r\n\t\t\tfor (let i = 0; i < this.left.length; i++) {\r\n\t\t\t\tif (!this.left[i].equals(t.left[i])) return false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.right.equals(t.right)) return false;\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (this.from.length != t.from.length) return false;\r\n\r\n\t\tfor (let i = 0; i < this.from.length; i++)\r\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\r\n\r\n\t\treturn this.to.equals(t.to);\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport MetaType from './MetaType';\r\n\r\nimport ExpressionResolver, { Metaexpr } from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport $var from './$var';\r\n\r\ninterface TeeInput {\r\n\tleft: Metaexpr[];\r\n\tdef$s?: $var[];\r\n\tright: Metaexpr;\r\n}\r\n\r\nexport default class Tee extends Node {\r\n\tpublic readonly _type = 'tee';\r\n\tpublic precedence = Node.PREC_COMMA;\r\n\r\n\tpublic readonly left;\r\n\tpublic readonly def$s: $var[];\r\n\tpublic readonly right;\r\n\tpublic readonly type: MetaType;\r\n\r\n\tconstructor ({left, def$s, right}: TeeInput, scope?: Scope) {\r\n\t\tsuper(scope);\r\n\t\t\r\n\t\tif (!(left instanceof Array\r\n\t\t\t\t&& left.every(l => ['type', 'metatype'].includes(l.type._type)))) {\r\n\t\t\tconsole.log(left);\r\n\t\t\tthrow this.error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tif (def$s && !(def$s instanceof Array && def$s.every($ => $._type == '$var')))\r\n\t\t\tthrow this.error('Assertion failed');\r\n\r\n\t\tif (!['type', 'metatype'].includes(right.type._type)) {\r\n\t\t\tconsole.log(right);\r\n\t\t\tthrow this.error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tif (right.type.isFunctional) {\r\n\t\t\tthrow this.error('RHS of a rule cannot be a schema');\r\n\t\t}\r\n\r\n\t\tthis.left = left;\r\n\t\tthis.def$s = def$s || [];\r\n\t\tthis.right = right;\r\n\t\tthis.type = new MetaType({\r\n\t\t\tfunctional: false,\r\n\t\t\tleft: left.map(e => e.type),\r\n\t\t\tright: right.type\r\n\t\t});\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps) || this.right.isProved(hyps.concat(this.left));\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tif (!this.left.length) {\r\n\t\t\treturn '|- ' + this.right.toIndentedString(indent);\r\n\t\t}\r\n\t\r\n\t\treturn [\r\n\t\t\t'\\t' + this.left.map(e => e.toIndentedString(indent + 1)).join(',\\n' + '\\t'.repeat(indent + 1)),\r\n\t\t\t'|-',\r\n\t\t\t'\\t' + this.right.toIndentedString(indent + 1)\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n\t\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tvar expanded = ExpressionResolver.expandMetaAndFuncalls(this);\r\n\r\n\t\treturn [\r\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\r\n\t\t\t`{${expanded.left.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')} \\\\vdash ${expanded.right.toTeXString(Node.PREC_COMMA)}}`,\r\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\r\n\t\t].join('');\r\n\t}\r\n}","import { Metaexpr } from \"../ExpressionResolver\";\r\nimport Scope from \"../Scope\";\r\nimport MetaType from \"./MetaType\";\r\nimport Node, { Precedence } from \"./Node\";\r\nimport Type from \"./Type\";\r\n\r\ninterface $varInput {\r\n    name: string;\r\n    expr: Metaexpr;\r\n}\r\n\r\nexport default class $var extends Node {\r\n    public readonly _type = '$var';\r\n\r\n    public readonly type: Type | MetaType;\r\n    public readonly name: string;\r\n    public readonly expr: Metaexpr;\r\n\r\n    constructor({name, expr}: $varInput, scope?: Scope) {\r\n        super(scope);\r\n\r\n        if (!name || !expr) {\r\n            throw this.error('Assertion failed');\r\n        }\r\n\r\n        this.type = expr.type;\r\n        this.name = name;\r\n        this.expr = expr;\r\n    }\r\n\r\n    public isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn super.isProved(hyps)\r\n\t\t\t|| this.expr.isProved(hyps);\r\n\t}\r\n\r\n    public toIndentedString(indent: number, root?: boolean): string {\r\n        return this.name;\r\n    }\r\n    \r\n    public toTeXString(prec?: Precedence, root?: boolean): string {\r\n        return `\\\\mathtt{${Node.escapeTeX(this.name)}}`;\r\n    }\r\n\r\n}","var grammar;\r\n\r\nif (process.env.__webpack__) {\r\n\tgrammar = require('raw-loader!./grammar.pegjs').default;\r\n} else {\r\n\tvar fs = require('fs');\r\n\tvar path = require('path');\r\n\r\n\tgrammar = fs.readFileSync(path.join(__dirname, 'grammar.pegjs'), 'utf-8');\r\n}\r\n\r\nvar Program = require('./Program').default;\r\n\r\nmodule.exports = {grammar, Program};","export default \"start =\\r\\n\\t_ lines:(a:line _ {return a})* {return lines}\\r\\n\\r\\nline =\\r\\n\\ttypedef\\r\\n\\t/ defv\\r\\n\\t/ defun\\r\\n\\t/ defschema\\r\\n\\r\\nevaluable =\\r\\n\\t_ e:evaluable_internal _ {return e}\\r\\n\\r\\nevaluable_internal =\\r\\n\\ttypedef\\r\\n\\t/ defv\\r\\n\\t/ defun\\r\\n\\t/ defschema\\r\\n\\t/ metaexpr\\r\\n\\r\\ntypedef =\\r\\n\\tdoc:(documentation __)?\\r\\n\\tbase:(\\\"base\\\" __)?\\r\\n\\t\\\"type\\\" __\\r\\n\\torigin:(o:ftype __ {return o})?\\r\\n\\tname:ident _ sem\\r\\n\\t{\\r\\n\\t\\tdoc = doc && doc[0];\\r\\n\\t\\t\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'typedef',\\r\\n\\t\\t\\tdoc,\\r\\n\\t\\t\\tbase: !!base,\\r\\n\\t\\t\\torigin,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefv =\\r\\n\\tdoc:(documentation __)? tex:(tex __)? type:type __ name:ident _ sem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefparam =\\r\\n\\ttex:(tex __)? type:type __ name:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tisParam: true,\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefschemaparam =\\r\\n\\ttex:(tex __)? type:type __ name:ident\\r\\n\\tguess:(_ ':' _ '@' g:$[a-z0-9_]+ {return g})?\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tisParam: true,\\r\\n\\t\\t\\tguess,\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n \\r\\ndefun =\\r\\n\\tdoc:(documentation __)?\\r\\n\\ttex:(tex __)?\\r\\n\\trettype:type __\\r\\n\\tname:ident _\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\texpr:(\\r\\n\\t\\t\\\"{\\\" _\\r\\n\\t\\texpr:expr0 _\\r\\n\\t\\t\\\"}\\\"\\r\\n\\t\\t{return expr}\\r\\n\\t\\t/ sem {return null}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defun',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\trettype,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefschema =\\r\\n\\tdoc:(documentation __)?\\r\\n\\tannotations: (a:annotation __ {return a})*\\r\\n\\taxiomatic:(\\\"axiomatic\\\" __)?\\r\\n\\t\\\"schema\\\" __\\r\\n\\tname:ident _\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defschemaparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defschemaparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"{\\\" _\\r\\n\\tdefdollars: (d:defdollar _ {return d})* _\\r\\n\\texpr:metaexpr _\\r\\n\\t\\\"}\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defschema',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\tannotations,\\r\\n\\t\\t\\taxiomatic: !!axiomatic,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\tdef$s: defdollars,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// var[...]\\r\\n// foo(...)[...]\\r\\n// foo[...][...]\\r\\n// (metaexpr)[...]\\r\\n// schema(?, ...)[...]\\r\\nreduction =\\r\\n\\tsubject:(\\r\\n\\t\\tschemacall\\r\\n\\t\\t/ var\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:metaexpr _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\tguesses:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:('?' {return null} / expr0) _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:('?' {return null} / expr0) _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)?\\r\\n\\tleftargs:(\\r\\n\\t\\t\\\"[\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:metaexpr _\\r\\n\\t\\t\\ttail:(\\\";\\\" _ e:metaexpr _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\"]\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)+\\r\\n\\t{\\r\\n\\t\\tvar ret = {\\r\\n\\t\\t\\t_type: 'reduction',\\r\\n\\t\\t\\tsubject,\\r\\n\\t\\t\\tguesses,\\r\\n\\t\\t\\tleftargs: leftargs[0],\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfor (var i = 1; i < leftargs.length; i++) {\\r\\n\\t\\t\\tret = {\\r\\n\\t\\t\\t\\t_type: 'reduction',\\r\\n\\t\\t\\t\\tsubject: ret,\\r\\n\\t\\t\\t\\tguesses: null,\\r\\n\\t\\t\\t\\tleftargs: leftargs[i],\\r\\n\\t\\t\\t\\tlocation: location()\\r\\n\\t\\t\\t};\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn ret;\\r\\n\\t}\\r\\n\\r\\n// var(...)\\r\\n// (metaexpr)(...)\\r\\nschemacall =\\r\\n\\tschema:(\\r\\n\\t\\tvar\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:metaexpr _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\targs:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:expr0 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'schemacall',\\r\\n\\t\\t\\tschema,\\r\\n\\t\\t\\targs,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// forall(f, g)\\r\\n// (expr0)(f, g)\\r\\nfuncall =\\r\\n\\tschema:(\\r\\n\\t\\tvar\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:expr0 _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\targs:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:expr0 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'funcall',\\r\\n\\t\\t\\tschema,\\r\\n\\t\\t\\targs,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// (T t) => { expr0 }\\r\\nfunexpr =\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"=>\\\" _\\r\\n\\t\\\"{\\\" _ expr:expr0 _ \\\"}\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'funexpr',\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// (T t) => { metaexpr }\\r\\nschemaexpr =\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"=>\\\" _\\r\\n\\t\\\"{\\\" _\\r\\n\\tdefdollars: (d:defdollar _ {return d})* _\\r\\n\\texpr:metaexpr _\\r\\n\\t\\\"}\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'schemaexpr',\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\tdef$s: defdollars,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nmetaexpr =\\r\\n\\tleft:(\\r\\n\\t\\tl:(\\r\\n\\t\\t\\thead:metaexpr_internal_1 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:metaexpr_internal_1 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)? {return l || []}\\r\\n\\t)\\r\\n\\t\\\"|-\\\" _\\r\\n\\tdefdollars: (d:defdollar _ {return d})* _\\r\\n\\tright:metaexpr\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'tee',\\r\\n\\t\\t\\tdef$s: defdollars,\\r\\n\\t\\t\\tleft,\\r\\n\\t\\t\\tright,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/ metaexpr_internal_1\\r\\n\\r\\n/*\\r\\n * 다음이 성립하여야 한다.\\r\\n *\\r\\n * - reduction이 schemacall보다 앞이다.\\r\\n * - schemacall이 var보다 앞이다.\\r\\n *\\r\\n */\\r\\nmetaexpr_internal_1 =\\r\\n\\treduction\\r\\n\\t/ schemacall\\r\\n\\t/ var\\r\\n\\t/ schemaexpr\\r\\n\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\" {return e}\\r\\n\\r\\nexpr0 =\\r\\n\\tfuncall\\r\\n\\t/ funexpr\\r\\n\\t/ var\\r\\n\\t/ \\\"(\\\" _ e:expr0 _ \\\")\\\" {return e}\\r\\n\\r\\ndefdollar =\\r\\n\\tname:dollar_ident _\\r\\n\\t'=' _\\r\\n\\texpr:metaexpr _\\r\\n\\tsem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'def$',\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t};\\r\\n\\t}\\r\\n\\r\\ntype =\\r\\n\\tstype\\r\\n\\t/ ftype\\r\\n\\r\\nstype =\\r\\n\\tname:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'type',\\r\\n\\t\\t\\tftype: false,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nftype =\\r\\n\\t\\\"[\\\" _\\r\\n\\tfrom:(\\r\\n\\t\\ttype:type {return [type]}\\r\\n\\t\\t/ (\\r\\n\\t\\t\\ttt:(\\r\\n\\t\\t\\t\\t\\\"(\\\" _\\r\\n\\t\\t\\t\\thead: type\\r\\n\\t\\t\\t\\ttail:(_ \\\",\\\" _ t:type {return t})*\\r\\n\\t\\t\\t\\t_ \\\")\\\"\\r\\n\\t\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t\\t)\\r\\n\\t\\t\\t{return tt}\\r\\n\\t\\t)\\r\\n\\t) _\\r\\n\\t\\\"->\\\" _\\r\\n\\tto:type _\\r\\n\\t\\\"]\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'type',\\r\\n\\t\\t\\tftype: true,\\r\\n\\t\\t\\tfrom,\\r\\n\\t\\t\\tto,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nvar =\\r\\n\\tat_var\\r\\n\\t/ dollar_var\\r\\n\\t/ plain_var\\r\\n\\r\\nat_var =\\r\\n\\tname:at_ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\ttype: '@',\\r\\n\\t\\t\\tname: name.slice(1),\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndollar_var =\\r\\n\\tname:dollar_ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\ttype: '$',\\r\\n\\t\\t\\tname: name,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nplain_var =\\r\\n\\tname:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\ttype: 'normal',\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nkeyword =\\r\\n\\t\\\"axiomatic\\\"\\r\\n\\t/ \\\"base\\\"\\r\\n\\t/ \\\"schema\\\"\\r\\n\\t/ \\\"type\\\";\\r\\n\\r\\nannotation =\\r\\n\\t'@discouraged'\\r\\n\\t/ '@deprecated'\\r\\n\\r\\nident =\\r\\n\\t$(!keyword [a-zA-Z0-9_]+)\\r\\n\\r\\nat_ident =\\r\\n\\t$('@' [a-zA-Z0-9_]+)\\r\\n\\r\\ndollar_ident =\\r\\n\\t$('$' [a-zA-Z0-9_]+)\\r\\n\\r\\ndocumentation =\\r\\n\\t'\\\"' b:$(!'\\\"' a:. {return a})* '\\\"' {\\r\\n\\t\\treturn b\\r\\n\\t}\\r\\n\\r\\ntex =\\r\\n\\t'$' b:$(!'$' a:. {return a})* '$' {\\r\\n\\t\\treturn b\\r\\n\\t}\\r\\n\\r\\ncomment =\\r\\n\\t\\\"#\\\" (!newline .)*\\r\\n\\t/ \\\"//\\\" (!newline .)*\\r\\n\\t/ \\\"/*\\\" (!\\\"*/\\\" .)* \\\"*/\\\"\\r\\n\\r\\nnewline =\\r\\n\\t\\\"\\\\r\\\\n\\\" / \\\"\\\\r\\\" / \\\"\\\\n\\\"\\r\\n\\r\\n// optional whitespace\\r\\n_ =\\r\\n\\t([ \\\\t\\\\n\\\\r] / comment)*\\r\\n\\r\\n// mandatory whitespace\\r\\n__ =\\r\\n\\t([ \\\\t\\\\n\\\\r] / comment)+\\r\\n\\r\\nsem =\\r\\n\\t\\\";\\\"\";","import Scope from './Scope';\r\nimport PegInterface from './PegInterface';\r\nimport ExpressionResolver, { Metaexpr } from './ExpressionResolver';\r\nimport Schema from './nodes/Schema';\r\nimport Typevar from './nodes/Typevar';\r\nimport Tee from './nodes/Tee';\r\nimport Schemacall from './nodes/Schemacall';\r\nimport Type from './nodes/Type';\r\nimport $var from './nodes/$var';\r\n\r\nexport default class Program {\r\n\tpublic scope = new Scope(null);\r\n\t\r\n\tconstructor() {}\r\n\r\n\tpublic feed(lines) {\r\n\t\tlines.forEach(line => {\r\n\t\t\tswitch (line._type) {\r\n\t\t\t\tcase 'typedef':\r\n\t\t\t\t\tvar type = PegInterface.type(line, this.scope);\r\n\r\n\t\t\t\t\tif (this.scope.hasType(type.name)) {\r\n\t\t\t\t\t\tthrow type.scope.error(`Type ${type.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.scope.addType(type);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defv':\r\n\t\t\t\t\tvar typevar = PegInterface.typevar(line, this.scope);\r\n\r\n\t\t\t\t\tif (this.scope.hasTypevar(typevar.name)) {\r\n\t\t\t\t\t\tthrow typevar.scope.error(`Definition ${typevar.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.scope.addTypevar(typevar);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defun':\r\n\t\t\t\t\tvar fun = PegInterface.fun(line, this.scope);\r\n\r\n\t\t\t\t\tif (this.scope.hasTypevar(fun.name)) {\r\n\t\t\t\t\t\tthrow fun.scope.error(`Definition ${fun.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.scope.addFun(fun);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defschema':\r\n\t\t\t\t\tvar schema = PegInterface.schema(line, this.scope);\r\n\r\n\t\t\t\t\tif (this.scope.hasSchema(schema.name)) {\r\n\t\t\t\t\t\tthrow schema.scope.error(`Schema ${schema.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.scope.addSchema(schema);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow Error(`Unknown line type ${line._type}`);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic evaluate(line) {\r\n\t\tswitch (line._type) {\r\n\t\t\tcase 'typedef':\r\n\t\t\tcase 'defv':\r\n\t\t\tcase 'defun':\r\n\t\t\tcase 'defschema':\r\n\t\t\tcase 'tee':\r\n\t\t\tcase 'reduction':\r\n\t\t\tcase 'schemacall':\r\n\t\t\tcase 'var':\r\n\t\t\tcase 'schemaexpr':\r\n\t\t\t\treturn PegInterface[({\r\n\t\t\t\t\ttypedef: 'type',\r\n\t\t\t\t\tdefv: 'typevar',\r\n\t\t\t\t\tdefun: 'fun',\r\n\t\t\t\t\tdefschema: 'schema',\r\n\t\t\t\t\ttee: 'tee',\r\n\t\t\t\t\treduction: 'reduction',\r\n\t\t\t\t\tschemacall: 'schemacall',\r\n\t\t\t\t\tvar: 'metavar',\r\n\t\t\t\t\tschemaexpr: 'schemaexpr'\r\n\t\t\t\t})[line._type]](line, this.scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error(`Unknown line type ${line._type}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getProofExplorer(name: string, ktx) {\t\r\n\t\tvar DIAMOND = '&#x25C7;',\r\n\t\t\tDOWN = '&#x25BC;',\r\n\t\t\tUP = '&#x25B2;';\r\n\t\t\r\n\t\tif (!this.scope.schemaMap.has(name)) {\r\n\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t\r\n\t\tvar theexpr = this.scope.schemaMap.get(name);\r\n\t\r\n\t\tvar ncols = (function recurse(expr: any) {\r\n\t\t\tswitch (expr._type) {\r\n\t\t\t\tcase 'reduction':\r\n\t\t\t\t\treturn Math.max(\r\n\t\t\t\t\t\t...expr.leftargs.map(recurse),\r\n\t\t\t\t\t\t((expr.subject._type == 'schema' && expr.subject.name)\r\n\t\t\t\t\t\t\t|| (expr.subject._type == 'schemacall' && expr.subject.schema.name)\r\n\t\t\t\t\t\t\t\t? 0 : recurse(expr.subject)),\r\n\t\t\t\t\t\t1\r\n\t\t\t\t\t);\r\n\t\t\t\tcase 'schema':\r\n\t\t\t\t\treturn Math.max(\r\n\t\t\t\t\t\t...expr.def$s.map($ => recurse($.expr)),\r\n\t\t\t\t\t\trecurse(expr.expr)\r\n\t\t\t\t\t ) + 1;\r\n\t\t\t\tcase 'tee':\r\n\t\t\t\t\treturn Math.max(\r\n\t\t\t\t\t\t...expr.left.map(recurse),\r\n\t\t\t\t\t\t...expr.def$s.map($ => recurse($.expr)),\r\n\t\t\t\t\t\trecurse(expr.right)\r\n\t\t\t\t\t) + 1;\r\n\t\t\t\tcase 'schemacall':\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t})(theexpr);\r\n\r\n\t\tfunction getHtmlLine(ctr: string | number, left: any[], h1: string, h2: string | string[], options?) {\r\n\t\t\tvar padding = left.length;\r\n\r\n\t\t\tvar {bbb=false, rrb=false} = options || {};\r\n\t\r\n\t\t\tvar htmlLeft = left.map((e, i, a) => `<td class=\"${rrb && i == a.length - 1 ? 'rrb' : 'brb'}\">${e.map(f => ktx(f.toTeXString(true))).join(', ')}</td>`).join('');\r\n\r\n\t\t\tfor (var i = 0; i < left.length; i++)\r\n\t\t\t\twhile(left[i].length) left[i].pop();\r\n\t\r\n\t\t\treturn `<tr><th>${ctr}</th>${htmlLeft}<td ${bbb ? 'class=\"bbb\" ' : ''}colspan=\"${ncols-padding}\">${h1}</td>${h2 instanceof Array ? h2.map(e => `<td>${e}</td>`).join('') : `<td colspan=\"2\">${h2}</td>`}</tr>`;\r\n\t\t}\r\n\r\n\t\tfunction exprToHtml(expr, expand?) {\r\n\t\t\tif (typeof expr == 'number') return `<b>${expr}</b>`;\r\n\t\t\tif (expr instanceof Array) return `<b>${expr[0]}&ndash;${expr[1]}</b>`;\r\n\t\t\tif (expand) return ktx(ExpressionResolver.expandMetaAndFuncalls(expr).toTeXString(true));\r\n\t\t\t\r\n\t\t\treturn ktx(expr.toTeXString(true));\r\n\t\t}\r\n\r\n\t\tvar ctr = 0;\r\n\r\n\t\tvar tree = (function getTree(\r\n\t\t\t\texpr: Metaexpr,\r\n\t\t\t\thypnumMap: Map<Metaexpr, number>,\r\n\t\t\t\t$Map: Map<Metaexpr, number>) {\r\n\t\t\t\r\n\t\t\tif (hypnumMap.has(expr)) {\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'R',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\tnum: hypnumMap.get(expr),\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t}\r\n\r\n\t\t\tif ($Map.has(expr)) {\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'R',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\tnum: $Map.get(expr),\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t}\r\n\r\n\t\t\tswitch (expr._type) {\r\n\t\t\t\tcase 'reduction':\r\n\t\t\t\t\tvar leftarglines = [];\r\n\t\t\t\t\tvar leftargnums = expr.leftargs.map(l => {\r\n\t\t\t\t\t\tif (hypnumMap.has(l)) return hypnumMap.get(l);\r\n\t\t\t\t\t\tif ($Map.has(l)) return $Map.get(l);\r\n\r\n\t\t\t\t\t\tvar lines = getTree(l, hypnumMap, $Map);\r\n\t\t\t\t\t\tleftarglines = leftarglines.concat(lines);\r\n\t\t\t\t\t\treturn lines[lines.length - 1].ctr;\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar args = null;\r\n\t\t\t\t\tvar subjectlines = [];\r\n\t\t\t\t\tvar subjectnum = hypnumMap.get(expr.subject)\r\n\t\t\t\t\t\t|| $Map.get(expr.subject)\r\n\t\t\t\t\t\t|| (expr.subject._type == 'schemacall' && $Map.has(expr.subject.schema)\r\n\t\t\t\t\t\t\t? (args = expr.subject.args, $Map.get(expr.subject.schema))\r\n\t\t\t\t\t\t\t: false)\r\n\t\t\t\t\t\t|| ((s => s._type == 'schema' && s.name\r\n\t\t\t\t\t\t\t\t|| s._type == 'schemacall' && s.schema.name)(expr.subject)\r\n\t\t\t\t\t\t\t? expr.subject\r\n\t\t\t\t\t\t\t: (subjectlines = getTree(expr.subject, hypnumMap, $Map))[subjectlines.length-1].ctr);\r\n\r\n\t\t\t\t\treturn [\r\n\t\t\t\t\t\t...leftarglines,\r\n\t\t\t\t\t\t...subjectlines,\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t_type: 'E',\r\n\t\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\t\tsubject: subjectnum,\r\n\t\t\t\t\t\t\targs,\r\n\t\t\t\t\t\t\tleftargs: leftargnums,\r\n\t\t\t\t\t\t\treduced: expr.reduced\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t];\r\n\t\t\t\tcase 'schemacall':\r\n\t\t\t\t\tif (hypnumMap.has(expr.schema)) {\r\n\t\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t\t_type: 'RC',\r\n\t\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\t\tschema: hypnumMap.get(expr.schema),\r\n\t\t\t\t\t\t\targs: expr.args,\r\n\t\t\t\t\t\t\texpr\r\n\t\t\t\t\t\t}];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ($Map.has(expr.schema)) {\r\n\t\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t\t_type: 'RC',\r\n\t\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\t\tschema: $Map.get(expr.schema),\r\n\t\t\t\t\t\t\targs: expr.args,\r\n\t\t\t\t\t\t\texpr\r\n\t\t\t\t\t\t}];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (expr.schema.shouldValidate && expr.schema.name) {\r\n\t\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t\t_type: 'RCX',\r\n\t\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\t\texpr\r\n\t\t\t\t\t\t}];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!expr.schema.shouldValidate) {\r\n\t\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t\t_type: 'NP',\r\n\t\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\t\texpr\r\n\t\t\t\t\t\t}];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar schemalines = getTree(expr.schema, hypnumMap, $Map);\r\n\r\n\t\t\t\t\treturn [\r\n\t\t\t\t\t\t...schemalines,\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t_type: 'RC',\r\n\t\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\t\tschema: schemalines[schemalines.length - 1].ctr,\r\n\t\t\t\t\t\t\targs: expr.args,\r\n\t\t\t\t\t\t\texpr\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t];\r\n\t\t\t\tcase 'typevar':\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'NP',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\tcase 'schema':\r\n\t\t\t\t\tif (expr.shouldValidate && expr.name && expr != theexpr) {\r\n\t\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t\t_type: 'RS',\r\n\t\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\t\texpr\r\n\t\t\t\t\t\t}];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!expr.expr) {\r\n\t\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t\t_type: 'NP',\r\n\t\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\t\texpr\r\n\t\t\t\t\t\t}];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t$Map = new Map($Map);\r\n\r\n\t\t\t\t\tvar start = ctr + 1;\r\n\r\n\t\t\t\t\tvar $lines = [];\r\n\t\t\t\t\t\r\n\t\t\t\t\texpr.def$s.forEach($ => {\r\n\t\t\t\t\t\tvar lines = getTree($.expr, hypnumMap, $Map);\r\n\t\t\t\t\t\t$lines = $lines.concat(lines);\r\n\r\n\t\t\t\t\t\tvar $num = lines[lines.length - 1].ctr;\r\n\t\t\t\t\t\t$Map.set($, $num);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'V',\r\n\t\t\t\t\t\t$lines,\r\n\t\t\t\t\t\tlines: getTree(expr.expr, hypnumMap, $Map),\r\n\t\t\t\t\t\t// getHtmlLine 함수가 이 배열을 조작하기 때문에\r\n\t\t\t\t\t\t// shallow copy 해야 한다.\r\n\t\t\t\t\t\tparams: expr.params.slice(),\r\n\t\t\t\t\t\tctr: [start ,ctr]\r\n\t\t\t\t\t}];\r\n\t\t\t\tcase 'tee':\r\n\t\t\t\t\thypnumMap = new Map(hypnumMap);\r\n\t\t\t\t\tvar leftlines = [];\r\n\r\n\t\t\t\t\tvar start = ctr + 1;\r\n\r\n\t\t\t\t\texpr.left.forEach(l => {\r\n\t\t\t\t\t\thypnumMap.set(l, ++ctr);\r\n\t\t\t\t\t\tleftlines.push({\r\n\t\t\t\t\t\t\t_type: 'H',\r\n\t\t\t\t\t\t\tctr,\r\n\t\t\t\t\t\t\texpr: l\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t$Map = new Map($Map);\r\n\r\n\t\t\t\t\tvar $lines = [];\r\n\t\t\t\t\texpr.def$s.forEach($ => {\r\n\t\t\t\t\t\tvar lines = getTree($.expr, hypnumMap, $Map);\r\n\t\t\t\t\t\t$lines = $lines.concat(lines);\r\n\r\n\t\t\t\t\t\tvar $num = lines[lines.length - 1].ctr;\r\n\t\t\t\t\t\t$Map.set($, $num);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'T',\r\n\t\t\t\t\t\tleftlines,\r\n\t\t\t\t\t\t$lines,\r\n\t\t\t\t\t\trightlines: getTree(expr.right, hypnumMap, $Map),\r\n\t\t\t\t\t\tctr: [start, ctr]\r\n\t\t\t\t\t}];\r\n\t\t\t\tcase '$var':\r\n\t\t\t\t\tif (!$Map.has(expr)) {\r\n\t\t\t\t\t\tthrow Error(`${expr.name} is not defined`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'R',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tnum: $Map.get(expr),\r\n\t\t\t\t\t\texpr: expr.expr\r\n\t\t\t\t\t}];\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tconsole.error(expr.error(`Unknown type ${expr._type}`));\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: '?',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t}\r\n\t\t})(theexpr, new Map(), new Map());\r\n\r\n\t\tvar html = '<table class=\"explorer\">';\r\n\t\thtml += `<tr><th>#</th><th colspan=\"${ncols}\">expr</th><th colspan=\"2\">rule</th></tr>`;\r\n\t\t\r\n\t\thtml += (function tree2html(lines, left) {\r\n\t\t\treturn lines.map(line => {\r\n\t\t\t\tswitch (line._type) {\r\n\t\t\t\t\tcase 'V':\r\n\t\t\t\t\t\treturn tree2html(line.$lines, left.concat([line.params]))\r\n\t\t\t\t\t\t\t+ tree2html(line.lines, left.concat([line.params]));\r\n\t\t\t\t\tcase 'T':\r\n\t\t\t\t\t\tvar newleft = left.concat([[]]);\r\n\r\n\t\t\t\t\t\tvar ret = '';\r\n\r\n\t\t\t\t\t\tif (line.leftlines.length == 0) {\r\n\t\t\t\t\t\t\tvar emptyleft = Array(left.length + 1).fill([]);\r\n\r\n\t\t\t\t\t\t\tret += getHtmlLine(\r\n\t\t\t\t\t\t\t\t'', emptyleft, '', '', {bbb: true, rrb: true}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tret += line.leftlines.map((line, i, a) => {\r\n\t\t\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\t\t\tnewleft,\r\n\t\t\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t\t\t'assumption',\r\n\t\t\t\t\t\t\t\t\t{bbb: i == a.length - 1, rrb: true}\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}).join('');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tret += tree2html(\r\n\t\t\t\t\t\t\tline.$lines,\r\n\t\t\t\t\t\t\tnewleft\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tret += tree2html(\r\n\t\t\t\t\t\t\tline.rightlines,\r\n\t\t\t\t\t\t\tnewleft\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\treturn ret;\r\n\t\t\t\t\tcase '?':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t'???'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'H':\r\n\t\t\t\t\t\tthrow Error('no');\r\n\t\t\t\t\tcase 'R':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.num)]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'RS':\r\n\t\t\t\t\tcase 'RCX':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.expr)]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'RC':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t[DIAMOND, `${exprToHtml(line.schema)} (${line.args.map(a => exprToHtml(a)).join(', ')})`]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'E':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.reduced, true),\r\n\t\t\t\t\t\t\t[DOWN, `${exprToHtml(line.subject)}${line.args ? ' (' + line.args.map(a => exprToHtml(a)).join(', ') + ')' : ''} [${line.leftargs.map(a => exprToHtml(a)).join(', ')}]`]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'NP':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t'<b class=\"red\">not proved</b>'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\t`Unknown type ${line._type}`,\r\n\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}).join('');\r\n\t\t})(tree[0].$lines.concat(tree[0].lines), []);\r\n\t\t\r\n\t\thtml += '</table>';\r\n\t\r\n\t\treturn html;\r\n\t}\r\n}","import Type from './nodes/Type';\r\nimport Typevar from './nodes/Typevar';\r\nimport Schema from './nodes/Schema';\r\n\r\nimport StackTrace from './StackTrace';\r\nimport { Metaexpr } from './ExpressionResolver';\r\nimport $var from './nodes/$var';\r\n\r\nexport type NestedTypeInput = string | NestedTypeInput[];\r\n\r\nexport default class Scope {\r\n\tpublic readonly typedefMap: Map<string, Type> = new Map();\r\n\tpublic readonly defMap: Map<string, Typevar | Schema> = new Map();\r\n\tpublic readonly schemaMap: Map<string, Schema> = new Map();\r\n\tpublic readonly $Map: Map<string, $var> = new Map();\r\n\tpublic readonly hypotheses: Metaexpr[] = [];\r\n\r\n\tpublic readonly parent: Scope;\r\n\tpublic readonly root: Scope;\r\n\r\n\tpublic readonly trace: StackTrace;\r\n\tpublic baseType: Type;\r\n\r\n\tconstructor (parent: Scope, trace?: StackTrace) {\r\n\t\tthis.parent = parent;\r\n\t\tthis.root = parent ? parent.root : this;\r\n\r\n\t\tif (trace && !(trace instanceof StackTrace)) {\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tthis.trace = trace || new StackTrace();\r\n\r\n\t\tthis.baseType = parent ? parent.baseType : null;\r\n\t}\r\n\r\n\tpublic extend(type, name, location): Scope {\r\n\t\tvar child = new Scope(this, this.trace.extend(type, name, location));\r\n\t\tthis.hypotheses.forEach(h => child.hypotheses.push(h));\r\n\t\treturn child;\r\n\t}\r\n\r\n\tpublic error(message: string): Error {\r\n\t\treturn this.trace.error(message);\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic hasOwnType(name: NestedTypeInput): boolean {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\treturn this.typedefMap.has(name);\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\treturn name.map(e => {\r\n\t\t\treturn this.hasOwnType(e);\r\n\t\t}).every(e => e);\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic hasType(name: NestedTypeInput): boolean {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\treturn this.hasOwnType(name)\r\n\t\t\t\t|| (!!this.parent && this.parent.hasType(name));\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\treturn name.map(e => {\r\n\t\t\treturn this.hasType(e);\r\n\t\t}).every(e => e);\r\n\t}\r\n\r\n\tpublic addType(type: Type): Type {\r\n\t\tif (!(type instanceof Type))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (!type.name)\r\n\t\t\tthrow this.error('Something\\'s wrong');\r\n\r\n\t\tif (this.hasOwnType(type.name))\r\n\t\t\tthrow this.error(`Type ${type.name} has already been declared`);\r\n\r\n\t\tif (type.isBaseType) {\r\n\t\t\tif (this.baseType) {\r\n\t\t\t\tthrow this.error('A base type already exists');\r\n\t\t\t}\r\n\r\n\t\t\t(function broadcast(scope: Scope) {\r\n\t\t\t\tscope.baseType = type;\r\n\t\t\t\tif (scope.parent) broadcast(scope.parent);\r\n\t\t\t})(this);\r\n\t\t}\r\n\r\n\t\tthis.typedefMap.set(type.name, type);\r\n\t\treturn type;\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic getType(name: NestedTypeInput): Type {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\tif (!this.hasType(name))\r\n\t\t\t\tthrow this.error(`Type ${name} is not defined`);\r\n\r\n\t\t\treturn this.typedefMap.has(name)\r\n\t\t\t\t? this.typedefMap.get(name) : (!!this.parent && this.parent.getType(name));\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\tvar from = name.slice(0, name.length - 1).map(e => {\r\n\t\t\treturn this.getType(e);\r\n\t\t});\r\n\r\n\t\tvar to = this.getType(name[name.length - 1]);\r\n\r\n\t\treturn new Type({\r\n\t\t\tfunctional: true,\r\n\t\t\tfrom,\r\n\t\t\tto\r\n\t\t});\r\n\t}\r\n\r\n\tpublic hasOwnTypevar(name: string): boolean {\r\n\t\treturn this.defMap.has(name);\r\n\t}\r\n\r\n\tpublic hasTypevar(name: string): boolean {\r\n\t\treturn this.hasOwnTypevar(name) ||\r\n\t\t\t(!!this.parent && this.parent.hasTypevar(name));\r\n\t}\r\n\r\n\tpublic addTypevar(typevar: Typevar | Schema): Typevar | Schema {\r\n\t\tif (!(typevar instanceof Typevar))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwnTypevar(typevar.name))\r\n\t\t\tthrow this.error(`Definition ${typevar.name} has already been declared`);\r\n\r\n\t\tthis.defMap.set(typevar.name, typevar);\r\n\t\treturn typevar;\r\n\t}\r\n\r\n\tpublic addFun(fun: Schema): Schema {\r\n\t\tif (!(fun instanceof Schema))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (!fun.name)\r\n\t\t\tthrow this.error('Cannot add anonymous fun to scope');\r\n\r\n\t\tif (this.hasOwnTypevar(fun.name))\r\n\t\t\tthrow this.error(`Definition ${fun.name} has already been declared`);\r\n\r\n\t\tthis.defMap.set(fun.name, fun);\r\n\t\treturn fun;\r\n\t}\r\n\r\n\tpublic getTypevar(name: string): Typevar | Schema {\r\n\t\tif (!this.hasTypevar(name))\r\n\t\t\tthrow this.error(`Definition ${name} is not defined`);\r\n\r\n\t\treturn this.defMap.has(name)\r\n\t\t\t? this.defMap.get(name) : (!!this.parent && this.parent.getTypevar(name));\r\n\t}\r\n\r\n\tpublic hasOwnSchema(name: string): boolean {\r\n\t\treturn this.schemaMap.has(name) || this.defMap.has(name);\r\n\t}\r\n\r\n\tpublic hasSchema(name: string): boolean {\r\n\t\treturn this.hasOwnSchema(name)\r\n\t\t\t|| (!!this.parent && this.parent.hasSchema(name));\r\n\t}\r\n\r\n\tpublic addSchema(schema: Schema): Schema {\r\n\t\tif (!(schema instanceof Schema))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwnSchema(schema.name))\r\n\t\t\tthrow this.error(`Schema ${schema.name} has already been declared`);\r\n\r\n\t\tthis.schemaMap.set(schema.name, schema);\r\n\t\treturn schema;\r\n\t}\r\n\r\n\tpublic getSchema(name: string): Typevar | Schema {\r\n\t\tif (!this.hasSchema(name))\r\n\t\t\tthrow this.error(`Schema ${name} is not defined`);\r\n\r\n\t\treturn this.schemaMap.has(name)\r\n\t\t\t? this.schemaMap.get(name)\r\n\t\t\t: this.defMap.has(name)\r\n\t\t\t\t? this.defMap.get(name)\r\n\t\t\t\t: (!!this.parent && this.parent.getSchema(name));\r\n\t}\r\n\r\n\tpublic hasOwn$(name: string): boolean {\r\n\t\treturn this.$Map.has(name);\r\n\t}\r\n\r\n\tpublic has$(name: string): boolean {\r\n\t\treturn this.hasOwn$(name)\r\n\t\t\t|| (!!this.parent && this.parent.has$(name));\r\n\t}\r\n\r\n\tpublic add$($: $var): $var {\r\n\t\tif (!($ instanceof $var))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwn$($.name))\r\n\t\t\tthrow this.error(`$var ${$.name} has already been declared`);\r\n\r\n\t\tthis.$Map.set($.name, $);\r\n\t\treturn $;\r\n\t}\r\n\r\n\tpublic get$(name: string): $var {\r\n\t\tif (!this.has$(name))\r\n\t\t\tthrow this.error(`$var ${name} is not defined`);\r\n\r\n\t\treturn this.$Map.has(name)\r\n\t\t\t? this.$Map.get(name) : (!!this.parent && this.parent.get$(name));\r\n\t}\r\n}","export default class StackTrace {\r\n\tpublic readonly stack: any[];\r\n\r\n\tconstructor (stack?: any[]) {\r\n\t\tthis.stack = stack || [];\r\n\t}\r\n\r\n\tpublic extend(type, name, location): StackTrace {\r\n\t\treturn new StackTrace([[type, name, location]].concat(this.stack));\r\n\t}\r\n\r\n\tpublic error(message: string) {\r\n\t\tvar filename = typeof process != 'undefined' && process.argv[2];\r\n\r\n\t\treturn new Error(\r\n\t\t\tmessage\r\n\t\t\t+ '\\n\\tat '\r\n\t\t\t+ (\r\n\t\t\t\tthis.stack.length\r\n\t\t\t\t\t? this.stack.map(([type, name, location]) => {\r\n\t\t\t\t\t\treturn `${type} ${name || '<anonymous>'} (${filename || 'code.math'}:${location.start.line}:${location.start.column})`;\r\n\t\t\t\t\t}).join('\\n\\tat ')\r\n\t\t\t\t\t: `<root> (${filename || 'code.math'}:1:1)`\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*\r\n * PEG.js의 출력과 적절한 클래스 사이를 잇는 인터페이스.\r\n * PEG.js의 출력은 여기에서만 처리해야 한다.\r\n */\r\n\r\nimport Type from './nodes/Type';\r\nimport Typevar from './nodes/Typevar';\r\nimport Tee from './nodes/Tee';\r\nimport Schema from './nodes/Schema';\r\nimport Schemacall from './nodes/Schemacall';\r\nimport Reduction from './nodes/Reduction';\r\n\r\nimport { Expr0, Metaexpr } from './ExpressionResolver';\r\nimport { Def$Object, DefschemaObject, DefunObject, DefvObject, Expr0Object, FuncallObject, FunexprObject, MetaexprObject, ReductionObject, SchemacallObject, SchemaexprObject, StypeObject, TeeObject, TypedefObject, TypeObject, VarObject } from './PegInterfaceDefinitions';\r\nimport Scope, { NestedTypeInput } from './Scope';\r\nimport $var from './nodes/$var';\r\n\r\nfunction typeObjToString(obj: TypeObject): string {\r\n\tif (obj._type != 'type')\r\n\t\tthrow Error('Assertion failed');\r\n\r\n\tif (!obj.ftype) return (obj as StypeObject).name;\r\n\treturn '[' + obj.from.map(typeObjToString).join(', ') + ' -> '\r\n\t\t\t+ typeObjToString(obj.to) + ']';\r\n}\r\n\r\n/*\r\n * Scope#getType이나 Scope#hasType 등의 입력 형태로 바꾼다.\r\n * st\t\t\t\t\t\t-> 'st'\r\n * [cls -> st]\t\t\t\t-> ['cls', 'st']\r\n * [(cls, cls) -> st]\t\t-> ['cls', 'cls', 'st']\r\n * [[cls -> st] -> st]\t\t-> [['cls', 'st'], 'st']\r\n */\r\nfunction typeObjToNestedArr(obj: TypeObject): NestedTypeInput {\r\n\tif (obj._type != 'type')\r\n\t\tthrow Error('Assertion failed');\r\n\r\n\tif (!obj.ftype) {\r\n\t\tobj = obj as StypeObject;\r\n\r\n\t\tif (!obj.name)\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\treturn obj.name;\r\n\t} else {\r\n\t\tif (!obj.from || !obj.to)\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\treturn obj.from.map(typeObjToNestedArr).concat(\r\n\t\t\t[typeObjToNestedArr(obj.to)]\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction varObjToString(obj: VarObject): string {\r\n\tswitch (obj.type) {\r\n\t\tcase '@':\r\n\t\t\treturn `@${obj.name}`;\r\n\t\tcase '$':\r\n\t\t\treturn `${obj.name}`;\r\n\t\tcase 'normal':\r\n\t\t\treturn `${obj.name}`;\r\n\t\tdefault:\r\n\t\t\tthrow Error(`Unknown type ${obj.type}`);\r\n\t}\r\n}\r\n\r\nexport default class PI {\r\n\tpublic static type(obj: TypedefObject, parentScope: Scope): Type {\r\n\t\tif (obj._type != 'typedef')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope: Scope = parentScope.extend('type', obj.name, obj.location);\r\n\r\n\t\tvar origin: Type = obj.origin ? scope.getType(typeObjToNestedArr(obj.origin)) : null;\r\n\r\n\t\tvar name: string = obj.name;\r\n\t\tvar doc: string = obj.doc;\r\n\t\tvar base: boolean = obj.base;\r\n\r\n\t\tif (base && origin) {\r\n\t\t\tthrow scope.error('Base type should not be an alias');\r\n\t\t}\r\n\r\n\t\tif (origin) {\r\n\t\t\treturn new Type({\r\n\t\t\t\tname,\r\n\t\t\t\tdoc,\r\n\t\t\t\tbase,\r\n\t\t\t\torigin\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn new Type({\r\n\t\t\tfunctional: false,\r\n\t\t\tname,\r\n\t\t\tdoc,\r\n\t\t\tbase\r\n\t\t});\r\n\t}\r\n\r\n\tpublic static typevar(obj: DefvObject | VarObject, parentScope: Scope): Typevar | Schema {\r\n\t\tif (!['defv', 'var'].includes(obj._type)) {\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('typevar', obj.name, obj.location);\r\n\r\n\t\tif (obj._type == 'var') {\r\n\t\t\tif (obj.type != 'normal') {\r\n\t\t\t\tthrow scope.error(`Variable type ${obj.type} not allowed`);\r\n\t\t\t}\r\n\r\n\t\t\tif (!scope.hasTypevar(obj.name))\r\n\t\t\t\tthrow scope.error(`Undefined identifier ${obj.name}`);\r\n\t\t\treturn scope.getTypevar(obj.name);\r\n\t\t}\r\n\r\n\t\tif (!scope.hasType(typeObjToNestedArr(obj.type)))\r\n\t\t\tthrow scope.error(`Type ${typeObjToString(obj.type)} is not defined`);\r\n\r\n\t\tvar type = scope.getType(typeObjToNestedArr(obj.type));\r\n\r\n\t\treturn new Typevar({\r\n\t\t\ttype,\r\n\t\t\tisParam: !!obj.isParam,\r\n\t\t\tguess: obj.guess || null,\r\n\t\t\tname: obj.name,\r\n\t\t\tdoc: obj.doc,\r\n\t\t\ttex: obj.tex\r\n\t\t}, scope);\r\n\t}\r\n\r\n\tpublic static fun(obj: DefunObject | FunexprObject, parentScope: Scope): Schema {\r\n\t\tif (obj._type != 'defun' && obj._type != 'funexpr')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar name = null,\r\n\t\t\tdoc = null,\r\n\t\t\ttex = null;\r\n\r\n\t\tif (obj._type == 'defun') {\r\n\t\t\tobj = obj as DefunObject;\r\n\t\t\tname = obj.name;\r\n\t\t\tdoc = obj.doc;\r\n\t\t\ttex = obj.tex;\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('fun', name, obj.location);\r\n\r\n\t\tvar type = null;\r\n\t\tvar params = obj.params.map(tvo => {\r\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\r\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\r\n\r\n\t\t\tvar tv = PI.typevar(tvo, scope);\r\n\r\n\t\t\tif (scope.hasOwnTypevar(tv.name))\r\n\t\t\t\tthrow tv.scope.error(`Parameter ${tv.name} has already been declared`);\r\n\r\n\t\t\treturn scope.addTypevar(tv);\r\n\t\t});\r\n\t\tvar expr = null;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'defun':\r\n\t\t\t\tif (!scope.hasType(typeObjToNestedArr(obj.rettype)))\r\n\t\t\t\t\tthrow scope.error(`Type ${typeObjToString(obj.rettype)} is not defined`);\r\n\r\n\t\t\t\tvar rettype = scope.getType(typeObjToNestedArr(obj.rettype));\r\n\r\n\t\t\t\tif (obj.expr) {\r\n\t\t\t\t\texpr = PI.expr0(obj.expr, scope);\r\n\t\t\t\t\tif (!rettype.equals(expr.type))\r\n\t\t\t\t\t\tthrow scope.error(`Expression type ${expr.type} failed to match the return type ${rettype} of fun ${name}`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttype = new Type({\r\n\t\t\t\t\t\tfunctional: true,\r\n\t\t\t\t\t\tfrom: params.map(typevar => typevar.type),\r\n\t\t\t\t\t\tto: rettype\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'funexpr':\r\n\t\t\t\texpr = PI.expr0(obj.expr, scope);\r\n\t\t\t\ttype = null;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\r\n\t\treturn new Schema({shouldValidate: false, annotations: [], name, type, params, expr, doc, tex}, scope);\r\n\t}\r\n\r\n\tpublic static funcall(obj: FuncallObject, parentScope: Scope): Schemacall {\r\n\t\tif (obj._type != 'funcall')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('funcall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\r\n\r\n\t\tvar schema = PI.expr0(obj.schema, scope);\r\n\r\n\t\tvar args = obj.args.map(arg => {\r\n\t\t\treturn PI.expr0(arg, scope);\r\n\t\t});\r\n\r\n\t\treturn new Schemacall({schema, args}, scope);\r\n\t}\r\n\r\n\tpublic static metaexpr(obj: MetaexprObject, parentScope: Scope): Metaexpr {\r\n\t\tif (!['tee', 'reduction', 'schemacall', 'schemaexpr', 'var'].includes(obj._type))\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'tee':\r\n\t\t\t\treturn PI.tee(obj, scope);\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn PI.reduction(obj, scope);\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\treturn PI.schemacall(obj, scope);\r\n\t\t\tcase 'schemaexpr':\r\n\t\t\t\treturn PI.schema(obj, scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PI.metavar(obj, scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static expr0(obj: Expr0Object, parentScope: Scope): Expr0 {\r\n\t\tif (!['funcall', 'funexpr', 'var'].includes(obj._type)) {\r\n\t\t\tconsole.log(obj);\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'funcall':\r\n\t\t\t\treturn PI.funcall(obj, scope);\r\n\t\t\tcase 'funexpr':\r\n\t\t\t\treturn PI.fun(obj, scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PI.typevar(obj, scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static metavar(obj: VarObject, parentScope: Scope): Metaexpr {\r\n\t\tif (obj._type != 'var')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj.type) {\r\n\t\t\tcase '@':\r\n\t\t\t\tif (obj.name.match(/^h[0-9]+$/)) {\r\n\t\t\t\t\tvar hypnum = Number(obj.name.slice(1)) - 1;\r\n\t\t\t\t\tif (hypnum >= scope.hypotheses.length) {\r\n\t\t\t\t\t\tthrow scope.error(`Hypothesis #${hypnum + 1} not found`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn scope.hypotheses[hypnum];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow scope.error(`Unknown selector query @${obj.name}`);\r\n\t\t\tcase '$':\r\n\t\t\t\tif (!scope.has$(obj.name)) {\r\n\t\t\t\t\tthrow scope.error(`${obj.name} is not defined`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn scope.get$(obj.name);\r\n\t\t\tcase 'normal':\r\n\t\t\t\tif (!scope.hasSchema(obj.name))\r\n\t\t\t\t\tthrow scope.error(`Schema ${obj.name} is not defined`);\r\n\r\n\t\t\t\treturn scope.getSchema(obj.name);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow scope.error(`Unknown type ${obj.type}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static tee(obj: TeeObject, parentScope: Scope): Tee {\r\n\t\tif (obj._type != 'tee')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('tee', null, obj.location);\r\n\r\n\t\tvar left = obj.left.map(o => PI.metaexpr(o, scope));\r\n\r\n\t\tvar scopeRight = scope.extend('tee.right', null, obj.right.location);\r\n\t\tleft.forEach(l => scopeRight.hypotheses.push(l));\r\n\r\n\t\tvar def$s = obj.def$s.map($ => {\r\n\t\t\tvar $v = PI.def$($, scopeRight);\r\n\r\n\t\t\tif (scopeRight.hasOwn$($v.name)) {\r\n\t\t\t\tthrow scopeRight.error(`${$.name} has already been declared`);\r\n\t\t\t}\r\n\r\n\t\t\treturn scopeRight.add$($v);\r\n\t\t});\r\n\r\n\t\tvar right = PI.metaexpr(obj.right, scopeRight);\r\n\r\n\t\treturn new Tee({left, def$s, right}, scope);\r\n\t}\r\n\r\n\tpublic static def$(obj: Def$Object, parentScope: Scope): $var {\r\n\t\tif (obj._type != 'def$')\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t\r\n\t\tvar scope = parentScope.extend('def$', obj.name, obj.location);\r\n\t\t\r\n\t\tvar expr = PI.metaexpr(obj.expr, scope);\r\n\r\n\t\treturn new $var({name: obj.name, expr}, scope);\r\n\t}\r\n\r\n\tpublic static schema(obj: DefschemaObject | SchemaexprObject, parentScope: Scope): Schema {\r\n\t\tif (obj._type != 'defschema' && obj._type != 'schemaexpr')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar name: string = null,\r\n\t\t\taxiomatic: boolean = false,\r\n\t\t\tdoc: string = null,\r\n\t\t\tannotations: string[] = [];\r\n\r\n\t\tif (obj._type == 'defschema') {\r\n\t\t\tname = obj.name; axiomatic = obj.axiomatic;\r\n\t\t\tdoc = obj.doc; annotations = obj.annotations;\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('schema', name, obj.location);\r\n\r\n\t\tvar params = obj.params.map(tvo => {\r\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\r\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\r\n\r\n\t\t\tvar tv = PI.typevar(tvo, scope);\r\n\r\n\t\t\tif (scope.hasOwnTypevar(tv.name))\r\n\t\t\t\tthrow tv.scope.error(`Parameter ${tv.name} has already been declared`);\r\n\t\t\t\r\n\t\t\treturn scope.addTypevar(tv);\r\n\t\t});\r\n\r\n\t\tvar def$s = obj.def$s.map($ => {\r\n\t\t\tvar $v = PI.def$($, scope);\r\n\r\n\t\t\tif (scope.hasOwn$($v.name)) {\r\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\r\n\t\t\t}\r\n\r\n\t\t\treturn scope.add$($v);\r\n\t\t});\r\n\r\n\t\tvar expr = PI.metaexpr(obj.expr, scope);\r\n\r\n\t\treturn new Schema({shouldValidate: true, doc, annotations, axiomatic, name, params, def$s, expr}, scope);\r\n\t}\r\n\r\n\tpublic static schemacall(obj: SchemacallObject, parentScope: Scope): Schemacall {\r\n\t\tif (obj._type != 'schemacall')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('schemacall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\r\n\r\n\t\tvar schema = PI.metaexpr(obj.schema, scope);\r\n\r\n\t\tvar args = obj.args.map(obj => {\r\n\t\t\treturn PI.expr0(obj, scope);\r\n\t\t});\r\n\r\n\t\treturn new Schemacall({\r\n\t\t\tschema,\r\n\t\t\targs\r\n\t\t}, scope);\r\n\t}\r\n\r\n\tpublic static reduction(obj: ReductionObject, parentScope: Scope): Reduction {\r\n\t\tif (obj._type != 'reduction')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('reduction', 'name' in obj.subject ? obj.subject.name : null, obj.location);\r\n\r\n\t\tvar subject = PI.metaexpr(obj.subject, scope);\r\n\r\n\t\tvar guesses = !obj.guesses\r\n\t\t\t? null\r\n\t\t\t: obj.guesses.map(g => {\r\n\t\t\t\treturn g && PI.expr0(g, scope);\r\n\t\t\t});\r\n\r\n\t\tvar leftargs = obj.leftargs.map(obj => {\r\n\t\t\treturn PI.metaexpr(obj, scope);\r\n\t\t});\r\n\r\n\t\treturn new Reduction({\r\n\t\t\tsubject,\r\n\t\t\tguesses,\r\n\t\t\tleftargs\r\n\t\t}, scope);\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport Schemacall from './Schemacall';\r\n\r\nimport ExpressionResolver, { Metaexpr } from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport Tee from './Tee';\r\n\r\nexport default class Reduction extends Node {\r\n\tpublic readonly _type = 'reduction';\r\n\r\n\tpublic readonly subject: Metaexpr;\r\n\tpublic readonly guesses;\r\n\tpublic readonly leftargs;\r\n\tpublic readonly reduced;\r\n\tpublic readonly type;\r\n\r\n\tconstructor ({subject, guesses, leftargs}, scope?: Scope) {\r\n\t\tsuper(scope);\r\n\r\n\t\tif (guesses) {\r\n\t\t\tvar resolvedType = subject.type.resolve(),\r\n\t\t\t\tparamTypes = resolvedType.from,\r\n\t\t\t\targTypes = guesses.map(e => e && e.type);\r\n\r\n\t\t\tif (paramTypes.length != argTypes.length)\r\n\t\t\t\tthrow this.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`);\r\n\r\n\t\t\tfor (var i = 0; i < paramTypes.length; i++) {\r\n\t\t\t\tif (argTypes[i] && !paramTypes[i].equals(argTypes[i])) {\r\n\t\t\t\t\tthrow this.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (subject._type == 'schema') {\r\n\t\t\tsubject.params.forEach((p, i) => {\r\n\t\t\t\tif (!(guesses && guesses[i]) && !p.guess) {\r\n\t\t\t\t\tthrow this.error(`Argument #${i + 1} could not be guessed`);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\r\n\t\t\tvar derefs = subject.params.map((p, i) => {\r\n\t\t\t\tif (guesses && guesses[i]) return guesses[i];\r\n\t\r\n\t\t\t\treturn this.query(\r\n\t\t\t\t\tp.guess,\r\n\t\t\t\t\t(ExpressionResolver.expandMeta(subject.expr) as Tee).left,\r\n\t\t\t\t\tleftargs\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\r\n\t\t\tsubject = new Schemacall({\r\n\t\t\t\tschema: subject,\r\n\t\t\t\targs: derefs,\r\n\t\t\t}, scope);\r\n\t\t} else if (guesses) {\r\n\t\t\tthrow this.error('Something\\'s wrong');\r\n\t\t}\r\n\t\r\n\t\tif (!(subject.type._type == 'metatype' && subject.type.isSimple))\r\n\t\t\tthrow this.error('Subject is not reducible');\r\n\t\r\n\t\tif (!(leftargs instanceof Array)\r\n\t\t\t\t|| leftargs.map(e => e instanceof Node).some(e => !e))\r\n\t\t\tthrow this.error('Assertion failed');\r\n\t\t\r\n\t\tthis.subject = subject;\r\n\t\tthis.leftargs = leftargs;\r\n\r\n\t\tvar paramTypes = subject.type.left,\r\n\t\t\tleftargTypes = leftargs.map(e => e.type);\r\n\r\n\t\tif (paramTypes.length != leftargTypes.length)\r\n\t\t\tthrow this.error(`Invalid number of arguments (expected ${paramTypes.length}): ${leftargTypes.length}`);\r\n\r\n\t\tfor (let i = 0; i < paramTypes.length; i++) {\r\n\t\t\tif (!paramTypes[i].equals(leftargTypes[i]))\r\n\t\t\t\tthrow this.error(`Illegal argument type (expected ${paramTypes[i]}): ${leftargTypes[i]}`);\r\n\t\t}\r\n\r\n\t\tthis.type = subject.type.right;\r\n\r\n\t\tvar tee = ExpressionResolver.expandMetaAndFuncalls(subject);\r\n\r\n\t\tif (tee._type != 'tee') {\r\n\t\t\tthrow this.error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < tee.left.length; i++) {\r\n\t\t\tif (!ExpressionResolver.equals(tee.left[i], leftargs[i])) {\r\n\t\t\t\tthrow this.error(`LHS #${i + 1} failed to match:\r\n\r\n--- EXPECTED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(tee.left[i])}\r\n----------------\r\n\r\n--- RECEIVED ---\r\n${ExpressionResolver.expandMetaAndFuncalls(leftargs[i])}\r\n----------------`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.reduced = tee.right;\r\n\t}\r\n\r\n\tpublic isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn super.isProved(hyps)\r\n\t\t\t|| this.subject.isProved(hyps)\r\n\t\t\t\t&& this.leftargs.every(l => l.isProved(hyps));\r\n\t}\r\n\r\n\tpublic query(guess, left, leftargs) {\r\n\t\tif (guess.length == 0) throw this.error('wut');\r\n\r\n\t\tif (!(1 <= guess[0] * 1 && guess[0] * 1 <= leftargs.length))\r\n\t\t\tthrow this.error(`Cannot dereference @${guess}: antecedent index out of range`);\r\n\r\n\t\tvar lef = left[guess[0] * 1 - 1];\r\n\t\tvar ret = leftargs[guess[0] * 1 - 1];\r\n\r\n\t\tvar that = this;\r\n\r\n\t\treturn (function recurse(guess, lef, node, ptr) {\r\n\t\t\tnode = ExpressionResolver.expandMetaAndFuncalls(node);\r\n\t\t\t\r\n\t\t\tif (guess.length <= ptr) return node;\r\n\r\n\t\t\tif (/[0-9]/.test(guess[ptr])) {\r\n\t\t\t\tvar n = guess[ptr] * 1;\r\n\r\n\t\t\t\tif (lef._type == 'tee' && node._type == 'tee') {\r\n\t\t\t\t\tif (lef.left.length != node.left.length) {\r\n\t\t\t\t\t\tthrow that.error(`Cannot dereference @${guess}: antecedent length mismatch`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!(1 <= n && n <= node.left.length)) {\r\n\t\t\t\t\t\tthrow that.error(`Cannot dereference @${guess}: antecedent index out of range`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn recurse(guess, lef.left[n - 1], node.left[n - 1], ptr + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tif (!lef.schema || !node.schema) {\r\n\t\t\t\t\t\tthrow that.error(`Cannot dereference @${guess}`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (ExpressionResolver.equals(lef.schema, node.schema)) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!node.schema.expr) {\r\n\t\t\t\t\t\tthrow that.error(`Cannot dereference @${guess}`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnode = ExpressionResolver.expandCallOnce(node);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!node.args || !(1 <= n && n <= node.args.length))\r\n\t\t\t\t\tthrow that.error(`Cannot dereference @${guess}`);\r\n\r\n\t\t\t\treturn recurse(guess, lef.args[n - 1], node.args[n - 1], ptr + 1);\r\n\t\t\t} else if (guess[ptr] == 'r') {\r\n\t\t\t\tif (lef._type == 'tee' && node._type == 'tee') {\r\n\t\t\t\t\treturn recurse(guess, lef.right, node.right, ptr + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow that.error(`Cannot dereference @${guess}`);\r\n\t\t\t}\r\n\r\n\t\t\tthrow that.error(`Cannot dereference @${guess}`);\r\n\t\t})(guess, lef, ret, 1);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tvar leftargs = this.leftargs.map(arg => {\r\n\t\t\treturn arg.toIndentedString(indent + 1);\r\n\t\t});\r\n\t\r\n\t\tif (leftargs.join('').length <= 50) {\r\n\t\t\tleftargs = this.leftargs.map(arg => {\r\n\t\t\t\treturn arg.toIndentedString(indent);\r\n\t\t\t});\r\n\t\r\n\t\t\tleftargs = leftargs.join(', ');\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\r\n\t\t\t\tleftargs,\r\n\t\t\t\t']'\r\n\t\t\t].join('');\r\n\t\t}\r\n\t\telse {\r\n\t\t\tleftargs = leftargs.join(',\\n' + '\\t'.repeat(indent + 1));\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\r\n\t\t\t\t'\\t' + leftargs,\r\n\t\t\t\t']'\r\n\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\treturn `${this.subject.toTeXString(false)}[${this.leftargs.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}]`;\r\n\t}\r\n}"],"sourceRoot":""}