{"version":3,"sources":["webpack://math/webpack/universalModuleDefinition","webpack://math/webpack/bootstrap","webpack://math/./src/nodes/Node.ts","webpack://math/./src/nodes/Metaexpr.ts","webpack://math/./src/nodes/ObjectType.ts","webpack://math/./src/nodes/Fun.ts","webpack://math/./src/nodes/$Variable.ts","webpack://math/./src/nodes/Variable.ts","webpack://math/./src/nodes/Funcall.ts","webpack://math/./src/nodes/ObjectFun.ts","webpack://math/./src/nodes/Expr0.ts","webpack://math/./src/nodes/MetaType.ts","webpack://math/./src/nodes/Schema.ts","webpack://math/./src/nodes/Tee.ts","webpack://math/./src/nodes/Type.ts","webpack://math/./src/nodes/Nameable.ts","webpack://math/./src/nodes/Reduction.ts","webpack://math/./src/entry.js","webpack://math/./src/grammar.pegjs","webpack://math/./src/Program.ts","webpack://math/./src/PegInterface.ts","webpack://math/./src/ProofExplorer.ts","webpack://math/./src/Scope.ts","webpack://math/./src/StackTrace.ts","webpack://math/./node_modules/process/browser.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","ctr","Node","trace","doc","tex","_id","toIndentedString","message","error","Error","replace","precedence","code","match","g1","hyps","length","prec","Array","console","log","my","normalizePrecedence","your","id","args","ret","shouldConsolidate","_match","PREC_FUNEXPR","PREC_COMMA","PREC_COLONEQQ","EqualsPriority","Metaexpr","type","super","obj","equals","getEqualsPriority","equalsInternal","ObjectType","origin","isFunctional","isBaseType","base","functional","from","map","f","some","e","to","resolved","resolve","toSimpleString","join","indent","isSimple","toTeXString","Fun","annotations","sealed","params","expr","parsed","parseTeX","variable","isProved","ONE","placeholders","types","push","isParam","thisCall","fun","unseal","objCall","Map","set","substitute","$Variable","andFuncalls","expandMeta","FOUR","escapeTeX","Variable","guess","ZERO","Funcall","isNameable","resolvedType","paramTypes","argTypes","arg","callee","isExpandable","expandOnce","THREE","thisIsExpandable","objIsExpandable","every","_","repeat","funcallToTeXString","ObjectFun","has","makeTeX","Expr0","MetaType","left","right","Schema","axiomatic","using","def$s","_isProvedCache","cache","toTeXStringWithId","Tee","$","concat","lef","TWO","expanded","Type","Reduction","subject","guesses","leftargs","expected","forEach","derefs","tee","query","leftargTypes","leftargsExpanded","reduced","Number","recurse","node","ptr","test","grammar","default","Program","parser","scope","scopeMap","filename","loader","loadModuleInternal","parse","feed","lines","line","_type","scope2","importMap","hasType","addType","hasVariable","addVariable","addFun","schema","hasSchema","addSchema","reduction","schemacall","metavar","ktx","typeObjToString","ftype","typeObjToNestedArr","PI","parentScope","extend","location","getType","includes","getVariable","tvo","tv","hasOwnVariable","rettype","expr0","funcall","hypnum","slice","hypotheses","has$","get$","getSchema","metaexpr","scopeRight","$v","def$","hasOwn$","add$","g","ProofExplorer","DIAMOND","theexpr","ncols","Math","max","getHtmlLine","h1","h2","options","padding","bbb","rrb","htmlLeft","a","pop","exprToHtml","expand","tree","getTree","hypnumMap","$Map","num","leftarglines","leftargnums","subjectlines","subjectnum","schemalines","start","$lines","$num","leftlines","rightlines","html","tree2html","newleft","fill","Scope","parent","typedefMap","defMap","schemaMap","baseType","child","h","values","hasOwnType","broadcast","filter","hasOwnSchema","StackTrace","stack","element","process","argv","column","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","len","run","runClearTimeout","marker","Item","array","noop","nextTick","arguments","apply","title","browser","env","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask"],"mappings":"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","file":"math.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"math\"] = factory();\n\telse\n\t\troot[\"math\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","import StackTrace from '../StackTrace';\n\nvar ctr = 0;\n\nexport type Precedence = boolean | number | [number, number];\n\nexport default abstract class Node {\n\tpublic readonly _id: number;\n\n\tpublic readonly trace: StackTrace;\n\tpublic readonly doc: string;\n\tpublic readonly tex: string;\n\tpublic precedence: Precedence;\n\n\tpublic static readonly PREC_FUNEXPR = 1000;\n\tpublic static readonly PREC_COMMA = 1000;\n\tpublic static readonly PREC_COLONEQQ = 100000;\n\n\tconstructor (trace: StackTrace, doc: string, tex: string) {\n\t\tthis._id = ++ctr;\n\t\tthis.trace = trace;\n\t\tthis.doc = doc;\n\t\tthis.tex = tex;\n\t}\n\n\tpublic toString() {\n\t\treturn this.toIndentedString(0);\n\t}\n\n\tpublic abstract toIndentedString(indent: number, root?: boolean): string;\n\tpublic abstract toTeXString(prec?: Precedence, root?: boolean): string;\n\n\tpublic error(message: string) {\n\t\treturn Node.error(message, this.trace);\n\t}\n\n\tpublic static error(message: string, trace: StackTrace) {\n\t\tif (trace) {\n\t\t\treturn trace.error(message);\n\t\t} else {\n\t\t\treturn new Error(message);\n\t\t}\n\t}\n\n\tpublic static escapeTeX(s) {\n\t\treturn s.replace(/&|%|\\$|#|_|{|}|~|\\^|\\\\/g, m => ({\n\t\t\t'&': '\\\\&', '%': '\\\\%', '$': '\\\\$',\n\t\t\t'#': '\\\\#', '_': '\\\\_', '{': '\\\\{',\n\t\t\t'}': '\\\\}',\n\t\t\t'~': '\\\\textasciitilde',\n\t\t\t'^': '\\\\textasciicircum',\n\t\t\t'\\\\': '\\\\textbackslash'\n\t\t})[m]);\n\t}\n\n\tpublic static parseTeX(tex) {\n\t\tvar precedence: Precedence = false;\n\n\t\tvar code = tex.replace(/^!<prec=([0-9]+)>/, (match, g1) => {\n\t\t\tprecedence = g1 * 1;\n\t\t\treturn '';\n\t\t});\n\n\t\treturn {precedence, code};\n\t}\n\n\tpublic isProved(hyps?): boolean {\n\t\thyps = hyps || [];\n\n\t\tfor (var i = 0; i < hyps.length; i++) {\n\t\t\tif (hyps[i] == this) return true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/*\n\t* false corresponds to 0.\n\t* true corresponds to w * 2.\n\t*/\n\tpublic static normalizePrecedence(prec: Precedence) {\n\t\tif (prec === false) return [0, 0];\n\t\tif (prec === true) return [2, 0];\n\t\tif (typeof prec == 'number') return [0, prec];\n\n\t\tif (!(prec instanceof Array && prec.length == 2)) {\n\t\t\tconsole.log(prec);\n\t\t\tthrow Error('wut');\n\t\t}\n\n\t\treturn prec;\n\t}\n\n\tpublic shouldConsolidate(prec: Precedence) {\n\t\tvar my = Node.normalizePrecedence(this.precedence || false),\n\t\t\tyour = Node.normalizePrecedence(prec || false);\n\n\t\tif (my[0] == 0 && my[1] == 0) return false;\n\n\t\treturn !(my[0] < your[0] || my[0] == your[0] && my[1] < your[1]);\n\t}\n\n\tpublic makeTeX(id, args, prec) {\n\t\targs = args || [];\n\t\tprec = prec || false;\n\t\t\n\t\tvar ret = this.tex;\n\n\t\tif (this.shouldConsolidate(prec)) {\n\t\t\tret = '\\\\left(' + ret + '\\\\right)';\n\t\t}\n\n\t\treturn ret.replace(/#([0-9]+)/g, (match, g1) => {\n\t\t\treturn args[g1 * 1 - 1] || `\\\\texttt{\\\\textcolor{red}{\\\\#${g1}}}`;\n\t\t}).replace(/<<(.+?)>>/, (_match, g1) => {\n\t\t\treturn `\\\\href{#${id}}{${g1}}`;\n\t\t});\n\t}\n}","import StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Node from \"./Node\";\nimport Type from \"./Type\";\nimport Variable from \"./Variable\";\n\n/**\n * 숫자가 큰 것이 우선순위가 높다.\n */\nexport enum EqualsPriority {\n\t/** Variable */\n\tZERO,\n\t/** Fun */\n\tONE,\n\t/** Tee */\n\tTWO,\n\t/** Funcall */\n\tTHREE,\n\t/** $Variable, Reduction */\n\tFOUR\n}\n\nexport default abstract class Metaexpr extends Node {\n\tpublic readonly type: Type;\n\n\tconstructor(trace: StackTrace, doc: string, tex: string, type: Type) {\n\t\tsuper(trace, doc, tex);\n\n\t\tif (!type) throw Node.error('Assertion failed', trace);\n\n\t\tthis.type = type;\n\t}\n\n\tpublic abstract substitute(map: Map<Variable, Expr0>): Metaexpr;\n\n\t/**\n\t * \n\t * @param andFuncalls 이름 없는 Funcall도 푼다.\n\t */\n\tpublic abstract expandMeta(andFuncalls: boolean): Metaexpr;\n\n\tpublic equals(obj: Metaexpr): boolean {\n\t\tif (this === obj) return true;\n\t\tif (!this.type.equals(obj.type)) return false;\n\n\t\tif (obj.getEqualsPriority() > this.getEqualsPriority())\n\t\t\treturn obj.equalsInternal(this);\n\t\t\n\t\treturn this.equalsInternal(obj);\n\t}\n\n\tprotected abstract getEqualsPriority(): EqualsPriority;\n\n\tprotected abstract equalsInternal(obj: Metaexpr): boolean;\n}","import Nameable from './Nameable';\nimport Node from './Node';\nimport Type from './Type';\n\nexport default class ObjectType extends Type implements Nameable {\n\n\tpublic readonly isBaseType: boolean;\n\tpublic readonly name: string;\n\tpublic readonly origin: ObjectType;\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: ObjectType;\n\n\tconstructor (o) {\n\t\tif (o.origin) {\n\t\t\tsuper(null, o.doc, null, o.origin.isFunctional);\n\n\t\t\tthis.isBaseType = !!o.base;\n\n\t\t\tif (typeof o.name != 'string')\n\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\n\t\t\tthis.name = o.name;\n\n\t\t\tif (!(o.origin instanceof ObjectType))\n\t\t\t\tthrow Node.error('!(o.origin instanceof ObjectType)', null);\n\n\t\t\tthis.origin = o.origin;\n\t\t} else {\n\t\t\tsuper(null, o.doc, null, o.functional);\n\n\t\t\tthis.isBaseType = !!o.base;\n\n\t\t\tif (typeof o.functional != 'boolean')\n\t\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\n\n\t\t\tif (!o.functional) {\n\t\t\t\tif (typeof o.name != 'string')\n\t\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\n\t\t\t\tthis.name = o.name;\n\t\t\t} else {\n\t\t\t\tif (o.from.map(f => f instanceof ObjectType).some(e => !e))\n\t\t\t\t\tthrow Node.error('o.from.map(f => f instanceof ObjectType).some(e => !e)', null);\n\t\t\t\tif (!(o.to instanceof ObjectType))\n\t\t\t\t\tthrow Node.error('!(o.to instanceof ObjectType)', null);\n\n\t\t\t\tthis.from = o.from;\n\t\t\t\tthis.to = o.to;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toSimpleString() {\n\t\tif (this.name) return this.name;\n\n\t\tvar resolved = this.resolve();\n\n\t\treturn `[${resolved.from.map(e => e.toSimpleString()).join(', ')} -> ${resolved.to.toSimpleString()}]`;\n\t}\n\n\tpublic toIndentedString(indent): string {\n\t\tif (this.isSimple) return this.name;\n\n\t\treturn `${this.name ? this.name + ': ' : ''}[${this.resolve().from.join(', ')} -> ${this.resolve().to}]`;\n\t}\n\n\tpublic toTeXString(root?: boolean) {\n\t\tif (this.isSimple) return `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\n\n\t\tif (!root && this.name) {\n\t\t\treturn `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\n\t\t}\n\n\t\treturn `${this.name ? `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}: ` : ''}`\n\t\t\t+ `\\\\left[${this.resolve().from.map(e => e.toTeXString()).join(' \\\\times ')}`\n\t\t\t+ ` \\\\to ${this.resolve().to.toTeXString()} \\\\right]`;\n\t}\n\n\tpublic resolve(): ObjectType {\n\t\treturn this.origin ? this.origin.resolve() : this;\n\t}\n\n\tpublic equals(t: Type): boolean {\n\t\tif (!(t instanceof ObjectType)) return false;\n\n\t\tif (this.origin) return this.origin.equals(t);\n\t\tif (t.origin) return this.equals(t.origin);\n\n\t\tif (this.isSimple != t.isSimple) return false;\n\n\t\tif (this.isSimple) return this === t;\n\n\t\tif (this.from.length != t.from.length) return false;\n\n\t\tfor (var i = 0; i < this.from.length; i++)\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\n\n\t\treturn this.to.equals(t.to);\n\t}\n}","import Expr0 from './Expr0';\nimport Nameable from './Nameable';\n\nexport default abstract class Fun extends Expr0 implements Nameable {\n\n\tpublic readonly annotations: string[];\n\tpublic readonly sealed: boolean;\n\tpublic readonly name: string;\n\tpublic readonly params: Variable[];\n\tpublic readonly expr: Metaexpr;\n\n\t/*\n\t * name, expr 중 하나 이상 있어야 하고 type, expr 중\n\t * 한 개만 있어야 한다.\n\t */\n\tconstructor ({doc, tex, annotations, sealed, type, name, params, expr}: FunArgumentType, trace: StackTrace) {\n\t\tif (!name && !expr)\n\t\t\tthrow Node.error('Anonymous fun cannot be primitive', trace);\n\n\t\tif (type && expr)\n\t\t\tthrow Node.error('no', trace);\n\n\t\tif (!type && !expr)\n\t\t\tthrow Node.error('Cannot guess the type of a primitive fun', trace);\n\t\t\n\t\tvar precedence = false;\n\n\t\tif (tex) {\n\t\t\tvar parsed = Node.parseTeX(tex);\n\t\t\tprecedence = parsed.precedence;\n\t\t\ttex = parsed.code;\n\t\t} else {\n\t\t\ttex = null;\n\t\t}\n\t\t\n\t\tsuper(\n\t\t\ttrace, doc, tex,\n\t\t\ttype || new (expr.type instanceof ObjectType ? ObjectType : MetaType)({\n\t\t\t\tfunctional: true,\n\t\t\t\tfrom: params.map(variable => variable.type),\n\t\t\t\tto: expr.type as any\n\t\t\t})\n\t\t);\n\n\t\tthis.annotations = annotations;\n\t\tthis.sealed = sealed;\n\t\tthis.precedence = precedence;\n\t\tthis.name = name;\n\t\tthis.params = params;\n\t\tthis.expr = expr;\n\t}\n\n\tpublic isProved(hyps?) {\n\t\thyps = hyps || [];\n\t\t\n\t\treturn super.isProved(hyps)\n\t\t\t|| this.expr && this.expr.isProved(hyps);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.ONE;\n\t}\n\t\n\tprotected equalsInternal(obj: Metaexpr): boolean {\n\t\tif (!(this.expr && !this.sealed)\n\t\t\t\t&& !(obj instanceof Fun && obj.expr && !obj.sealed)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar placeholders = [];\n\t\tvar types = (this.type.resolve() as ObjectType | MetaType).from;\n\n\t\tfor (var i = 0; i < types.length; i++) {\n\t\t\tplaceholders.push(new Variable({\n\t\t\t\tisParam: true,\n\t\t\t\ttype: types[i],\n\t\t\t\tname: '$' + i\n\t\t\t}, this.trace));\n\t\t}\n\n\t\tvar thisCall = this.expr && !this.sealed\n\t\t\t? this.call(placeholders)\n\t\t\t: new Funcall({\n\t\t\t\tfun: this,\n\t\t\t\tunseal: false,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\n\t\tvar objCall = obj instanceof Fun && obj.expr && !obj.sealed\n\t\t\t? obj.call(placeholders)\n\t\t\t: new Funcall({\n\t\t\t\tfun: obj,\n\t\t\t\tunseal: false,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\t\t\n\t\treturn thisCall.equals(objCall);\n\t}\n\n\tpublic call(args: Expr0[]): Metaexpr {\n\t\tif (!this.expr) {\n\t\t\tthrow Error('Cannot call a primitive fun');\n\t\t}\n\n\t\tif (this.params.length != args.length) {\n\t\t\tthrow Error('Illegal arguments length');\n\t\t}\n\n\t\tvar map: Map<Variable, Expr0> = new Map();\n\n\t\tfor (var i = 0; i < this.params.length; i++) {\n\t\t\tmap.set(this.params[i], args[i]);\n\t\t}\n\n\t\treturn this.expr.substitute(map);\n\t}\n}\n\nimport Funcall from './Funcall';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport Node from './Node';\nimport ObjectType from './ObjectType';\nimport Type from './Type';\nimport Variable from './Variable';\nimport StackTrace from '../StackTrace';\n\ninterface FunArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\tannotations: string[];\n\tsealed: boolean;\n\ttype?: Type;\n\tname?: string;\n\tparams: Variable[];\n\texpr?: Metaexpr;\n}","import StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Metaexpr, { EqualsPriority } from \"./Metaexpr\";\nimport Nameable from \"./Nameable\";\nimport Node, { Precedence } from \"./Node\";\nimport Variable from \"./Variable\";\n\ninterface $VariableArgumentType {\n\tname: string;\n\texpr: Metaexpr;\n}\n\nexport default class $Variable extends Metaexpr implements Nameable {\n\n\tpublic readonly name: string;\n\tpublic readonly expr: Metaexpr;\n\n\tconstructor ({name, expr}: $VariableArgumentType, trace: StackTrace) {\n\t\tsuper(trace, null, null, expr.type);\n\n\t\tif (!name || !expr) {\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tthis.name = name;\n\t\tthis.expr = expr;\n\t}\n\n\tpublic isProved(hyps?): boolean {\n\t\thyps = hyps || [];\n\t\t\n\t\treturn super.isProved(hyps)\n\t\t\t|| this.expr.isProved(hyps);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn this.expr.substitute(map);\n\t}\n\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\treturn this.expr.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FOUR;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr): boolean {\n\t\treturn this.expr.equals(obj);\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn this.name;\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `\\\\mathtt{${Node.escapeTeX(this.name)}}`;\n\t}\n}","import StackTrace from '../StackTrace';\nimport Expr0 from './Expr0';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport Nameable from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\n\ninterface VariableArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\ttype: ObjectType;\n\tname: string;\n\tisParam: boolean;\n\tguess?: string;\n}\n\nexport default class Variable extends Expr0 implements Nameable {\n\t\n\tpublic readonly isParam: boolean;\n\tpublic readonly guess: string;\n\tpublic readonly type: ObjectType;\n\tpublic readonly name: string;\n\n\tconstructor ({doc, tex, type, name, isParam, guess}: VariableArgumentType, trace: StackTrace) {\n\t\tsuper(trace, doc, tex, type);\n\n\t\tthis.isParam = !!isParam;\n\t\tthis.guess = guess || null;\n\n\t\tif (typeof name != 'string')\n\t\t\tthrow Node.error('Assertion failed', trace);\n\n\t\tthis.name = name;\n\t}\n\n\tpublic isProved(hyps) {\n\t\thyps = hyps || [];\n\t\n\t\treturn super.isProved(hyps);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn map.get(this) || this;\n\t}\n\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\treturn this;\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.ZERO;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr): boolean {\n\t\treturn false;\n\t}\n\n\t// pr f\n\tpublic toSimpleString() {\n\t\treturn this.type.toSimpleString() + ' ' + this.name;\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn `${root ? this.type + ' ' : ''}${this.name}<${this._id}>`;\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar id = this.isParam ? `id-${this._id}` : `def-${this.name}`;\n\n\t\tvar tex = this.tex\n\t\t\t|| (\n\t\t\t\tthis.name.length == 1\n\t\t\t\t\t? Node.escapeTeX(this.name)\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.name)}}`\n\t\t\t);\n\t\t\n\t\treturn `\\\\href{#${id}}{${tex}}`;\n\t}\n\n\tpublic toTeXStringWithId(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.isParam) throw Error('wut');\n\n\t\tvar id =`id-${this._id}`;\n\n\t\treturn [\n\t\t\t`\\\\htmlId{${id}}{`,\n\t\t\tthis.toTeXString(prec, root),\n\t\t\t`}`\n\t\t].join('');\n\t}\n}","import StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Expr0 from './Expr0';\nimport Fun from './Fun';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport { isNameable } from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectFun from './ObjectFun';\nimport ObjectType from './ObjectType';\nimport Schema from './Schema';\nimport Variable from './Variable';\n\ninterface FuncallArgumentType {\n\tfun: Metaexpr;\n\tunseal: boolean;\n\targs: Expr0[];\n}\n\nexport default class Funcall extends Expr0 {\n\t\n\tpublic readonly fun: Metaexpr;\n\tpublic readonly unseal: boolean;\n\tpublic readonly args: Expr0[];\n\n\tconstructor ({fun, unseal, args}: FuncallArgumentType, trace: StackTrace) {\n\t\tif (fun.type.isSimple) {\n\t\t\tvar name = isNameable(fun) ? fun.name : '<anonymous>';\n\t\t\tthrow Node.error(`${name} is not callable`, trace);\n\t\t}\n\n\t\tif (!(args instanceof Array) || args.map(e => e instanceof Node).some(e => !e))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t\t \n\t\tvar resolvedType = fun.type.resolve() as ObjectType | MetaType,\n\t\t\tparamTypes = resolvedType.from,\n\t\t\targTypes = args.map(e => e.type);\n\n\t\tif (paramTypes.length != argTypes.length)\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(argTypes[i])) {\n\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t}\n\t\t}\n\n\t\tsuper(trace, null, null, resolvedType.to);\n\t\t\n\t\tthis.fun = fun;\n\t\tthis.unseal = unseal;\n\t\tthis.args = args;\n\t}\n\n\tpublic isProved(hyps?) {\n\t\thyps = hyps || [];\n\t\n\t\treturn super.isProved(hyps) || this.fun.isProved(hyps);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn new Funcall({\n\t\t\tfun: this.fun.substitute(map),\n\t\t\tunseal: this.unseal,\n\t\t\targs: this.args.map(arg => arg.substitute(map))\n\t\t}, this.trace);\n\t}\n\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\tvar fun = this.fun.expandMeta(andFuncalls),\n\t\t\tunseal = this.unseal,\n\t\t\targs = this.args.map(arg => arg.expandMeta(andFuncalls));\n\t\t\n\t\tif (!(fun instanceof Fun) || !fun.expr || fun.name && !(fun instanceof Schema))\n\t\t\treturn new Funcall({fun, unseal, args}, this.trace);\n\n\t\treturn fun.call(args).expandMeta(andFuncalls);\n\t}\n\n\tpublic isExpandable(): boolean {\n\t\tvar callee: Metaexpr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\treturn callee.isExpandable();\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) return false;\n\n\t\treturn callee.expr && !(callee.sealed && !this.unseal);\n\t}\n\t\n\tpublic expandOnce(): Metaexpr {\n\t\tif (!this.isExpandable()) {\n\t\t\tthrow Error('Cannot expand');\n\t\t}\n\n\t\tvar callee: Metaexpr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\treturn new Funcall({\n\t\t\t\tfun: callee.expandOnce(),\n\t\t\t\tunseal: this.unseal,\n\t\t\t\targs: this.args\n\t\t\t}, this.trace);\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\treturn callee.call(this.args);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.THREE;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr): boolean {\n\t\tif (!(obj instanceof Funcall)) {\n\t\t\tif (!this.isExpandable()) return false;\n\n\t\t\treturn this.expandOnce().equals(obj);\n\t\t}\n\n\t\tif (this.fun.equals(obj.fun)) {\n\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\tif (!this.args[i].equals(obj.args[i])) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.fun instanceof Funcall && this.fun.isExpandable()) {\n\t\t\treturn this.expandOnce().equals(obj);\n\t\t}\n\n\t\tif (obj.fun instanceof Funcall && obj.fun.isExpandable()) {\n\t\t\treturn this.equals(obj.expandOnce());\n\t\t}\n\n\t\tvar thisIsExpandable = this.isExpandable(),\n\t\t\tobjIsExpandable = obj.isExpandable();\n\t\t\n\t\tif (this.fun == obj.fun || !thisIsExpandable && !objIsExpandable) {\n\t\t\tif (this.fun != obj.fun) return false;\n\n\t\t\tif (!thisIsExpandable && !objIsExpandable) {\n\t\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\t\tif (!this.args[i].equals(obj.args[i])) return false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (this.args.every((_, i) => {\n\t\t\t\treturn this.args[i].equals(obj.args[i]);\n\t\t\t})) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (thisIsExpandable) {\n\t\t\treturn this.expandOnce().equals(obj);\n\t\t}\n\n\t\treturn this.equals(obj.expandOnce());\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar args: any = this.args.map(arg => {\n\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (args.join('').length <= 50) {\n\t\t\targs = this.args.map(arg => {\n\t\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\targs = args.join(', ');\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn `${this.fun.name || `(${this.fun})`}(${args})`;\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t!(this.fun instanceof Fun) || !this.fun.name\n\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t: this.fun.name,\n\t\t\t\t\t`(${args})`\n\t\t\t\t].join('');\n\t\t\t}\n\t\t} else {\n\t\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn [\n\t\t\t\t\tthis.fun.name || `(${this.fun.toIndentedString(indent)})`,\n\t\t\t\t\t'(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t(\n\t\t\t\t\t\t!(this.fun instanceof Fun) || !('name' in this.fun && this.fun.name)\n\t\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t\t: this.fun.name\n\t\t\t\t\t) + '(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (this.fun instanceof Schema) {\n\t\t\treturn (\n\t\t\t\tthis.fun.name\n\t\t\t\t\t? `\\\\href{#schema-${this.fun.isProved() ? 'p' : 'np'}-${this.fun.name}}{\\\\textsf{${Node.escapeTeX(this.fun.name)}}}`\n\t\t\t\t\t: this.fun.toTeXString(false)\n\t\t\t) + `\\\\mathord{\\\\left(${this.args.map(arg => {\n\t\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\n\t\t\t}).join(', ')}\\\\right)}`;\n\t\t}\n\n\t\tif (this.fun instanceof ObjectFun)\n\t\t\treturn this.fun.funcallToTeXString(this.args, prec);\n\t\t\n\t\tvar args = this.args.map(arg => {\n\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\n\t\t});\n\n\t\treturn (\n\t\t\t!(isNameable(this.fun) && this.fun.name) || this.fun instanceof Variable\n\t\t\t\t? this.fun.toTeXString(false)\n\t\t\t\t: this.fun.name.length == 1\n\t\t\t\t\t? Node.escapeTeX(this.fun.name)\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.fun.name)}}`\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}","import StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Fun from \"./Fun\";\nimport Metaexpr from \"./Metaexpr\";\nimport Node, { Precedence } from \"./Node\";\nimport ObjectType from \"./ObjectType\";\nimport Type from \"./Type\";\nimport Variable from \"./Variable\";\n\ninterface ObjectFunArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\tannotations: string[];\n\tsealed: boolean;\n\ttype?: Type;\n\tname?: string;\n\tparams: Variable[];\n\texpr?: Expr0;\n}\n\nexport default class ObjectFun extends Fun {\n\t\n\tconstructor ({doc, tex, annotations, sealed, type, name, params, expr}: ObjectFunArgumentType, trace: StackTrace) {\n\t\tsuper({doc, tex, annotations, sealed, type, name, params, expr}, trace);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 최상단에만 선언되므로 치환되어야 할 것을 포함하지 않으므로 확인하지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new ObjectFun({\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new ObjectFun({\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (this.name) return this.name;\n\t\t\n\t\treturn [\n\t\t\t`ƒ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\n\t\tif (!root)\n\t\t\treturn `\\\\href{#def-${this.name}}\\\\mathrm{${Node.escapeTeX(this.name)}}`;\n\t\n\t\tif (!this.expr)\n\t\t\treturn this.funcallToTeXString(this.params, prec);\n\t\n\t\treturn this.funcallToTeXString(this.params, Node.PREC_COLONEQQ)\n\t\t\t\t+ `\\\\coloneqq ${this.expr.toTeXString(Node.PREC_COLONEQQ)}`;\n\t}\n\n\tpublic funcallToTeXString(args, prec) {\n\t\targs = args.map(arg => {\n\t\t\treturn arg.toTeXString(this.tex ? this.precedence : Node.PREC_COMMA);\n\t\t});\n\t\n\t\tif (this.tex) {\n\t\t\treturn this.makeTeX('def-' + this.name, args, prec);\n\t\t}\n\t\n\t\treturn (\n\t\t\t!this.name\n\t\t\t\t? this.toTeXString(false)\n\t\t\t\t: `\\\\href{#def-${this.name}}{${this.name.length == 1 ? Node.escapeTeX(this.name) : `\\\\mathrm{${Node.escapeTeX(this.name)}}`}}`\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}","import Metaexpr from \"./Metaexpr\";\n\nexport default abstract class Expr0 extends Metaexpr {\n\t\n}","import Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Type from './Type';\n\ninterface SimpleMetaTypeArgumentType {\n\tfunctional: false;\n\tleft: Type[];\n\tright: Type;\n}\n\ninterface FunctionalMetaTypeArgumentType {\n\tfunctional: true;\n\tfrom: ObjectType[];\n\tto: MetaType;\n}\n\ntype MetaTypeArgumentType = SimpleMetaTypeArgumentType | FunctionalMetaTypeArgumentType;\n\nexport default class MetaType extends Type {\n\t\n\tpublic readonly left: Type[];\n\tpublic readonly right: Type;\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: MetaType;\n\n\tconstructor (o: MetaTypeArgumentType) {\n\t\tsuper(null, null, null, o.functional);\n\n\t\tif (typeof o.functional != 'boolean')\n\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\n\n\t\tif (o.functional == false) {\n\t\t\tif (!(o.left instanceof Array))\n\t\t\t\tthrow Node.error('left should be an array', null);\n\n\t\t\tthis.left = o.left;\n\t\t\tthis.right = o.right;\n\t\t} else {\n\t\t\tif (o.from.some(f => !(f instanceof ObjectType)))\n\t\t\t\tthrow Node.error('o.from.some(f => !(f instanceof ObjectType))', null);\n\t\t\tif (!(o.to instanceof MetaType))\n\t\t\t\tthrow Node.error('!(o.to instanceof MetaType)', null);\n\n\t\t\tif (o.to.isFunctional)\n\t\t\t\tthrow Node.error('Functional metatype in functional metatype is not supported', null);\n\n\t\t\tthis.from = o.from;\n\t\t\tthis.to = o.to;\n\t\t}\n\t}\n\n\tpublic resolve(): MetaType {\n\t\treturn this;\n\t}\n\n\tpublic toIndentedString(indent: number) {\n\t\tif (this.isSimple) return `[${this.left.join(', ')} |- ${this.right}]`;\n\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tpublic equals(t: Type): boolean {\n\t\tif (!(t instanceof MetaType)) return false;\n\n\t\tif (this.isSimple != t.isSimple) return false;\n\n\t\tif (this.isSimple) {\n\t\t\tif (this.left.length != t.left.length) return false;\n\n\t\t\tfor (let i = 0; i < this.left.length; i++) {\n\t\t\t\tif (!this.left[i].equals(t.left[i])) return false;\n\t\t\t}\n\n\t\t\tif (!this.right.equals(t.right)) return false;\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.from.length != t.from.length) return false;\n\n\t\tfor (let i = 0; i < this.from.length; i++)\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\n\n\t\treturn this.to.equals(t.to);\n\t}\n}","import Fun from \"./Fun\";\n\nexport default class Schema extends Fun {\n\n\tpublic readonly axiomatic: boolean;\n\tpublic readonly using: ObjectFun[];\n\tpublic readonly def$s: $Variable[];\n\tprivate _isProvedCache: boolean;\n\n\tconstructor ({doc, tex, annotations, axiomatic, name, params, using, def$s, expr}: SchemaArgumentType, trace: StackTrace) {\n\t\tsuper({doc, tex, annotations, sealed: false, type: null, name, params, expr}, trace);\n\t\t\n\t\tthis.axiomatic = axiomatic;\n\t\tthis.using = using;\n\t\tthis.def$s = def$s || [];\n\t}\n\t\n\tpublic isProved(hyps?) {\n\t\tif (this._isProvedCache) return true;\n\n\t\tif (!hyps && typeof this._isProvedCache == 'boolean') {\n\t\t\treturn this._isProvedCache;\n\t\t}\n\n\t\tvar cache = !hyps;\n\t\thyps = hyps || [];\n\t\t\n\t\tvar ret = this.axiomatic || super.isProved(hyps);\n\t\tif (cache) this._isProvedCache = ret;\n\t\treturn ret;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 최상단에만 선언되므로 치환되어야 할 것을 포함하지 않으므로 확인하지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new Schema({\n\t\t\tannotations: this.annotations,\n\t\t\taxiomatic: this.axiomatic,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tusing: this.using,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new Schema({\n\t\t\tannotations: this.annotations,\n\t\t\taxiomatic: this.axiomatic,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tusing: this.using,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn [\n\t\t\t`∫ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.expandMeta(true).toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\t\t\n\t\tvar id = `schema-${this.isProved() ? 'p' : 'np'}-${this.name}`;\n\t\n\t\tif (!root)\n\t\t\treturn `\\\\href{#${id}}\\\\mathsf{${Node.escapeTeX(this.name)}}`;\n\t\n\t\treturn `\\\\href{#${id}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}\\\\mathord{\\\\left(${this.params.map(e => e.toTeXStringWithId(Node.PREC_COMMA) + (e.guess ? `: \\\\texttt{@${e.guess}}` : '')).join(', ')}\\\\right)}:\\\\\\\\\\\\quad`\n\t\t\t\t+ this.expr.expandMeta(true).toTeXString(true);\n\t}\n}\n\nimport $Variable from \"./$Variable\";\nimport Expr0 from \"./Expr0\";\nimport Metaexpr from \"./Metaexpr\";\nimport Node, { Precedence } from \"./Node\";\nimport ObjectType from \"./ObjectType\";\nimport Variable from \"./Variable\";\nimport ObjectFun from \"./ObjectFun\";\nimport StackTrace from \"../StackTrace\";\n\ninterface SchemaArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\tannotations: string[];\n\taxiomatic: boolean;\n\tname?: string;\n\tparams: Variable[];\n\tusing: ObjectFun[];\n\tdef$s: $Variable[];\n\texpr: Metaexpr;\n}","import StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Expr0 from './Expr0';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Variable from './Variable';\n\ninterface TeeArgumentType {\n\tleft: Metaexpr[];\n\tdef$s?: $Variable[];\n\tright: Metaexpr;\n}\n\nexport default class Tee extends Metaexpr {\n\n\tpublic readonly left;\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly right;\n\n\tconstructor ({left, def$s, right}: TeeArgumentType, trace: StackTrace) {\n\t\tif (!(left instanceof Array\n\t\t\t\t&& left.every(l => {\n\t\t\t\t\treturn l.type instanceof ObjectType\n\t\t\t\t\t\t|| l.type instanceof MetaType;\n\t\t\t\t}))) {\n\t\t\tconsole.log(left);\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tif (def$s && !(def$s instanceof Array && def$s.every($ => $ instanceof $Variable)))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\n\t\tif (!(right.type instanceof ObjectType || right.type instanceof MetaType)) {\n\t\t\tconsole.log(right);\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tif (right.type.isFunctional) {\n\t\t\tthrow Node.error('RHS of a rule cannot be a schema', trace);\n\t\t}\n\n\t\tsuper(trace, null, null, new MetaType({\n\t\t\tfunctional: false,\n\t\t\tleft: left.map(e => e.type),\n\t\t\tright: right.type\n\t\t}));\n\n\t\tthis.left = left;\n\t\tthis.def$s = def$s || [];\n\t\tthis.right = right;\n\t\tthis.precedence = Node.PREC_COMMA;\n\t}\n\n\tpublic isProved(hyps?) {\n\t\thyps = hyps || [];\n\t\n\t\treturn super.isProved(hyps) || this.right.isProved(hyps.concat(this.left));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tvar left = this.left.map(e => e.substitute(map));\n\t\tvar right = this.right.substitute(map);\n\n\t\treturn new Tee({\n\t\t\tleft, right\n\t\t}, this.trace);\n\t}\n\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\tvar left = this.left.map(lef => lef.expandMeta(andFuncalls));\n\t\tvar right = this.right.expandMeta(andFuncalls);\n\n\t\treturn new Tee({left, right}, this.trace);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.TWO;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr): boolean {\n\t\tif (!(obj instanceof Tee)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tif (this.left.length != obj.left.length) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tfor (var i = 0; i < this.left.length; i++) {\n\t\t\tif (!this.left[i].equals(obj.left[i])) return false;\n\t\t}\n\n\t\treturn this.right.equals(obj.right);\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (!this.left.length) {\n\t\t\treturn '|- ' + this.right.toIndentedString(indent);\n\t\t}\n\t\n\t\treturn [\n\t\t\t'\\t' + this.left.map(e => e.toIndentedString(indent + 1)).join(',\\n' + '\\t'.repeat(indent + 1)),\n\t\t\t'|-',\n\t\t\t'\\t' + this.right.toIndentedString(indent + 1)\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar expanded = this.expandMeta(true) as Tee;\n\n\t\treturn [\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\t\t\t`{${expanded.left.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')} \\\\vdash ${expanded.right.toTeXString(Node.PREC_COMMA)}}`,\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t].join('');\n\t}\n}","import StackTrace from \"../StackTrace\";\nimport Node from \"./Node\";\n\nexport default abstract class Type extends Node {\n\tpublic readonly isFunctional: boolean;\n\tpublic readonly isSimple: boolean;\n\t\n\tpublic abstract equals(t: Type): boolean;\n\n\tconstructor (trace: StackTrace, doc: string, tex: string, isFunctional: boolean) {\n\t\tsuper(trace, doc, tex);\n\t\tthis.isFunctional = isFunctional;\n\t\tthis.isSimple = !isFunctional;\n\t}\n\n\tpublic abstract resolve(): Type;\n}","export default interface Nameable {\n\tname: string;\n}\n\nexport function isNameable(obj: object): obj is Nameable {\n\treturn 'name' in obj;\n}","import StackTrace from '../StackTrace';\nimport Expr0 from './Expr0';\nimport Fun from './Fun';\nimport Funcall from './Funcall';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Tee from './Tee';\nimport Variable from './Variable';\n\ninterface ReductionArgumentType {\n\tsubject: Metaexpr;\n\tguesses: Expr0[];\n\tleftargs: Metaexpr[];\n\texpected: Metaexpr;\n}\n\nexport default class Reduction extends Metaexpr {\n\t\n\tpublic readonly subject: Metaexpr;\n\tpublic readonly guesses: Expr0[];\n\tpublic readonly leftargs: Metaexpr[];\n\tpublic readonly reduced: Metaexpr;\n\n\tconstructor ({subject, guesses, leftargs, expected}: ReductionArgumentType, trace: StackTrace) {\n\t\tif (guesses) {\n\t\t\tlet resolvedType = subject.type.resolve() as ObjectType | MetaType,\n\t\t\t\tparamTypes = resolvedType.from,\n\t\t\t\targTypes = guesses.map(e => e && e.type);\n\n\t\t\tif (paramTypes.length != argTypes.length)\n\t\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\t\tif (argTypes[i] && !paramTypes[i].equals(argTypes[i])) {\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (subject instanceof Fun) {\n\t\t\tsubject.params.forEach((p, i) => {\n\t\t\t\tif (!(guesses && guesses[i]) && !p.guess) {\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} could not be guessed`, trace);\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tvar derefs = subject.params.map((p, i) => {\n\t\t\t\tif (guesses && guesses[i]) return guesses[i];\n\n\t\t\t\tvar tee = (subject as Fun).expr.expandMeta(false) as Tee;\n\t\n\t\t\t\treturn Reduction.query(\n\t\t\t\t\tp.guess,\n\t\t\t\t\ttee.left,\n\t\t\t\t\tleftargs,\n\t\t\t\t\ttee.right,\n\t\t\t\t\texpected,\n\t\t\t\t\ttrace\n\t\t\t\t);\n\t\t\t});\n\t\n\t\t\tsubject = new Funcall({\n\t\t\t\tfun: subject,\n\t\t\t\tunseal: false,\n\t\t\t\targs: derefs,\n\t\t\t}, trace);\n\t\t} else if (guesses) {\n\t\t\tthrow Node.error('Something\\'s wrong', trace);\n\t\t}\n\t\n\t\tif (!(subject.type instanceof MetaType && subject.type.isSimple))\n\t\t\tthrow Node.error('Subject is not reducible', trace);\n\t\n\t\tif (!(leftargs instanceof Array)\n\t\t\t\t|| leftargs.map(e => e instanceof Node).some(e => !e))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\n\t\tvar paramTypes = subject.type.left,\n\t\t\tleftargTypes = leftargs.map(e => e.type);\n\n\t\tif (paramTypes.length != leftargTypes.length)\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${leftargTypes.length}`, trace);\n\n\t\tfor (let i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(leftargTypes[i]))\n\t\t\t\tthrow Node.error(`Illegal argument type (expected ${paramTypes[i]}): ${leftargTypes[i]}`, trace);\n\t\t}\n\n\t\tsuper(trace, null, null, subject.type.right);\n\n\t\tthis.subject = subject;\n\t\tthis.leftargs = leftargs;\n\n\t\tvar tee = subject.expandMeta(true);\n\n\t\tif (!(tee instanceof Tee)) {\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tvar leftargsExpanded = leftargs.map(arg => {\n\t\t\treturn arg.expandMeta(true);\n\t\t});\n\n\t\tfor (let i = 0; i < tee.left.length; i++) {\n\t\t\tif (!tee.left[i].equals(leftargsExpanded[i])) {\n\t\t\t\tthrow Node.error(`LHS #${i + 1} failed to match:\n\n--- EXPECTED ---\n${tee.left[i].expandMeta(true)}\n----------------\n\n--- RECEIVED ---\n${leftargs[i].expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\t\t}\n\n\t\tif (expected) {\n\t\t\tif (!tee.right.equals(expected)) {\n\t\t\t\tthrow Node.error(`RHS failed to match:\n\n--- EXPECTED ---\n${tee.right.expandMeta(true)}\n----------------\n\n--- RECEIVED ---\n${expected.expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\n\t\t\tthis.reduced = expected;\n\t\t} else {\n\t\t\tthis.reduced = tee.right;\n\t\t}\n\t}\n\n\tpublic isProved(hyps?): boolean {\n\t\thyps = hyps || [];\n\t\t\n\t\treturn super.isProved(hyps)\n\t\t\t|| this.subject.isProved(hyps)\n\t\t\t\t&& this.leftargs.every(l => l.isProved(hyps));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn this.reduced.substitute(map);\n\t}\n\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\treturn this.reduced.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FOUR;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr): boolean {\n\t\treturn this.reduced.equals(obj);\n\t}\n\n\tpublic static query(guess: string, left, leftargs, right, expected, trace: StackTrace) {\n\t\tif (guess.length == 0) throw Node.error('wut', trace);\n\n\t\tvar lef, ret;\n\n\t\tif (guess[0] == 'r') {\n\t\t\tif (!expected) {\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, trace);\n\t\t\t}\n\n\t\t\tlef = right;\n\t\t\tret = expected;\n\t\t} else {\n\t\t\tvar n = Number(guess[0]);\n\t\t\tif (!(1 <= n && n <= leftargs.length))\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent index out of range`, trace);\n\n\t\t\tlef = left[n - 1];\n\t\t\tret = leftargs[n - 1];\n\t\t}\n\n\t\treturn (function recurse(guess: string, lef: Metaexpr, node: Metaexpr, ptr: number) {\n\t\t\tnode = node.expandMeta(true);\n\t\t\t\n\t\t\tif (guess.length <= ptr) return node;\n\n\t\t\tif (/[0-9]/.test(guess[ptr])) {\n\t\t\t\tvar n = Number(guess[ptr]);\n\n\t\t\t\tif (lef instanceof Tee && node instanceof Tee) {\n\t\t\t\t\tif (lef.left.length != node.left.length) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent length mismatch`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(1 <= n && n <= node.left.length)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent index out of range`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn recurse(guess, lef.left[n - 1], node.left[n - 1], ptr + 1);\n\t\t\t\t}\n\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(lef instanceof Funcall) || !(node instanceof Funcall)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lef.fun.equals(node.fun)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!node.isExpandable()) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tnode = node.expandOnce();\n\t\t\t\t}\n\n\t\t\t\tif (!node.args || !(1 <= n && n <= node.args.length))\n\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, trace);\n\n\t\t\t\treturn recurse(guess, lef.args[n - 1], node.args[n - 1], ptr + 1);\n\t\t\t} else if (guess[ptr] == 'r') {\n\t\t\t\tif (lef instanceof Tee && node instanceof Tee) {\n\t\t\t\t\treturn recurse(guess, lef.right, node.right, ptr + 1);\n\t\t\t\t}\n\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, trace);\n\t\t\t}\n\n\t\t\tthrow Node.error(`Cannot dereference @${guess}`, trace);\n\t\t})(guess, lef, ret, 1);\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar leftargs: any = this.leftargs.map(arg => {\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (leftargs.join('').length <= 50) {\n\t\t\tleftargs = this.leftargs.map(arg => {\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\tleftargs = leftargs.join(', ');\n\t\n\t\t\treturn [\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t\tleftargs,\n\t\t\t\t']'\n\t\t\t].join('');\n\t\t}\n\t\telse {\n\t\t\tleftargs = leftargs.join(',\\n' + '\\t'.repeat(indent + 1));\n\t\n\t\t\treturn [\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t\t'\\t' + leftargs,\n\t\t\t\t']'\n\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t}\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `${this.subject.toTeXString(false)}[${this.leftargs.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}]`;\n\t}\n}","var grammar;\n\nif (process.env.__webpack__) {\n\tgrammar = require('raw-loader!./grammar.pegjs').default;\n} else {\n\tvar fs = require('fs');\n\tvar path = require('path');\n\n\tgrammar = fs.readFileSync(path.join(__dirname, 'grammar.pegjs'), 'utf-8');\n}\n\nvar Program = require('./Program').default;\n\nmodule.exports = {grammar, Program};","export default \"start =\\n\\t_ lines:(a:line _ {return a})* {return lines}\\n\\nline =\\n\\timport\\n\\t/ typedef\\n\\t/ defv\\n\\t/ defun\\n\\t/ defschema\\n\\nevaluable =\\n\\t_ e:evaluable_internal _ {return e}\\n\\nevaluable_internal =\\n\\ttypedef\\n\\t/ defv\\n\\t/ defun\\n\\t/ defschema\\n\\t/ metaexpr\\n\\nimport =\\n\\t'import' __\\n\\tfilename:ident _\\n\\tsem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'import',\\n\\t\\t\\tfilename,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ntypedef =\\n\\tdoc:(documentation __)?\\n\\tbase:(\\\"base\\\" __)?\\n\\t\\\"type\\\" __\\n\\torigin:(o:ftype __ {return o})?\\n\\tname:ident _ sem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'typedef',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\tbase: !!base,\\n\\t\\t\\torigin,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefv =\\n\\tdoc:(documentation __)? tex:(tex __)? type:type __ name:ident _ sem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: false,\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefparam =\\n\\ttex:(tex __)? type:type __ name:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: true,\\n\\t\\t\\tdoc: null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefschemaparam =\\n\\ttex:(tex __)? type:type __ name:ident\\n\\tguess:(_ ':' _ '@' g:$[a-z0-9_]+ {return g})?\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: true,\\n\\t\\t\\tdoc: null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\tguess,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n \\ndefun =\\n\\tdoc:(documentation __)?\\n\\ttex:(tex __)?\\n\\tsealed:('sealed' __)?\\n\\trettype:type __\\n\\tname:ident _\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\texpr:(\\n\\t\\t\\\"{\\\" _\\n\\t\\texpr:expr0 _\\n\\t\\t\\\"}\\\"\\n\\t\\t{return expr}\\n\\t\\t/ sem {return null}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defun',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\tsealed: !!sealed,\\n\\t\\t\\trettype,\\n\\t\\t\\tname,\\n\\t\\t\\tparams,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefschema =\\n\\tdoc:(documentation __)?\\n\\tannotations: (a:annotation __ {return a})*\\n\\taxiomatic:(\\\"axiomatic\\\" __)?\\n\\t\\\"schema\\\" __\\n\\tname:ident _\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defschemaparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defschemaparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\tusing:(\\n\\t\\t'using' __\\n\\t\\tx:(\\n\\t\\t\\thead:ident _\\n\\t\\t\\ttail:(',' _ n:ident _ {return n})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)\\n\\t\\t{return x}\\n\\t)?\\n\\t\\\"{\\\" _\\n\\tdefdollars: (d:defdollar _ {return d})* _\\n\\texpr:metaexpr _\\n\\t\\\"}\\\"\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defschema',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\tannotations,\\n\\t\\t\\taxiomatic: !!axiomatic,\\n\\t\\t\\tname,\\n\\t\\t\\tparams,\\n\\t\\t\\tusing: using || [],\\n\\t\\t\\tdef$s: defdollars,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// var[...]\\n// foo(...)[...]\\n// foo[...][...]\\n// (metaexpr)[...]\\n// schema(?, ...)[...]\\nreduction =\\n\\tsubject:(\\n\\t\\tschemacall\\n\\t\\t/ var\\n\\t\\t/ \\\"(\\\" _\\n\\t\\te:metaexpr _\\n\\t\\t\\\")\\\"\\n\\t\\t{return e}\\n\\t) _\\n\\tguesses:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:('?' {return null} / expr0) _\\n\\t\\t\\ttail:(\\\",\\\" _ e:('?' {return null} / expr0) _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)?\\n\\tleftargs:(\\n\\t\\t\\\"[\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:metaexpr _\\n\\t\\t\\ttail:(\\\";\\\" _ e:metaexpr _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\"]\\\"\\n\\t\\tb:(\\n\\t\\t\\t_ '[' _\\n\\t\\t\\t'as' __\\n\\t\\t\\tm:metaexpr\\n\\t\\t\\t']'\\n\\t\\t\\t{return m}\\n\\t\\t)?\\n\\t\\t{return {a: a || [], b: b || null}}\\n\\t)+\\n\\t{\\n\\t\\tvar ret = {\\n\\t\\t\\t_type: 'reduction',\\n\\t\\t\\tsubject,\\n\\t\\t\\tguesses,\\n\\t\\t\\tleftargs: leftargs[0].a,\\n\\t\\t\\texpected: leftargs[0].b,\\n\\t\\t\\tlocation: location()\\n\\t\\t};\\n\\n\\t\\tfor (var i = 1; i < leftargs.length; i++) {\\n\\t\\t\\tret = {\\n\\t\\t\\t\\t_type: 'reduction',\\n\\t\\t\\t\\tsubject: ret,\\n\\t\\t\\t\\tguesses: null,\\n\\t\\t\\t\\tleftargs: leftargs[i].a,\\n\\t\\t\\t\\texpected: leftargs[i].b,\\n\\t\\t\\t\\tlocation: location()\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t}\\n\\n// var(...)\\n// (metaexpr)(...)\\nschemacall =\\n\\tschemaAndUnseal:(\\n\\t\\tschema:var\\n\\t\\tunseal:(_ '+')?\\n\\t\\t{return {schema, unseal: !!unseal}}\\n\\t\\t/ \\\"(\\\" _ schema:metaexpr _ \\\")\\\"\\n\\t\\t{return {schema, unseal: false}}\\n\\t) _\\n\\targs:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:expr0 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'schemacall',\\n\\t\\t\\tschema: schemaAndUnseal.schema,\\n\\t\\t\\tunseal: schemaAndUnseal.unseal,\\n\\t\\t\\targs,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// forall(f, g)\\n// (expr0)(f, g)\\nfuncall =\\n\\tschemaAndUnseal:(\\n\\t\\tschema:var\\n\\t\\tunseal:(_ '+')?\\n\\t\\t{return {schema, unseal: !!unseal}}\\n\\t\\t/ \\\"(\\\" _ schema:expr0 _ \\\")\\\"\\n\\t\\t{return {schema, unseal: false}}\\n\\t) _\\n\\targs:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:expr0 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'funcall',\\n\\t\\t\\tschema: schemaAndUnseal.schema,\\n\\t\\t\\tunseal: schemaAndUnseal.unseal,\\n\\t\\t\\targs,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// (T t) => expr0\\n// (T t) => { expr0 }\\nfunexpr =\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\t\\\"=>\\\" _\\n\\texpr:(\\n\\t\\texpr0\\n\\t\\t/ \\\"{\\\" _ e:expr0 _ \\\"}\\\" {return e}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'funexpr',\\n\\t\\t\\tparams,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// (T t) => metaexpr_internal_1\\n// (T t) => { $foo = ...; metaexpr }\\nschemaexpr =\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\t\\\"=>\\\" _\\n\\tfoo:(\\n\\t\\texpr:metaexpr_internal_1\\n\\t\\t{return {defdollars: [], expr}}\\n\\t\\t/ \\\"{\\\" _\\n\\t\\tdefdollars: (d:defdollar _ {return d})* _\\n\\t\\texpr:metaexpr _\\n\\t\\t\\\"}\\\"\\n\\t\\t{return {defdollars, expr}}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'schemaexpr',\\n\\t\\t\\tparams,\\n\\t\\t\\tdef$s: foo.defdollars,\\n\\t\\t\\texpr: foo.expr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nmetaexpr =\\n\\tleft:(\\n\\t\\tl:(\\n\\t\\t\\thead:metaexpr_internal_1 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:metaexpr_internal_1 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)? {return l || []}\\n\\t)\\n\\t\\\"|-\\\" _\\n\\tdefdollars: (d:defdollar _ {return d})* _\\n\\tright:metaexpr\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'tee',\\n\\t\\t\\tdef$s: defdollars,\\n\\t\\t\\tleft,\\n\\t\\t\\tright,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\t/ metaexpr_internal_1\\n\\n/*\\n * 다음이 성립하여야 한다.\\n *\\n * - reduction이 schemacall보다 앞이다.\\n * - schemacall이 var보다 앞이다.\\n *\\n */\\nmetaexpr_internal_1 =\\n\\treduction\\n\\t/ schemacall\\n\\t/ var\\n\\t/ schemaexpr\\n\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\" {return e}\\n\\nexpr0 =\\n\\tfuncall\\n\\t/ funexpr\\n\\t/ var\\n\\t/ \\\"(\\\" _ e:expr0 _ \\\")\\\" {return e}\\n\\ndefdollar =\\n\\tname:dollar_ident _\\n\\t'=' _\\n\\texpr:metaexpr _\\n\\tsem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'def$',\\n\\t\\t\\tname,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t};\\n\\t}\\n\\ntype =\\n\\tstype\\n\\t/ ftype\\n\\nstype =\\n\\tname:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'type',\\n\\t\\t\\tftype: false,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nftype =\\n\\t\\\"[\\\" _\\n\\tfrom:(\\n\\t\\ttype:type {return [type]}\\n\\t\\t/ (\\n\\t\\t\\ttt:(\\n\\t\\t\\t\\t\\\"(\\\" _\\n\\t\\t\\t\\thead: type\\n\\t\\t\\t\\ttail:(_ \\\",\\\" _ t:type {return t})*\\n\\t\\t\\t\\t_ \\\")\\\"\\n\\t\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t\\t)\\n\\t\\t\\t{return tt}\\n\\t\\t)\\n\\t) _\\n\\t\\\"->\\\" _\\n\\tto:type _\\n\\t\\\"]\\\"\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'type',\\n\\t\\t\\tftype: true,\\n\\t\\t\\tfrom,\\n\\t\\t\\tto,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nvar =\\n\\tat_var\\n\\t/ dollar_var\\n\\t/ plain_var\\n\\nat_var =\\n\\tname:at_ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: '@',\\n\\t\\t\\tname: name.slice(1),\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndollar_var =\\n\\tname:dollar_ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: '$',\\n\\t\\t\\tname: name,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nplain_var =\\n\\tname:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: 'normal',\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nkeyword =\\n\\t'as'\\n\\t/ 'axiomatic'\\n\\t/ 'base'\\n\\t/ 'import'\\n\\t/ 'schema'\\n\\t/ 'sealed'\\n\\t/ 'type'\\n\\t/ 'using'\\n\\nannotation =\\n\\t'@discouraged'\\n\\t/ '@deprecated'\\n\\nident =\\n\\t$(!(keyword ![a-zA-Z0-9_]) [a-zA-Z0-9_]+)\\n\\nat_ident =\\n\\t$('@' [a-zA-Z0-9_]+)\\n\\ndollar_ident =\\n\\t$('$' [a-zA-Z0-9_]+)\\n\\ndocumentation =\\n\\t'\\\"' b:$(!'\\\"' a:. {return a})* '\\\"' {\\n\\t\\treturn b\\n\\t}\\n\\ntex =\\n\\t'$' b:$(!'$' a:. {return a})* '$' {\\n\\t\\treturn b\\n\\t}\\n\\ncomment =\\n\\t\\\"#\\\" (!newline .)*\\n\\t/ \\\"//\\\" (!newline .)*\\n\\t/ \\\"/*\\\" (!\\\"*/\\\" .)* \\\"*/\\\"\\n\\nnewline =\\n\\t\\\"\\\\r\\\\n\\\" / \\\"\\\\r\\\" / \\\"\\\\n\\\"\\n\\n// optional whitespace\\n_ =\\n\\t([ \\\\t\\\\n\\\\r] / comment)*\\n\\n// mandatory whitespace\\n__ =\\n\\t([ \\\\t\\\\n\\\\r] / comment)+\\n\\nsem =\\n\\t\\\";\\\"\";","import PegInterface from './PegInterface';\nimport { EvaluableObject, LineObject } from './PegInterfaceDefinitions';\nimport ProofExplorer from './ProofExplorer';\nimport Scope from './Scope';\n\nexport default class Program {\n\tpublic scope = new Scope(null);\n\tpublic readonly parser;\n\tpublic readonly scopeMap: Map<string, Scope> = new Map();\n\t\n\tconstructor (parser) {\n\t\tif (!parser) throw Error('no');\n\t\tthis.parser = parser;\n\t}\n\n\tpublic async loadModule(filename, loader): Promise<Scope> {\n\t\treturn this.scope = await this.loadModuleInternal(filename, loader);\n\t}\n\n\tprivate async loadModuleInternal(filename, loader): Promise<Scope> {\n\t\tif (this.scopeMap.has(filename)) {\n\t\t\treturn this.scopeMap.get(filename);\n\t\t}\n\n\t\tvar scope = new Scope(null);\n\n\t\tvar code = await loader(filename);\n\t\tvar parsed = this.parser.parse(code);\n\t\tawait this.feed(parsed, scope, loader);\n\n\t\tthis.scopeMap.set(filename, scope);\n\t\treturn scope;\n\t}\n\n\tpublic async feed(lines: LineObject[], scope: Scope=this.scope, loader) {\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tvar line = lines[i];\n\t\t\t\n\t\t\tswitch (line._type) {\n\t\t\t\tcase 'import':\n\t\t\t\t\tvar scope2 = await this.loadModuleInternal(line.filename, loader);\n\t\t\t\t\tscope.importMap.set(line.filename, scope2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'typedef':\n\t\t\t\t\tvar type = PegInterface.type(line, scope);\n\n\t\t\t\t\tif (scope.hasType(type.name)) {\n\t\t\t\t\t\tthrow scope.error(`Type ${type.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addType(type);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defv':\n\t\t\t\t\tvar variable = PegInterface.variable(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(variable.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${variable.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addVariable(variable);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defun':\n\t\t\t\t\tvar fun = PegInterface.fun(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(fun.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${fun.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addFun(fun);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defschema':\n\t\t\t\t\tvar schema = PegInterface.schema(line, scope);\n\n\t\t\t\t\tif (scope.hasSchema(schema.name)) {\n\t\t\t\t\t\tthrow scope.error(`Schema ${schema.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addSchema(schema);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic evaluate(line: EvaluableObject) {\n\t\tswitch (line._type) {\n\t\t\tcase 'typedef':\n\t\t\t\treturn PegInterface.type(line, this.scope);\n\t\t\tcase 'defv':\n\t\t\t\treturn PegInterface.variable(line, this.scope);\n\t\t\tcase 'defun':\n\t\t\t\treturn PegInterface.fun(line, this.scope);\n\t\t\tcase 'defschema':\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PegInterface.schema(line, this.scope);\n\t\t\tcase 'tee':\n\t\t\t\treturn PegInterface.tee(line, this.scope);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PegInterface.reduction(line, this.scope);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PegInterface.schemacall(line, this.scope);\n\t\t\tcase 'var':\n\t\t\t\treturn PegInterface.metavar(line, this.scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t}\n\t}\n\n\tpublic getProofExplorer(name: string, ktx) {\n\t\treturn ProofExplorer.get(this.scope, name, ktx);\n\t}\n}","/*\n * PEG.js의 출력과 적절한 클래스 사이를 잇는 인터페이스.\n * PEG.js의 출력은 여기에서만 처리해야 한다.\n */\n\nimport $Variable from './nodes/$Variable';\nimport Expr0 from './nodes/Expr0';\nimport Fun from './nodes/Fun';\nimport Funcall from './nodes/Funcall';\nimport Metaexpr from './nodes/Metaexpr';\nimport ObjectFun from './nodes/ObjectFun';\nimport ObjectType from './nodes/ObjectType';\nimport Reduction from './nodes/Reduction';\nimport Schema from './nodes/Schema';\nimport Tee from './nodes/Tee';\nimport Variable from './nodes/Variable';\nimport { Def$Object, DefschemaObject, DefunObject, DefvObject, Expr0Object, FuncallObject, FunexprObject, MetaexprObject, ReductionObject, SchemacallObject, SchemaexprObject, StypeObject, TeeObject, TypedefObject, TypeObject, VarObject } from './PegInterfaceDefinitions';\nimport Scope, { NestedTypeInput } from './Scope';\n\nfunction typeObjToString(obj: TypeObject): string {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) return (obj as StypeObject).name;\n\treturn '[' + obj.from.map(typeObjToString).join(', ') + ' -> '\n\t\t\t+ typeObjToString(obj.to) + ']';\n}\n\n/*\n * Scope#getType이나 Scope#hasType 등의 입력 형태로 바꾼다.\n * st\t\t\t\t\t\t-> 'st'\n * [cls -> st]\t\t\t\t-> ['cls', 'st']\n * [(cls, cls) -> st]\t\t-> ['cls', 'cls', 'st']\n * [[cls -> st] -> st]\t\t-> [['cls', 'st'], 'st']\n */\nfunction typeObjToNestedArr(obj: TypeObject): NestedTypeInput {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) {\n\t\tobj = obj as StypeObject;\n\n\t\tif (!obj.name)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.name;\n\t} else {\n\t\tif (!obj.from || !obj.to)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.from.map(typeObjToNestedArr).concat(\n\t\t\t[typeObjToNestedArr(obj.to)]\n\t\t);\n\t}\n}\n\nfunction varObjToString(obj: VarObject): string {\n\tswitch (obj.type) {\n\t\tcase '@':\n\t\t\treturn `@${obj.name}`;\n\t\tcase '$':\n\t\t\treturn `${obj.name}`;\n\t\tcase 'normal':\n\t\t\treturn `${obj.name}`;\n\t\tdefault:\n\t\t\tthrow Error(`Unknown type ${obj.type}`);\n\t}\n}\n\nexport default class PI {\n\tpublic static type(obj: TypedefObject, parentScope: Scope): ObjectType {\n\t\tif (obj._type != 'typedef')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope: Scope = parentScope.extend('type', obj.name, obj.location);\n\n\t\tvar origin: ObjectType = obj.origin ? scope.getType(typeObjToNestedArr(obj.origin)) : null;\n\n\t\tvar name: string = obj.name;\n\t\tvar doc: string = obj.doc;\n\t\tvar base: boolean = obj.base;\n\n\t\tif (base && origin) {\n\t\t\tthrow scope.error('Base type should not be an alias');\n\t\t}\n\n\t\tif (origin) {\n\t\t\treturn new ObjectType({\n\t\t\t\tname,\n\t\t\t\tdoc,\n\t\t\t\tbase,\n\t\t\t\torigin\n\t\t\t});\n\t\t}\n\n\t\treturn new ObjectType({\n\t\t\tfunctional: false,\n\t\t\tname,\n\t\t\tdoc,\n\t\t\tbase\n\t\t});\n\t}\n\n\tpublic static variable(obj: DefvObject | VarObject, parentScope: Scope): Variable | Fun {\n\t\tif (!['defv', 'var'].includes(obj._type)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tvar scope = parentScope.extend('variable', obj.name, obj.location);\n\n\t\tif (obj._type == 'var') {\n\t\t\tif (obj.type != 'normal') {\n\t\t\t\tthrow scope.error(`Variable type ${obj.type} not allowed`);\n\t\t\t}\n\n\t\t\tif (!scope.hasVariable(obj.name))\n\t\t\t\tthrow scope.error(`Undefined identifier ${obj.name}`);\n\t\t\treturn scope.getVariable(obj.name);\n\t\t}\n\n\t\tif (!scope.hasType(typeObjToNestedArr(obj.type)))\n\t\t\tthrow scope.error(`Type ${typeObjToString(obj.type)} is not defined`);\n\n\t\tvar type = scope.getType(typeObjToNestedArr(obj.type));\n\n\t\treturn new Variable({\n\t\t\ttype,\n\t\t\tisParam: !!obj.isParam,\n\t\t\tguess: obj.guess || null,\n\t\t\tname: obj.name,\n\t\t\tdoc: obj.doc,\n\t\t\ttex: obj.tex\n\t\t}, scope.trace);\n\t}\n\n\tpublic static fun(obj: DefunObject | FunexprObject, parentScope: Scope): ObjectFun {\n\t\tif (obj._type != 'defun' && obj._type != 'funexpr')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar name = null,\n\t\t\tdoc = null,\n\t\t\ttex = null,\n\t\t\tsealed = false;\n\n\t\tif (obj._type == 'defun') {\n\t\t\tobj = obj as DefunObject;\n\t\t\tname = obj.name;\n\t\t\tdoc = obj.doc;\n\t\t\ttex = obj.tex;\n\t\t\tsealed = obj.sealed;\n\t\t}\n\n\t\tvar scope = parentScope.extend('fun', name, obj.location);\n\n\t\tvar type = null;\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\n\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\n\t\t\treturn scope.addVariable(tv) as Variable;\n\t\t});\n\t\tvar expr = null;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'defun':\n\t\t\t\tif (!scope.hasType(typeObjToNestedArr(obj.rettype)))\n\t\t\t\t\tthrow scope.error(`Type ${typeObjToString(obj.rettype)} is not defined`);\n\n\t\t\t\tvar rettype = scope.getType(typeObjToNestedArr(obj.rettype));\n\n\t\t\t\tif (obj.expr) {\n\t\t\t\t\texpr = PI.expr0(obj.expr, scope);\n\t\t\t\t\tif (!rettype.equals(expr.type))\n\t\t\t\t\t\tthrow scope.error(`Expression type ${expr.type} failed to match the return type ${rettype} of fun ${name}`);\n\t\t\t\t} else {\n\t\t\t\t\ttype = new ObjectType({\n\t\t\t\t\t\tfunctional: true,\n\t\t\t\t\t\tfrom: params.map(variable => variable.type),\n\t\t\t\t\t\tto: rettype\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'funexpr':\n\t\t\t\texpr = PI.expr0(obj.expr, scope);\n\t\t\t\ttype = null;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\n\t\tif (!expr && sealed) {\n\t\t\tthrow scope.error('Cannot seal a primitive fun');\n\t\t}\n\n\t\treturn new ObjectFun({annotations: [], sealed, type, name, params, expr, doc, tex}, scope.trace);\n\t}\n\n\tpublic static funcall(obj: FuncallObject, parentScope: Scope): Funcall {\n\t\tif (obj._type != 'funcall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('funcall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.expr0(obj.schema, scope);\n\n\t\tvar args = obj.args.map(arg => {\n\t\t\treturn PI.expr0(arg, scope);\n\t\t});\n\n\t\treturn new Funcall({fun, unseal: obj.unseal, args}, scope.trace);\n\t}\n\n\tpublic static metaexpr(obj: MetaexprObject, parentScope: Scope): Metaexpr {\n\t\tif (!['tee', 'reduction', 'schemacall', 'schemaexpr', 'var'].includes(obj._type))\n\t\t\tthrow Error('Assertion failed');\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'tee':\n\t\t\t\treturn PI.tee(obj, scope);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PI.reduction(obj, scope);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PI.schemacall(obj, scope);\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PI.schema(obj, scope);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.metavar(obj, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static expr0(obj: Expr0Object, parentScope: Scope): Expr0 {\n\t\tif (!['funcall', 'funexpr', 'var'].includes(obj._type)) {\n\t\t\tconsole.log(obj);\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'funcall':\n\t\t\t\treturn PI.funcall(obj, scope);\n\t\t\tcase 'funexpr':\n\t\t\t\treturn PI.fun(obj, scope);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.variable(obj, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static metavar(obj: VarObject, parentScope: Scope): Metaexpr {\n\t\tif (obj._type != 'var')\n\t\t\tthrow Error('Assertion failed');\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj.type) {\n\t\t\tcase '@':\n\t\t\t\tif (obj.name.match(/^h[0-9]+$/)) {\n\t\t\t\t\tvar hypnum = Number(obj.name.slice(1)) - 1;\n\t\t\t\t\tif (hypnum >= scope.hypotheses.length) {\n\t\t\t\t\t\tthrow scope.error(`Hypothesis #${hypnum + 1} not found`);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn scope.hypotheses[hypnum];\n\t\t\t\t}\n\n\t\t\t\tthrow scope.error(`Unknown selector query @${obj.name}`);\n\t\t\tcase '$':\n\t\t\t\tif (!scope.has$(obj.name)) {\n\t\t\t\t\tthrow scope.error(`${obj.name} is not defined`);\n\t\t\t\t}\n\n\t\t\t\treturn scope.get$(obj.name);\n\t\t\tcase 'normal':\n\t\t\t\tif (!scope.hasSchema(obj.name))\n\t\t\t\t\tthrow scope.error(`Schema ${obj.name} is not defined`);\n\n\t\t\t\treturn scope.getSchema(obj.name);\n\t\t\tdefault:\n\t\t\t\tthrow scope.error(`Unknown type ${obj.type}`);\n\t\t}\n\t}\n\n\tpublic static tee(obj: TeeObject, parentScope: Scope): Tee {\n\t\tif (obj._type != 'tee')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('tee', null, obj.location);\n\n\t\tvar left = obj.left.map(o => PI.metaexpr(o, scope));\n\n\t\tvar scopeRight = scope.extend('tee.right', null, obj.right.location);\n\t\tleft.forEach(l => scopeRight.hypotheses.push(l));\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scopeRight);\n\n\t\t\tif (scopeRight.hasOwn$($v.name)) {\n\t\t\t\tthrow scopeRight.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scopeRight.add$($v);\n\t\t});\n\n\t\tvar right = PI.metaexpr(obj.right, scopeRight);\n\n\t\treturn new Tee({left, def$s, right}, scope.trace);\n\t}\n\n\tpublic static def$(obj: Def$Object, parentScope: Scope): $Variable {\n\t\tif (obj._type != 'def$')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar scope = parentScope.extend('def$', obj.name, obj.location);\n\t\t\n\t\tvar expr = PI.metaexpr(obj.expr, scope);\n\n\t\treturn new $Variable({name: obj.name, expr}, scope.trace);\n\t}\n\n\tpublic static schema(obj: DefschemaObject | SchemaexprObject, parentScope: Scope): Schema {\n\t\tif (obj._type != 'defschema' && obj._type != 'schemaexpr')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar name = obj._type == 'defschema' ? obj.name : null;\n\n\t\tvar scope = parentScope.extend('schema', name, obj.location);\n\n\t\tvar axiomatic: boolean = false,\n\t\t\tdoc: string = null,\n\t\t\tannotations: string[] = [],\n\t\t\tusing: ObjectFun[];\n\n\t\tif (obj._type == 'defschema') {\n\t\t\taxiomatic = obj.axiomatic;\n\t\t\tdoc = obj.doc;\n\t\t\tannotations = obj.annotations;\n\t\t\tusing = obj.using.map(name => {\n\t\t\t\tif (!scope.hasVariable(name)) {\n\t\t\t\t\tthrow scope.error(`Variable ${name} is not defined`);\n\t\t\t\t}\n\n\t\t\t\tvar fun = scope.getVariable(name);\n\n\t\t\t\tif (!(fun instanceof ObjectFun)) {\n\t\t\t\t\tthrow scope.error(`${name} is not a macro`);\n\t\t\t\t}\n\n\t\t\t\treturn fun;\n\t\t\t});\n\t\t}\n\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\n\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\t\n\t\t\treturn scope.addVariable(tv) as Variable;\n\t\t});\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scope);\n\n\t\t\tif (scope.hasOwn$($v.name)) {\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scope.add$($v);\n\t\t});\n\n\t\tvar expr = PI.metaexpr(obj.expr, scope);\n\n\t\treturn new Schema({doc, annotations, axiomatic, name, params, using, def$s, expr}, scope.trace);\n\t}\n\n\tpublic static schemacall(obj: SchemacallObject, parentScope: Scope): Funcall {\n\t\tif (obj._type != 'schemacall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('schemacall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.metaexpr(obj.schema, scope);\n\n\t\tvar args = obj.args.map(obj => {\n\t\t\treturn PI.expr0(obj, scope);\n\t\t});\n\n\t\treturn new Funcall({\n\t\t\tfun,\n\t\t\tunseal: obj.unseal,\n\t\t\targs\n\t\t}, scope.trace);\n\t}\n\n\tpublic static reduction(obj: ReductionObject, parentScope: Scope): Reduction {\n\t\tif (obj._type != 'reduction')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('reduction', 'name' in obj.subject ? obj.subject.name : null, obj.location);\n\n\t\tvar subject = PI.metaexpr(obj.subject, scope);\n\n\t\tvar guesses = !obj.guesses\n\t\t\t? null\n\t\t\t: obj.guesses.map(g => {\n\t\t\t\treturn g && PI.expr0(g, scope);\n\t\t\t});\n\n\t\tvar leftargs = obj.leftargs.map(obj => {\n\t\t\treturn PI.metaexpr(obj, scope);\n\t\t});\n\n\t\tvar expected = obj.expected && PI.metaexpr(obj.expected, scope);\n\n\t\treturn new Reduction({\n\t\t\tsubject,\n\t\t\tguesses,\n\t\t\tleftargs,\n\t\t\texpected\n\t\t}, scope.trace);\n\t}\n}","import $Variable from \"./nodes/$Variable\";\nimport Fun from \"./nodes/Fun\";\nimport Funcall from \"./nodes/Funcall\";\nimport Metaexpr from \"./nodes/Metaexpr\";\nimport { isNameable } from \"./nodes/Nameable\";\nimport ObjectFun from \"./nodes/ObjectFun\";\nimport Reduction from \"./nodes/Reduction\";\nimport Schema from \"./nodes/Schema\";\nimport Tee from \"./nodes/Tee\";\nimport Variable from \"./nodes/Variable\";\nimport Scope from \"./Scope\";\n\nexport default class ProofExplorer {\n\tpublic static get(scope: Scope, name: string, ktx) {\n\t\tvar DIAMOND = '&#x25C7;',\n\t\t\tDOWN = '&#x25BC;',\n\t\t\tUP = '&#x25B2;';\n\t\t\n\t\tif (!scope.hasSchema(name)) {\n\t\t\tthrow Error('wut');\n\t\t}\n\t\n\t\tvar theexpr = scope.getSchema(name);\n\t\n\t\tvar ncols = (function recurse(expr: Metaexpr) {\n\t\t\tif (expr instanceof Reduction) {\n\t\t\t\treturn Math.max(\n\t\t\t\t\t...expr.leftargs.map(recurse),\n\t\t\t\t\t((expr.subject instanceof Fun && expr.subject.name)\n\t\t\t\t\t\t|| (expr.subject instanceof Funcall\n\t\t\t\t\t\t\t\t&& isNameable(expr.subject.fun)\n\t\t\t\t\t\t\t\t&& expr.subject.fun.name)\n\t\t\t\t\t\t\t? 0 : recurse(expr.subject)),\n\t\t\t\t\t1\n\t\t\t\t);\n\t\t\t} else if (expr instanceof Schema) {\n\t\t\t\treturn Math.max(\n\t\t\t\t\t...expr.def$s.map($ => recurse($.expr)),\n\t\t\t\t\trecurse(expr.expr)\n\t\t\t\t) + 1;\n\t\t\t} else if (expr instanceof ObjectFun) {\n\t\t\t\treturn recurse(expr.expr) + 1;\n\t\t\t} else if (expr instanceof Tee) {\n\t\t\t\treturn Math.max(\n\t\t\t\t\t...expr.left.map(recurse),\n\t\t\t\t\t...expr.def$s.map($ => recurse($.expr)),\n\t\t\t\t\trecurse(expr.right)\n\t\t\t\t) + 1;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t})(theexpr);\n\n\t\tfunction getHtmlLine(ctr: string | number, left: any[], h1: string, h2: string | string[], options?) {\n\t\t\tvar padding = left.length;\n\n\t\t\tvar {bbb=false, rrb=false} = options || {};\n\t\n\t\t\tvar htmlLeft = left.map((e, i, a) => `<td class=\"${rrb && i == a.length - 1 ? 'rrb' : 'brb'}\">${e.map(f => ktx(f.toTeXStringWithId(true))).join(', ')}</td>`).join('');\n\n\t\t\tfor (var i = 0; i < left.length; i++)\n\t\t\t\twhile(left[i].length) left[i].pop();\n\t\n\t\t\treturn `<tr><th>${ctr}</th>${htmlLeft}<td ${bbb ? 'class=\"bbb\" ' : ''}colspan=\"${ncols-padding}\">${h1}</td>${h2 instanceof Array ? h2.map(e => `<td>${e}</td>`).join('') : `<td colspan=\"2\">${h2}</td>`}</tr>`;\n\t\t}\n\n\t\tfunction exprToHtml(expr, expand?) {\n\t\t\tif (typeof expr == 'number') return `<b>${expr}</b>`;\n\t\t\tif (expr instanceof Array) return `<b>${expr[0]}&ndash;${expr[1]}</b>`;\n\t\t\tif (expand) return ktx(expr.expandMeta(true).toTeXString(true));\n\t\t\t\n\t\t\treturn ktx(expr.toTeXString(true));\n\t\t}\n\n\t\tvar ctr = 0;\n\n\t\tvar tree = (function getTree(\n\t\t\t\texpr: Metaexpr,\n\t\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t\t$Map: Map<Metaexpr, number>) {\n\t\t\t\n\t\t\tif (hypnumMap.has(expr)) {\n\t\t\t\treturn [{\n\t\t\t\t\t_type: 'R',\n\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\tnum: hypnumMap.get(expr),\n\t\t\t\t\texpr\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif ($Map.has(expr)) {\n\t\t\t\treturn [{\n\t\t\t\t\t_type: 'R',\n\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\tnum: $Map.get(expr),\n\t\t\t\t\texpr\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (expr instanceof Reduction) {\n\t\t\t\tvar leftarglines = [];\n\t\t\t\tvar leftargnums = expr.leftargs.map(l => {\n\t\t\t\t\tif (hypnumMap.has(l)) return hypnumMap.get(l);\n\t\t\t\t\tif ($Map.has(l)) return $Map.get(l);\n\n\t\t\t\t\tvar lines = getTree(l, hypnumMap, $Map);\n\t\t\t\t\tleftarglines = leftarglines.concat(lines);\n\t\t\t\t\treturn lines[lines.length - 1].ctr;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tvar args = null;\n\t\t\t\tvar subjectlines = [];\n\t\t\t\tvar subjectnum = hypnumMap.get(expr.subject)\n\t\t\t\t\t|| $Map.get(expr.subject)\n\t\t\t\t\t|| (expr.subject instanceof Funcall && $Map.has(expr.subject.fun)\n\t\t\t\t\t\t? (args = expr.subject.args, $Map.get(expr.subject.fun))\n\t\t\t\t\t\t: false)\n\t\t\t\t\t|| ((s => s instanceof Fun && s.name\n\t\t\t\t\t\t\t|| s instanceof Funcall && isNameable(s.fun) && s.fun.name)(expr.subject)\n\t\t\t\t\t\t? expr.subject\n\t\t\t\t\t\t: (subjectlines = getTree(expr.subject, hypnumMap, $Map))[subjectlines.length-1].ctr);\n\n\t\t\t\treturn [\n\t\t\t\t\t...leftarglines,\n\t\t\t\t\t...subjectlines,\n\t\t\t\t\t{\n\t\t\t\t\t\t_type: 'E',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\tsubject: subjectnum,\n\t\t\t\t\t\targs,\n\t\t\t\t\t\tleftargs: leftargnums,\n\t\t\t\t\t\treduced: expr.reduced\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t} else if (expr instanceof Funcall) {\n\t\t\t\tif (hypnumMap.has(expr.fun)) {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\t_type: 'RC',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\tschema: hypnumMap.get(expr.fun),\n\t\t\t\t\t\targs: expr.args,\n\t\t\t\t\t\texpr\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tif ($Map.has(expr.fun)) {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\t_type: 'RC',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\tschema: $Map.get(expr.fun),\n\t\t\t\t\t\targs: expr.args,\n\t\t\t\t\t\texpr\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tif (expr.fun instanceof Schema && expr.fun.name) {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\t_type: 'RCX',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\texpr\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tif (!(expr.fun instanceof Schema)) {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\t_type: 'NP',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\texpr\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tvar schemalines = getTree(expr.fun, hypnumMap, $Map);\n\n\t\t\t\treturn [\n\t\t\t\t\t...schemalines,\n\t\t\t\t\t{\n\t\t\t\t\t\t_type: 'RC',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\tschema: schemalines[schemalines.length - 1].ctr,\n\t\t\t\t\t\targs: expr.args,\n\t\t\t\t\t\texpr\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t} else if (expr instanceof Variable) {\n\t\t\t\treturn [{\n\t\t\t\t\t_type: 'NP',\n\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\texpr\n\t\t\t\t}];\n\t\t\t} else if (expr instanceof Fun) {\n\t\t\t\tif (expr instanceof Schema && expr.name && expr != theexpr) {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\t_type: 'RS',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\texpr\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tif (!expr.expr) {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\t_type: 'NP',\n\t\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\t\texpr\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\t$Map = new Map($Map);\n\n\t\t\t\tvar start = ctr + 1;\n\n\t\t\t\tvar $lines = [];\n\t\t\t\t\n\t\t\t\tif (expr instanceof Schema) {\n\t\t\t\t\texpr.def$s.forEach($ => {\n\t\t\t\t\t\tvar lines = getTree($.expr, hypnumMap, $Map);\n\t\t\t\t\t\t$lines = $lines.concat(lines);\n\n\t\t\t\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t\t\t\t$Map.set($, $num);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn [{\n\t\t\t\t\t_type: 'V',\n\t\t\t\t\t$lines,\n\t\t\t\t\tlines: getTree(expr.expr, hypnumMap, $Map),\n\t\t\t\t\t// getHtmlLine 함수가 이 배열을 조작하기 때문에\n\t\t\t\t\t// shallow copy 해야 한다.\n\t\t\t\t\tparams: expr.params.slice(),\n\t\t\t\t\tctr: [start ,ctr]\n\t\t\t\t}];\n\t\t\t} else if (expr instanceof Tee) {\n\t\t\t\thypnumMap = new Map(hypnumMap);\n\t\t\t\tvar leftlines = [];\n\n\t\t\t\tvar start = ctr + 1;\n\n\t\t\t\texpr.left.forEach(l => {\n\t\t\t\t\thypnumMap.set(l, ++ctr);\n\t\t\t\t\tleftlines.push({\n\t\t\t\t\t\t_type: 'H',\n\t\t\t\t\t\tctr,\n\t\t\t\t\t\texpr: l\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t$Map = new Map($Map);\n\n\t\t\t\tvar $lines = [];\n\t\t\t\texpr.def$s.forEach($ => {\n\t\t\t\t\tvar lines = getTree($.expr, hypnumMap, $Map);\n\t\t\t\t\t$lines = $lines.concat(lines);\n\n\t\t\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t\t\t$Map.set($, $num);\n\t\t\t\t});\n\n\t\t\t\treturn [{\n\t\t\t\t\t_type: 'T',\n\t\t\t\t\tleftlines,\n\t\t\t\t\t$lines,\n\t\t\t\t\trightlines: getTree(expr.right, hypnumMap, $Map),\n\t\t\t\t\tctr: [start, ctr]\n\t\t\t\t}];\n\t\t\t} else if (expr instanceof $Variable) {\n\t\t\t\tif (!$Map.has(expr)) {\n\t\t\t\t\tthrow Error(`${expr.name} is not defined`);\n\t\t\t\t}\n\n\t\t\t\treturn [{\n\t\t\t\t\t_type: 'R',\n\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\tnum: $Map.get(expr),\n\t\t\t\t\texpr: expr.expr\n\t\t\t\t}];\n\t\t\t} else {\n\t\t\t\tconsole.log('Unknown metaexpr', expr);\n\t\t\t\treturn [{\n\t\t\t\t\t_type: '?',\n\t\t\t\t\tctr: ++ctr,\n\t\t\t\t\texpr\n\t\t\t\t}];\n\t\t\t}\n\t\t})(theexpr, new Map(), new Map());\n\n\t\tvar html = '<table class=\"explorer\">';\n\t\thtml += `<tr><th>#</th><th colspan=\"${ncols}\">expr</th><th colspan=\"2\">rule</th></tr>`;\n\t\t\n\t\thtml += (function tree2html(lines, left) {\n\t\t\treturn lines.map(line => {\n\t\t\t\tswitch (line._type) {\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\treturn tree2html(line.$lines, left.concat([line.params]))\n\t\t\t\t\t\t\t+ tree2html(line.lines, left.concat([line.params]));\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\tvar newleft = left.concat([[]]);\n\n\t\t\t\t\t\tvar ret = '';\n\n\t\t\t\t\t\tif (line.leftlines.length == 0) {\n\t\t\t\t\t\t\tvar emptyleft = Array(left.length + 1).fill([]);\n\n\t\t\t\t\t\t\tret += getHtmlLine(\n\t\t\t\t\t\t\t\t'', emptyleft, '', '', {bbb: true, rrb: true}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tret += line.leftlines.map((line, i, a) => {\n\t\t\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\t\t\tnewleft,\n\t\t\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t\t\t'assumption',\n\t\t\t\t\t\t\t\t\t{bbb: i == a.length - 1, rrb: true}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}).join('');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tret += tree2html(\n\t\t\t\t\t\t\tline.$lines,\n\t\t\t\t\t\t\tnewleft\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tret += tree2html(\n\t\t\t\t\t\t\tline.rightlines,\n\t\t\t\t\t\t\tnewleft\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\tcase '?':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'???'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'H':\n\t\t\t\t\t\tthrow Error('no');\n\t\t\t\t\tcase 'R':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.num)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RS':\n\t\t\t\t\tcase 'RCX':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.expr)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RC':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, `${exprToHtml(line.schema)} (${line.args.map(a => exprToHtml(a)).join(', ')})`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'E':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.reduced, true),\n\t\t\t\t\t\t\t[DOWN, `${exprToHtml(line.subject)}${line.args ? ' (' + line.args.map(a => exprToHtml(a)).join(', ') + ')' : ''} [${line.leftargs.map(a => exprToHtml(a)).join(', ')}]`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'NP':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'<b class=\"red\">not proved</b>'\n\t\t\t\t\t\t);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\t`Unknown type ${line._type}`,\n\t\t\t\t\t\t\t''\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}).join('');\n\t\t})(tree[0].$lines.concat(tree[0].lines), []);\n\t\t\n\t\thtml += '</table>';\n\t\n\t\treturn html;\n\t}\n}","import $Variable from './nodes/$Variable';\nimport Fun from './nodes/Fun';\nimport Metaexpr from './nodes/Metaexpr';\nimport ObjectFun from './nodes/ObjectFun';\nimport ObjectType from './nodes/ObjectType';\nimport Schema from './nodes/Schema';\nimport Variable from './nodes/Variable';\nimport { LocationObject } from './PegInterfaceDefinitions';\nimport StackTrace from './StackTrace';\n\nexport type NestedTypeInput = string | NestedTypeInput[];\n\n/**\n * 변수 영역(scope).\n * 구문 분석 과정에서 name resolution을 할 때에만 사용해야 한다.\n */\nexport default class Scope {\n\tpublic readonly importMap: Map<string, Scope> = new Map();\n\n\tpublic readonly typedefMap: Map<string, ObjectType> = new Map();\n\tpublic readonly defMap: Map<string, Variable | ObjectFun> = new Map();\n\tpublic readonly schemaMap: Map<string, Schema> = new Map();\n\tpublic readonly $Map: Map<string, $Variable> = new Map();\n\tpublic readonly hypotheses: Metaexpr[] = [];\n\n\tpublic readonly parent: Scope;\n\tpublic readonly root: Scope;\n\n\tpublic readonly trace: StackTrace;\n\tpublic baseType: ObjectType;\n\n\tconstructor (parent: Scope, trace?: StackTrace) {\n\t\tthis.parent = parent;\n\t\tthis.root = parent ? parent.root : this;\n\n\t\tif (trace && !(trace instanceof StackTrace)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tthis.trace = trace || new StackTrace();\n\n\t\tthis.baseType = parent ? parent.baseType : null;\n\t}\n\n\tpublic extend(type: string, name: string, location: LocationObject): Scope {\n\t\tvar child = new Scope(this, this.trace.extend({type, name, location}));\n\t\tthis.hypotheses.forEach(h => child.hypotheses.push(h));\n\t\treturn child;\n\t}\n\n\tpublic error(message: string): Error {\n\t\treturn this.trace.error(message);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasOwnType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasOwnType(e);\n\t\t}).every(e => e);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.hasOwnType(name)\n\t\t\t\t|| (!!this.parent && this.parent.hasType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasType(e);\n\t\t}).every(e => e);\n\t}\n\n\tpublic addType(type: ObjectType): ObjectType {\n\t\tif (!(type instanceof ObjectType))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!type.name)\n\t\t\tthrow this.error('Something\\'s wrong');\n\n\t\tif (this.hasOwnType(type.name))\n\t\t\tthrow this.error(`Type ${type.name} has already been declared`);\n\n\t\tif (type.isBaseType) {\n\t\t\tif (this.baseType) {\n\t\t\t\tthrow this.error('A base type already exists');\n\t\t\t}\n\n\t\t\t(function broadcast(scope: Scope) {\n\t\t\t\tscope.baseType = type;\n\t\t\t\tif (scope.parent) broadcast(scope.parent);\n\t\t\t})(this);\n\t\t}\n\n\t\tthis.typedefMap.set(type.name, type);\n\t\treturn type;\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic getType(name: NestedTypeInput): ObjectType {\n\t\tif (typeof name == 'string') {\n\t\t\tif (!this.hasType(name))\n\t\t\t\tthrow this.error(`Type ${name} is not defined`);\n\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t? this.typedefMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getType(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasType(name)\n\t\t\t\t\t})[0].getType(name);\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\tvar from = name.slice(0, name.length - 1).map(e => {\n\t\t\treturn this.getType(e);\n\t\t});\n\n\t\tvar to = this.getType(name[name.length - 1]);\n\n\t\treturn new ObjectType({\n\t\t\tfunctional: true,\n\t\t\tfrom,\n\t\t\tto\n\t\t});\n\t}\n\n\tpublic hasOwnVariable(name: string): boolean {\n\t\treturn this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnVariable(name));\n\t}\n\n\tpublic hasVariable(name: string): boolean {\n\t\treturn this.hasOwnVariable(name)\n\t\t\t|| (!!this.parent && this.parent.hasVariable(name));\n\t}\n\n\tpublic addVariable(variable: Variable | Fun): Variable | Fun {\n\t\tif (!(variable instanceof Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnVariable(variable.name))\n\t\t\tthrow this.error(`Definition ${variable.name} has already been declared`);\n\n\t\tthis.defMap.set(variable.name, variable);\n\t\treturn variable;\n\t}\n\n\tpublic addFun(fun: ObjectFun): ObjectFun {\n\t\tif (!(fun instanceof ObjectFun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!fun.name)\n\t\t\tthrow this.error('Cannot add anonymous fun to scope');\n\n\t\tif (this.hasOwnVariable(fun.name))\n\t\t\tthrow this.error(`Definition ${fun.name} has already been declared`);\n\n\t\tthis.defMap.set(fun.name, fun);\n\t\treturn fun;\n\t}\n\n\tpublic getVariable(name: string): Variable | ObjectFun {\n\t\tif (!this.hasVariable(name))\n\t\t\tthrow this.error(`Definition ${name} is not defined`);\n\n\t\treturn this.defMap.has(name)\n\t\t\t? this.defMap.get(name)\n\t\t\t: (!!this.parent && this.parent.getVariable(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.hasVariable(name)\n\t\t\t\t})[0].getVariable(name);\n\t}\n\n\tpublic hasOwnSchema(name: string): boolean {\n\t\treturn this.schemaMap.has(name) || this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnSchema(name));\n\t}\n\n\tpublic hasSchema(name: string): boolean {\n\t\treturn this.hasOwnSchema(name)\n\t\t\t|| (!!this.parent && this.parent.hasSchema(name));\n\t}\n\n\tpublic addSchema(schema: Schema): Schema {\n\t\tif (!(schema instanceof Fun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnSchema(schema.name))\n\t\t\tthrow this.error(`Schema ${schema.name} has already been declared`);\n\n\t\tthis.schemaMap.set(schema.name, schema);\n\t\treturn schema;\n\t}\n\n\tpublic getSchema(name: string): Variable | Fun {\n\t\tif (!this.hasSchema(name))\n\t\t\tthrow this.error(`Schema ${name} is not defined`);\n\n\t\treturn this.schemaMap.has(name)\n\t\t\t? this.schemaMap.get(name)\n\t\t\t: this.defMap.has(name)\n\t\t\t\t? this.defMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getSchema(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasSchema(name)\n\t\t\t\t\t})[0].getSchema(name);\n\t}\n\n\tpublic hasOwn$(name: string): boolean {\n\t\treturn this.$Map.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwn$(name));\n\t}\n\n\tpublic has$(name: string): boolean {\n\t\treturn this.hasOwn$(name)\n\t\t\t|| (!!this.parent && this.parent.has$(name));\n\t}\n\n\tpublic add$($: $Variable): $Variable {\n\t\tif (!($ instanceof $Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwn$($.name))\n\t\t\tthrow this.error(`$ variable ${$.name} has already been declared`);\n\n\t\tthis.$Map.set($.name, $);\n\t\treturn $;\n\t}\n\n\tpublic get$(name: string): $Variable {\n\t\tif (!this.has$(name))\n\t\t\tthrow this.error(`$ variable ${name} is not defined`);\n\n\t\treturn this.$Map.has(name)\n\t\t\t? this.$Map.get(name)\n\t\t\t: (!!this.parent && this.parent.get$(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.has$(name)\n\t\t\t\t})[0].get$(name);\n\t}\n}","import { LocationObject } from \"./PegInterfaceDefinitions\";\n\ninterface StackTraceElement {\n\ttype: string;\n\tname: string;\n\tlocation: LocationObject;\n}\n\nexport default class StackTrace {\n\tpublic readonly stack: StackTraceElement[];\n\n\tconstructor (stack?: StackTraceElement[]) {\n\t\tthis.stack = stack || [];\n\t}\n\n\tpublic extend(element: StackTraceElement): StackTrace {\n\t\treturn new StackTrace([element].concat(this.stack));\n\t}\n\n\tpublic error(message: string) {\n\t\tvar filename = typeof process != 'undefined' && process.argv[2];\n\n\t\treturn new Error(\n\t\t\tmessage\n\t\t\t+ '\\n\\tat '\n\t\t\t+ (\n\t\t\t\tthis.stack.length\n\t\t\t\t\t? this.stack.map(({type, name, location}) => {\n\t\t\t\t\t\treturn `${type} ${name || '<anonymous>'} (${filename || '<unknown>'}:${location.start.line}:${location.start.column})`;\n\t\t\t\t\t}).join('\\n\\tat ')\n\t\t\t\t\t: `<root> (${filename || '<unknown>'}:1:1)`\n\t\t\t)\n\t\t);\n\t}\n}","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"sourceRoot":""}