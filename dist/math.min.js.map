{"version":3,"sources":["webpack://math/webpack/universalModuleDefinition","webpack://math/webpack/bootstrap","webpack://math/./src/nodes/Node.ts","webpack://math/./src/nodes/Metaexpr.ts","webpack://math/./src/nodes/ObjectType.ts","webpack://math/./src/nodes/Fun.ts","webpack://math/./src/nodes/$Variable.ts","webpack://math/./src/nodes/Variable.ts","webpack://math/./src/nodes/Schema.ts","webpack://math/./src/nodes/Funcall.ts","webpack://math/./src/nodes/Expr0.ts","webpack://math/./src/nodes/MetaType.ts","webpack://math/./src/nodes/ObjectFun.ts","webpack://math/./src/nodes/Type.ts","webpack://math/./src/nodes/Nameable.ts","webpack://math/./src/nodes/Tee.ts","webpack://math/./src/entry.js","webpack://math/./src/grammar.pegjs","webpack://math/./src/Program.ts","webpack://math/./src/PegInterface.ts","webpack://math/./src/ExecutionContext.ts","webpack://math/./src/nodes/Reduction.ts","webpack://math/./src/ProofExplorer.ts","webpack://math/./src/Counter.ts","webpack://math/./src/Scope.ts","webpack://math/./src/StackTrace.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","ctr","Node","trace","doc","tex","_id","toIndentedString","message","error","Error","replace","precedence","code","match","g1","hyps","length","prec","Array","console","log","my","normalizePrecedence","your","id","args","ret","shouldConsolidate","_match","PREC_FUNEXPR","PREC_COMMA","PREC_COLONEQQ","EqualsPriority","Metaexpr","type","super","andFuncalls","expandMetaCache","expandMetaInternal","obj","context","equals","getEqualsPriority","equalsInternal","hypnumMap","$Map","has","_type","next","num","expr","getProofInternal","ObjectType","origin","isFunctional","isBaseType","base","functional","from","map","f","some","e","to","resolved","resolve","toSimpleString","join","indent","isSimple","toTeXString","Fun","annotations","sealed","params","parsed","parseTeX","variable","isProved","ONE","placeholders","types","push","isParam","thisCall","fun","objCall","Map","set","substitute","start","peek","$lines","def$s","forEach","$","lines","getProof","concat","$num","$Variable","expandMeta","FOUR","escapeTeX","Variable","selector","ZERO","Schema","axiomatic","isProvedCache","cache","_context","repeat","toTeXStringWithId","Funcall","isNameable","resolvedType","paramTypes","argTypes","arg","callee","isExpandable","isCallable","expandOnce","THREE","thisIsExpandable","objIsExpandable","every","_","schema","schemalines","funcallToTeXString","Expr0","MetaType","left","right","ObjectFun","canUse","makeTeX","Type","Tee","lef","TWO","leftlines","rightlines","expanded","grammar","default","Program","parser","scopeMap","filename","loader","scope","loadModuleInternal","fileUri","parse","feed","line","scope2","importMap","hasType","addType","hasVariable","addVariable","addFun","hasSchema","addSchema","tee","reduction","schemacall","metavar","ktx","typeObjToString","ftype","typeObjToNestedArr","varObjToString","PI","parentScope","extend","location","getType","includes","getVariable","tvo","tv","hasOwnVariable","rettype","expr0","funcall","hypnum","Number","slice","hypotheses","has$","get$","getSchema","metaexpr","scopeRight","$v","def$","hasOwn$","add$","oldContext","using","subject","g","leftargs","as","ExecutionContext","usingList","Reduction","derefs","guess","leftargTypes","leftargsExpanded","reduced","parameter","argument","recurse","ptr","test","leftarglines","leftargnums","subjectlines","subjectnum","ProofExplorer","DIAMOND","getHtmlLine","h1","h2","options","padding","bbb","rrb","htmlLeft","a","pop","ncols","exprToHtml","expand","tree","innertree","Math","max","html","tree2html","newleft","fill","Counter","Scope","parent","typedefMap","defMap","schemaMap","baseType","child","h","values","hasOwnType","broadcast","filter","hasOwnSchema","StackTrace","stack","element","column"],"mappings":"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","file":"math.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"math\"] = factory();\n\telse\n\t\troot[\"math\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","import StackTrace from '../StackTrace';\n\nvar ctr = 0;\n\nexport type Precedence = boolean | number | [number, number];\n\nexport default abstract class Node {\n\tpublic readonly _id: number;\n\n\tpublic readonly trace: StackTrace;\n\tpublic readonly doc: string;\n\tpublic readonly tex: string;\n\tpublic precedence: Precedence;\n\n\tpublic static readonly PREC_FUNEXPR = 1000;\n\tpublic static readonly PREC_COMMA = 1000;\n\tpublic static readonly PREC_COLONEQQ = 100000;\n\n\tconstructor (trace: StackTrace, doc: string, tex: string) {\n\t\tthis._id = ++ctr;\n\t\tthis.trace = trace;\n\t\tthis.doc = doc;\n\t\tthis.tex = tex;\n\t}\n\n\tpublic toString() {\n\t\treturn this.toIndentedString(0);\n\t}\n\n\tpublic abstract toIndentedString(indent: number, root?: boolean): string;\n\tpublic abstract toTeXString(prec?: Precedence, root?: boolean): string;\n\n\tpublic error(message: string) {\n\t\treturn Node.error(message, this.trace);\n\t}\n\n\tpublic static error(message: string, trace: StackTrace) {\n\t\tif (trace) {\n\t\t\treturn trace.error(message);\n\t\t} else {\n\t\t\treturn new Error(message);\n\t\t}\n\t}\n\n\tpublic static escapeTeX(s) {\n\t\treturn s.replace(/&|%|\\$|#|_|{|}|~|\\^|\\\\/g, m => ({\n\t\t\t'&': '\\\\&', '%': '\\\\%', '$': '\\\\$',\n\t\t\t'#': '\\\\#', '_': '\\\\_', '{': '\\\\{',\n\t\t\t'}': '\\\\}',\n\t\t\t'~': '\\\\textasciitilde',\n\t\t\t'^': '\\\\textasciicircum',\n\t\t\t'\\\\': '\\\\textbackslash'\n\t\t})[m]);\n\t}\n\n\tpublic static parseTeX(tex) {\n\t\tvar precedence: Precedence = false;\n\n\t\tvar code = tex.replace(/^!<prec=([0-9]+)>/, (match, g1) => {\n\t\t\tprecedence = g1 * 1;\n\t\t\treturn '';\n\t\t});\n\n\t\treturn {precedence, code};\n\t}\n\n\tpublic isProved(hyps?): boolean {\n\t\thyps = hyps || [];\n\n\t\tfor (var i = 0; i < hyps.length; i++) {\n\t\t\tif (hyps[i] == this) return true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/*\n\t* false corresponds to 0.\n\t* true corresponds to w * 2.\n\t*/\n\tpublic static normalizePrecedence(prec: Precedence) {\n\t\tif (prec === false) return [0, 0];\n\t\tif (prec === true) return [2, 0];\n\t\tif (typeof prec == 'number') return [0, prec];\n\n\t\tif (!(prec instanceof Array && prec.length == 2)) {\n\t\t\tconsole.log(prec);\n\t\t\tthrow Error('wut');\n\t\t}\n\n\t\treturn prec;\n\t}\n\n\tpublic shouldConsolidate(prec: Precedence) {\n\t\tvar my = Node.normalizePrecedence(this.precedence || false),\n\t\t\tyour = Node.normalizePrecedence(prec || false);\n\n\t\tif (my[0] == 0 && my[1] == 0) return false;\n\n\t\treturn !(my[0] < your[0] || my[0] == your[0] && my[1] < your[1]);\n\t}\n\n\tpublic makeTeX(id, args, prec) {\n\t\targs = args || [];\n\t\tprec = prec || false;\n\t\t\n\t\tvar ret = this.tex;\n\n\t\tif (this.shouldConsolidate(prec)) {\n\t\t\tret = '\\\\left(' + ret + '\\\\right)';\n\t\t}\n\n\t\treturn ret.replace(/#([0-9]+)/g, (match, g1) => {\n\t\t\treturn args[g1 * 1 - 1] || `\\\\texttt{\\\\textcolor{red}{\\\\#${g1}}}`;\n\t\t}).replace(/<<(.+?)>>/, (_match, g1) => {\n\t\t\treturn `\\\\href{#${id}}{${g1}}`;\n\t\t});\n\t}\n}","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Node from \"./Node\";\nimport Type from \"./Type\";\nimport Variable from \"./Variable\";\n\n/**\n * 숫자가 큰 것이 우선순위가 높다.\n */\nexport enum EqualsPriority {\n\t/** Variable */\n\tZERO,\n\t/** Fun */\n\tONE,\n\t/** Tee */\n\tTWO,\n\t/** Funcall */\n\tTHREE,\n\t/** $Variable, Reduction */\n\tFOUR\n}\n\nexport default abstract class Metaexpr extends Node {\n\t\n\tpublic readonly type: Type;\n\tprivate expandMetaCache: Metaexpr;\n\n\tconstructor(trace: StackTrace, doc: string, tex: string, type: Type) {\n\t\tsuper(trace, doc, tex);\n\n\t\tif (!type) throw Node.error('Assertion failed', trace);\n\n\t\tthis.type = type;\n\t}\n\n\tpublic abstract substitute(map: Map<Variable, Expr0>): Metaexpr;\n\n\t/**\n\t * \n\t * @param andFuncalls 이름 없는 Funcall도 푼다.\n\t */\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\tif (this.expandMetaCache) return this.expandMetaCache;\n\t\treturn this.expandMetaCache = this.expandMetaInternal(andFuncalls);\n\t}\n\n\tprotected abstract expandMetaInternal(andFuncalls: boolean): Metaexpr;\n\n\tpublic equals(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (this === obj) return true;\n\t\tif (!this.type.equals(obj.type)) return false;\n\n\t\tif (obj.getEqualsPriority() > this.getEqualsPriority())\n\t\t\treturn obj.equalsInternal(this, context);\n\t\t\n\t\treturn this.equalsInternal(obj, context);\n\t}\n\n\tprotected abstract getEqualsPriority(): EqualsPriority;\n\n\tprotected abstract equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean;\n\n\tpublic getProof(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot: boolean=false): ProofType[] {\n\t\t\n\t\tif (hypnumMap.has(this)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'R',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tnum: hypnumMap.get(this),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif ($Map.has(this)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'R',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tnum: $Map.get(this),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\treturn this.getProofInternal(hypnumMap, $Map, ctr, root);\n\t}\n\n\tprotected abstract getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot?: boolean): ProofType[];\n}","import Nameable from './Nameable';\nimport Node from './Node';\nimport Type from './Type';\n\nexport default class ObjectType extends Type implements Nameable {\n\n\tpublic readonly isBaseType: boolean;\n\tpublic readonly name: string;\n\tpublic readonly origin: ObjectType;\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: ObjectType;\n\n\tconstructor (o) {\n\t\tif (o.origin) {\n\t\t\tsuper(null, o.doc, null, o.origin.isFunctional);\n\n\t\t\tthis.isBaseType = !!o.base;\n\n\t\t\tif (typeof o.name != 'string')\n\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\n\t\t\tthis.name = o.name;\n\n\t\t\tif (!(o.origin instanceof ObjectType))\n\t\t\t\tthrow Node.error('!(o.origin instanceof ObjectType)', null);\n\n\t\t\tthis.origin = o.origin;\n\t\t} else {\n\t\t\tsuper(null, o.doc, null, o.functional);\n\n\t\t\tthis.isBaseType = !!o.base;\n\n\t\t\tif (typeof o.functional != 'boolean')\n\t\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\n\n\t\t\tif (!o.functional) {\n\t\t\t\tif (typeof o.name != 'string')\n\t\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\n\t\t\t\tthis.name = o.name;\n\t\t\t} else {\n\t\t\t\tif (o.from.map(f => f instanceof ObjectType).some(e => !e))\n\t\t\t\t\tthrow Node.error('o.from.map(f => f instanceof ObjectType).some(e => !e)', null);\n\t\t\t\tif (!(o.to instanceof ObjectType))\n\t\t\t\t\tthrow Node.error('!(o.to instanceof ObjectType)', null);\n\n\t\t\t\tthis.from = o.from;\n\t\t\t\tthis.to = o.to;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toSimpleString() {\n\t\tif (this.name) return this.name;\n\n\t\tvar resolved = this.resolve();\n\n\t\treturn `[${resolved.from.map(e => e.toSimpleString()).join(', ')} -> ${resolved.to.toSimpleString()}]`;\n\t}\n\n\tpublic toIndentedString(indent): string {\n\t\tif (this.isSimple) return this.name;\n\n\t\treturn `${this.name ? this.name + ': ' : ''}[${this.resolve().from.join(', ')} -> ${this.resolve().to}]`;\n\t}\n\n\tpublic toTeXString(root?: boolean) {\n\t\tif (this.isSimple) return `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\n\n\t\tif (!root && this.name) {\n\t\t\treturn `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\n\t\t}\n\n\t\treturn `${this.name ? `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}: ` : ''}`\n\t\t\t+ `\\\\left[${this.resolve().from.map(e => e.toTeXString()).join(' \\\\times ')}`\n\t\t\t+ ` \\\\to ${this.resolve().to.toTeXString()} \\\\right]`;\n\t}\n\n\tpublic resolve(): ObjectType {\n\t\treturn this.origin ? this.origin.resolve() : this;\n\t}\n\n\tpublic equals(t: Type): boolean {\n\t\tif (!(t instanceof ObjectType)) return false;\n\n\t\tif (this.origin) return this.origin.equals(t);\n\t\tif (t.origin) return this.equals(t.origin);\n\n\t\tif (this.isSimple != t.isSimple) return false;\n\n\t\tif (this.isSimple) return this === t;\n\n\t\tif (this.from.length != t.from.length) return false;\n\n\t\tfor (var i = 0; i < this.from.length; i++)\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\n\n\t\treturn this.to.equals(t.to);\n\t}\n}","import Expr0 from './Expr0';\nimport Nameable from './Nameable';\n\nexport default abstract class Fun extends Expr0 implements Nameable {\n\n\tpublic readonly annotations: string[];\n\tpublic readonly sealed: boolean;\n\tpublic readonly name: string;\n\tpublic readonly params: Variable[];\n\tpublic readonly expr: Metaexpr;\n\n\t/*\n\t * name, expr 중 하나 이상 있어야 하고 type, expr 중\n\t * 한 개만 있어야 한다.\n\t */\n\tconstructor ({doc, tex, annotations, sealed, type, name, params, expr}: FunArgumentType, trace: StackTrace) {\n\t\tif (!name && !expr)\n\t\t\tthrow Node.error('Anonymous fun cannot be primitive', trace);\n\n\t\tif (type && expr)\n\t\t\tthrow Node.error('no', trace);\n\n\t\tif (!type && !expr)\n\t\t\tthrow Node.error('Cannot guess the type of a primitive fun', trace);\n\t\t\n\t\tvar precedence = false;\n\n\t\tif (tex) {\n\t\t\tvar parsed = Node.parseTeX(tex);\n\t\t\tprecedence = parsed.precedence;\n\t\t\ttex = parsed.code;\n\t\t} else {\n\t\t\ttex = null;\n\t\t}\n\t\t\n\t\tsuper(\n\t\t\ttrace, doc, tex,\n\t\t\ttype || new (expr.type instanceof ObjectType ? ObjectType : MetaType)({\n\t\t\t\tfunctional: true,\n\t\t\t\tfrom: params.map(variable => variable.type),\n\t\t\t\tto: expr.type as any\n\t\t\t})\n\t\t);\n\n\t\tthis.annotations = annotations;\n\t\tthis.sealed = sealed;\n\t\tthis.precedence = precedence;\n\t\tthis.name = name;\n\t\tthis.params = params;\n\t\tthis.expr = expr;\n\t}\n\n\tpublic isProved(hyps?) {\n\t\thyps = hyps || [];\n\t\t\n\t\treturn super.isProved(hyps)\n\t\t\t|| this.expr && this.expr.isProved(hyps);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.ONE;\n\t}\n\t\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (!(this.expr && !this.sealed)\n\t\t\t\t&& !(obj instanceof Fun && obj.expr && !obj.sealed)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar placeholders = [];\n\t\tvar types = (this.type.resolve() as ObjectType | MetaType).from;\n\n\t\tfor (var i = 0; i < types.length; i++) {\n\t\t\tplaceholders.push(new Variable({\n\t\t\t\tisParam: true,\n\t\t\t\ttype: types[i],\n\t\t\t\tname: '$' + i\n\t\t\t}, this.trace));\n\t\t}\n\n\t\tvar thisCall = this.expr && !this.sealed\n\t\t\t? this.call(placeholders)\n\t\t\t: new Funcall({\n\t\t\t\tfun: this,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\n\t\tvar objCall = obj instanceof Fun && obj.expr && !obj.sealed\n\t\t\t? obj.call(placeholders)\n\t\t\t: new Funcall({\n\t\t\t\tfun: obj,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\t\t\n\t\treturn thisCall.equals(objCall, context);\n\t}\n\n\tpublic abstract isCallable(context: ExecutionContext): boolean;\n\n\tpublic call(args: Expr0[]): Metaexpr {\n\t\tif (!this.expr) {\n\t\t\tthrow Error('Cannot call a primitive fun');\n\t\t}\n\n\t\tif (this.params.length != args.length) {\n\t\t\tthrow Error('Illegal arguments length');\n\t\t}\n\n\t\tvar map: Map<Variable, Expr0> = new Map();\n\n\t\tfor (var i = 0; i < this.params.length; i++) {\n\t\t\tmap.set(this.params[i], args[i]);\n\t\t}\n\n\t\treturn this.expr.substitute(map);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot: boolean=false): ProofType[] {\n\t\t\n\t\tif (this instanceof Schema && this.name && !root) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RS',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (!this.expr) {\n\t\t\treturn [{\n\t\t\t\t_type: 'NP',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\t$Map = new Map($Map);\n\n\t\tvar start = ctr.peek() + 1;\n\n\t\tvar $lines: ProofType[] = [];\n\t\t\n\t\tif (this instanceof Schema) {\n\t\t\tthis.def$s.forEach($ => {\n\t\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\t\t$lines = $lines.concat(lines);\n\n\t\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t\t$Map.set($, $num);\n\t\t\t});\n\t\t}\n\n\t\treturn [{\n\t\t\t_type: 'V',\n\t\t\t$lines,\n\t\t\tlines: this.expr.getProof(hypnumMap, $Map, ctr),\n\t\t\tparams: this.params,\n\t\t\tctr: [start, ctr.peek()]\n\t\t}];\n\t}\n}\n\nimport Funcall from './Funcall';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport Node from './Node';\nimport ObjectType from './ObjectType';\nimport Type from './Type';\nimport Variable from './Variable';\nimport StackTrace from '../StackTrace';\nimport ExecutionContext from '../ExecutionContext';\nimport Counter from '../Counter';\nimport { ProofType } from '../ProofType';\nimport Schema from './Schema';\n\ninterface FunArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\tannotations: string[];\n\tsealed: boolean;\n\ttype?: Type;\n\tname?: string;\n\tparams: Variable[];\n\texpr?: Metaexpr;\n}","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Metaexpr, { EqualsPriority } from \"./Metaexpr\";\nimport Nameable from \"./Nameable\";\nimport Node, { Precedence } from \"./Node\";\nimport Variable from \"./Variable\";\n\ninterface $VariableArgumentType {\n\tname: string;\n\texpr: Metaexpr;\n}\n\nexport default class $Variable extends Metaexpr implements Nameable {\n\n\tpublic readonly name: string;\n\tpublic readonly expr: Metaexpr;\n\n\tconstructor ({name, expr}: $VariableArgumentType, trace: StackTrace) {\n\t\tsuper(trace, null, null, expr.type);\n\n\t\tif (!name || !expr) {\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tthis.name = name;\n\t\tthis.expr = expr;\n\t}\n\n\tpublic isProved(hyps?): boolean {\n\t\thyps = hyps || [];\n\t\t\n\t\treturn super.isProved(hyps)\n\t\t\t|| this.expr.isProved(hyps);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn this.expr.substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\treturn this.expr.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FOUR;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\treturn this.expr.equals(obj, context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\tif (!$Map.has(this)) {\n\t\t\tthrow Error(`${this.name} is not defined`);\n\t\t}\n\n\t\treturn [{\n\t\t\t_type: 'R',\n\t\t\tctr: ctr.next(),\n\t\t\tnum: $Map.get(this),\n\t\t\texpr: this.expr\n\t\t}];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn this.name;\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `\\\\mathtt{${Node.escapeTeX(this.name)}}`;\n\t}\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport Expr0 from './Expr0';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport Nameable from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\n\ninterface VariableArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\ttype: ObjectType;\n\tname: string;\n\tisParam: boolean;\n\tselector?: string;\n}\n\nexport default class Variable extends Expr0 implements Nameable {\n\t\n\tpublic readonly isParam: boolean;\n\tpublic readonly selector: string;\n\tpublic readonly type: ObjectType;\n\tpublic readonly name: string;\n\n\tconstructor ({doc, tex, type, name, isParam, selector}: VariableArgumentType, trace: StackTrace) {\n\t\tsuper(trace, doc, tex, type);\n\n\t\tthis.isParam = !!isParam;\n\t\tthis.selector = selector || null;\n\n\t\tif (typeof name != 'string')\n\t\t\tthrow Node.error('Assertion failed', trace);\n\n\t\tthis.name = name;\n\t}\n\n\tpublic isProved(hyps) {\n\t\thyps = hyps || [];\n\t\n\t\treturn super.isProved(hyps);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn map.get(this) || this;\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\treturn this;\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.ZERO;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\treturn false;\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\treturn [{\n\t\t\t_type: 'NP',\n\t\t\tctr: ctr.next(),\n\t\t\texpr: this\n\t\t}];\n\t}\n\n\t// pr f\n\tpublic toSimpleString() {\n\t\treturn this.type.toSimpleString() + ' ' + this.name;\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn `${root ? this.type + ' ' : ''}${this.name}<${this._id}>`;\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar id = this.isParam ? `id-${this._id}` : `def-${this.name}`;\n\n\t\tvar tex = this.tex\n\t\t\t|| (\n\t\t\t\tthis.name.length == 1\n\t\t\t\t\t? Node.escapeTeX(this.name)\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.name)}}`\n\t\t\t);\n\t\t\n\t\treturn `\\\\href{#${id}}{${tex}}`;\n\t}\n\n\tpublic toTeXStringWithId(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.isParam) throw Error('wut');\n\n\t\tvar id =`id-${this._id}`;\n\n\t\treturn [\n\t\t\t`\\\\htmlId{${id}}{`,\n\t\t\tthis.toTeXString(prec, root),\n\t\t\t`}`\n\t\t].join('');\n\t}\n}","import Fun from \"./Fun\";\n\nexport default class Schema extends Fun {\n\n\tpublic readonly axiomatic: boolean;\n\tpublic readonly using: ObjectFun[];\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly context: ExecutionContext;\n\tprivate isProvedCache: boolean;\n\n\tconstructor ({doc, tex, annotations, axiomatic, name, params, context, def$s, expr}: SchemaArgumentType, trace: StackTrace) {\n\t\tif (!expr) {\n\t\t\tthrow Node.error('wut', trace);\n\t\t}\n\n\t\tsuper({doc, tex, annotations, sealed: false, type: null, name, params, expr}, trace);\n\t\t\n\t\tthis.axiomatic = axiomatic;\n\t\tthis.def$s = def$s || [];\n\t\tthis.context = context;\n\t}\n\t\n\tpublic isProved(hyps?) {\n\t\tif (this.isProvedCache) return true;\n\n\t\tif (!hyps && typeof this.isProvedCache == 'boolean') {\n\t\t\treturn this.isProvedCache;\n\t\t}\n\n\t\tvar cache = !hyps;\n\t\thyps = hyps || [];\n\t\t\n\t\tvar ret = this.axiomatic || super.isProved(hyps);\n\t\tif (cache) this.isProvedCache = ret;\n\t\treturn ret;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 최상단에만 선언되므로 치환되어야 할 것을 포함하지 않으므로 확인하지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new Schema({\n\t\t\tannotations: this.annotations,\n\t\t\taxiomatic: this.axiomatic,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tcontext: this.context,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new Schema({\n\t\t\tannotations: this.annotations,\n\t\t\taxiomatic: this.axiomatic,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tcontext: this.context,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic isCallable(_context: ExecutionContext): boolean {\n\t\treturn true;\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn [\n\t\t\t`∫ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.expandMeta(true).toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\t\t\n\t\tvar id = `schema-${this.isProved() ? 'p' : 'np'}-${this.name}`;\n\t\n\t\tif (!root)\n\t\t\treturn `\\\\href{#${id}}\\\\mathsf{${Node.escapeTeX(this.name)}}`;\n\t\n\t\treturn `\\\\href{#${id}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}\\\\mathord{\\\\left(${this.params.map(e => e.toTeXStringWithId(Node.PREC_COMMA) + (e.selector ? `: \\\\texttt{@${e.selector}}` : '')).join(', ')}\\\\right)}:\\\\\\\\\\\\quad`\n\t\t\t\t+ this.expr.expandMeta(true).toTeXString(true);\n\t}\n}\n\nimport $Variable from \"./$Variable\";\nimport Expr0 from \"./Expr0\";\nimport Metaexpr from \"./Metaexpr\";\nimport Node, { Precedence } from \"./Node\";\nimport ObjectType from \"./ObjectType\";\nimport Variable from \"./Variable\";\nimport ObjectFun from \"./ObjectFun\";\nimport StackTrace from \"../StackTrace\";\nimport ExecutionContext from \"../ExecutionContext\";\n\ninterface SchemaArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\tannotations: string[];\n\taxiomatic: boolean;\n\tname?: string;\n\tparams: Variable[];\n\tcontext: ExecutionContext;\n\tdef$s: $Variable[];\n\texpr: Metaexpr;\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Expr0 from './Expr0';\nimport Fun from './Fun';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport { isNameable } from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectFun from './ObjectFun';\nimport ObjectType from './ObjectType';\nimport Schema from './Schema';\nimport Variable from './Variable';\n\ninterface FuncallArgumentType {\n\tfun: Metaexpr;\n\targs: Expr0[];\n}\n\nexport default class Funcall extends Expr0 {\n\t\n\tpublic readonly fun: Metaexpr;\n\tpublic readonly args: Expr0[];\n\n\tconstructor ({fun, args}: FuncallArgumentType, trace: StackTrace) {\n\t\tif (fun.type.isSimple) {\n\t\t\tvar name = isNameable(fun) ? fun.name : '<anonymous>';\n\t\t\tthrow Node.error(`${name} is not callable`, trace);\n\t\t}\n\n\t\tif (!(args instanceof Array) || args.map(e => e instanceof Node).some(e => !e))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t\t \n\t\tvar resolvedType = fun.type.resolve() as ObjectType | MetaType,\n\t\t\tparamTypes = resolvedType.from,\n\t\t\targTypes = args.map(e => e.type);\n\n\t\tif (paramTypes.length != argTypes.length)\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(argTypes[i])) {\n\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t}\n\t\t}\n\n\t\tsuper(trace, null, null, resolvedType.to);\n\t\t\n\t\tthis.fun = fun;\n\t\tthis.args = args;\n\t}\n\n\tpublic isProved(hyps?) {\n\t\thyps = hyps || [];\n\t\n\t\treturn super.isProved(hyps) || this.fun.isProved(hyps);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn new Funcall({\n\t\t\tfun: this.fun.substitute(map),\n\t\t\targs: this.args.map(arg => arg.substitute(map))\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tvar fun = this.fun.expandMeta(andFuncalls),\n\t\t\targs = this.args.map(arg => arg.expandMeta(andFuncalls));\n\t\t\n\t\tif (!(fun instanceof Fun) || !fun.expr || fun.name && !(fun instanceof Schema))\n\t\t\treturn new Funcall({fun, args}, this.trace);\n\n\t\treturn fun.call(args).expandMeta(andFuncalls);\n\t}\n\n\tpublic isExpandable(context: ExecutionContext): boolean {\n\t\tvar callee: Metaexpr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\treturn callee.isExpandable(context);\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) return false;\n\n\t\treturn callee.isCallable(context);\n\t}\n\t\n\tpublic expandOnce(context: ExecutionContext): Metaexpr {\n\t\tif (!this.isExpandable(context)) {\n\t\t\tthrow Error('Cannot expand');\n\t\t}\n\n\t\tvar callee: Metaexpr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\treturn new Funcall({\n\t\t\t\tfun: callee.expandOnce(context),\n\t\t\t\targs: this.args\n\t\t\t}, this.trace);\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\treturn callee.call(this.args);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.THREE;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (!(obj instanceof Funcall)) {\n\t\t\tif (!this.isExpandable(context)) return false;\n\n\t\t\treturn this.expandOnce(context).equals(obj, context);\n\t\t}\n\n\t\tif (this.fun == obj.fun || this.fun.equals(obj.fun, context)) {\n\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\tif (!this.args[i].equals(obj.args[i], context)) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.fun instanceof Funcall && this.fun.isExpandable(context)) {\n\t\t\treturn this.expandOnce(context).equals(obj, context);\n\t\t}\n\n\t\tif (obj.fun instanceof Funcall && obj.fun.isExpandable(context)) {\n\t\t\treturn this.equals(obj.expandOnce(context), context);\n\t\t}\n\n\t\tvar thisIsExpandable = this.isExpandable(context),\n\t\t\tobjIsExpandable = obj.isExpandable(context);\n\t\t\n\t\tif (this.fun == obj.fun || !thisIsExpandable && !objIsExpandable) {\n\t\t\tif (this.fun != obj.fun) return false;\n\n\t\t\tif (!thisIsExpandable && !objIsExpandable) {\n\t\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\t\tif (!this.args[i].equals(obj.args[i], context)) return false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (this.args.every((_, i) => {\n\t\t\t\treturn this.args[i].equals(obj.args[i], context);\n\t\t\t})) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (thisIsExpandable) {\n\t\t\treturn this.expandOnce(context).equals(obj, context);\n\t\t}\n\n\t\treturn this.equals(obj.expandOnce(context), context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\n\t\tif (hypnumMap.has(this.fun)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RC',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: hypnumMap.get(this.fun),\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif ($Map.has(this.fun)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RC',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: $Map.get(this.fun),\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (this.fun instanceof Schema && this.fun.name) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RCX',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (!(this.fun instanceof Schema)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'NP',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tvar schemalines = this.fun.getProof(hypnumMap, $Map, ctr);\n\n\t\treturn [\n\t\t\t...schemalines,\n\t\t\t{\n\t\t\t\t_type: 'RC',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: schemalines[schemalines.length - 1].ctr,\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}\n\t\t];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar args: any = this.args.map(arg => {\n\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (args.join('').length <= 50) {\n\t\t\targs = this.args.map(arg => {\n\t\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\targs = args.join(', ');\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn `${this.fun.name || `(${this.fun})`}(${args})`;\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t!(this.fun instanceof Fun) || !this.fun.name\n\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t: this.fun.name,\n\t\t\t\t\t`(${args})`\n\t\t\t\t].join('');\n\t\t\t}\n\t\t} else {\n\t\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn [\n\t\t\t\t\tthis.fun.name || `(${this.fun.toIndentedString(indent)})`,\n\t\t\t\t\t'(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t(\n\t\t\t\t\t\t!(this.fun instanceof Fun) || !('name' in this.fun && this.fun.name)\n\t\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t\t: this.fun.name\n\t\t\t\t\t) + '(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (this.fun instanceof Schema) {\n\t\t\treturn (\n\t\t\t\tthis.fun.name\n\t\t\t\t\t? `\\\\href{#schema-${this.fun.isProved() ? 'p' : 'np'}-${this.fun.name}}{\\\\textsf{${Node.escapeTeX(this.fun.name)}}}`\n\t\t\t\t\t: this.fun.toTeXString(false)\n\t\t\t) + `\\\\mathord{\\\\left(${this.args.map(arg => {\n\t\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\n\t\t\t}).join(', ')}\\\\right)}`;\n\t\t}\n\n\t\tif (this.fun instanceof ObjectFun)\n\t\t\treturn this.fun.funcallToTeXString(this.args, prec);\n\t\t\n\t\tvar args = this.args.map(arg => {\n\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\n\t\t});\n\n\t\treturn (\n\t\t\t!(isNameable(this.fun) && this.fun.name) || this.fun instanceof Variable\n\t\t\t\t? this.fun.toTeXString(false)\n\t\t\t\t: this.fun.name.length == 1\n\t\t\t\t\t? Node.escapeTeX(this.fun.name)\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.fun.name)}}`\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}","import Metaexpr from \"./Metaexpr\";\n\nexport default abstract class Expr0 extends Metaexpr {\n\t\n}","import Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Type from './Type';\n\ninterface SimpleMetaTypeArgumentType {\n\tfunctional: false;\n\tleft: Type[];\n\tright: Type;\n}\n\ninterface FunctionalMetaTypeArgumentType {\n\tfunctional: true;\n\tfrom: ObjectType[];\n\tto: MetaType;\n}\n\ntype MetaTypeArgumentType = SimpleMetaTypeArgumentType | FunctionalMetaTypeArgumentType;\n\nexport default class MetaType extends Type {\n\t\n\tpublic readonly left: Type[];\n\tpublic readonly right: Type;\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: MetaType;\n\n\tconstructor (o: MetaTypeArgumentType) {\n\t\tsuper(null, null, null, o.functional);\n\n\t\tif (typeof o.functional != 'boolean')\n\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\n\n\t\tif (o.functional == false) {\n\t\t\tif (!(o.left instanceof Array))\n\t\t\t\tthrow Node.error('left should be an array', null);\n\n\t\t\tthis.left = o.left;\n\t\t\tthis.right = o.right;\n\t\t} else {\n\t\t\tif (o.from.some(f => !(f instanceof ObjectType)))\n\t\t\t\tthrow Node.error('o.from.some(f => !(f instanceof ObjectType))', null);\n\t\t\tif (!(o.to instanceof MetaType))\n\t\t\t\tthrow Node.error('!(o.to instanceof MetaType)', null);\n\n\t\t\tif (o.to.isFunctional)\n\t\t\t\tthrow Node.error('Functional metatype in functional metatype is not supported', null);\n\n\t\t\tthis.from = o.from;\n\t\t\tthis.to = o.to;\n\t\t}\n\t}\n\n\tpublic resolve(): MetaType {\n\t\treturn this;\n\t}\n\n\tpublic toIndentedString(indent: number) {\n\t\tif (this.isSimple) return `[${this.left.join(', ')} |- ${this.right}]`;\n\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tpublic equals(t: Type): boolean {\n\t\tif (!(t instanceof MetaType)) return false;\n\n\t\tif (this.isSimple != t.isSimple) return false;\n\n\t\tif (this.isSimple) {\n\t\t\tif (this.left.length != t.left.length) return false;\n\n\t\t\tfor (let i = 0; i < this.left.length; i++) {\n\t\t\t\tif (!this.left[i].equals(t.left[i])) return false;\n\t\t\t}\n\n\t\t\tif (!this.right.equals(t.right)) return false;\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.from.length != t.from.length) return false;\n\n\t\tfor (let i = 0; i < this.from.length; i++)\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\n\n\t\treturn this.to.equals(t.to);\n\t}\n}","import ExecutionContext from \"../ExecutionContext\";\nimport StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Fun from \"./Fun\";\nimport Metaexpr from \"./Metaexpr\";\nimport Node, { Precedence } from \"./Node\";\nimport ObjectType from \"./ObjectType\";\nimport Type from \"./Type\";\nimport Variable from \"./Variable\";\n\ninterface ObjectFunArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\tannotations: string[];\n\tsealed: boolean;\n\ttype?: Type;\n\tname?: string;\n\tparams: Variable[];\n\texpr?: Expr0;\n}\n\nexport default class ObjectFun extends Fun {\n\t\n\tconstructor ({doc, tex, annotations, sealed, type, name, params, expr}: ObjectFunArgumentType, trace: StackTrace) {\n\t\tsuper({doc, tex, annotations, sealed, type, name, params, expr}, trace);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 최상단에만 선언되므로 치환되어야 할 것을 포함하지 않으므로 확인하지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new ObjectFun({\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new ObjectFun({\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic isCallable(context: ExecutionContext): boolean {\n\t\treturn this.expr && (!this.sealed || context.canUse(this));\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (this.name) return this.name;\n\t\t\n\t\treturn [\n\t\t\t`ƒ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\n\t\tif (!root)\n\t\t\treturn `\\\\href{#def-${this.name}}\\\\mathrm{${Node.escapeTeX(this.name)}}`;\n\t\n\t\tif (!this.expr)\n\t\t\treturn this.funcallToTeXString(this.params, prec);\n\t\n\t\treturn this.funcallToTeXString(this.params, Node.PREC_COLONEQQ)\n\t\t\t\t+ `\\\\coloneqq ${this.expr.toTeXString(Node.PREC_COLONEQQ)}`;\n\t}\n\n\tpublic funcallToTeXString(args, prec) {\n\t\targs = args.map(arg => {\n\t\t\treturn arg.toTeXString(this.tex ? this.precedence : Node.PREC_COMMA);\n\t\t});\n\t\n\t\tif (this.tex) {\n\t\t\treturn this.makeTeX('def-' + this.name, args, prec);\n\t\t}\n\t\n\t\treturn (\n\t\t\t!this.name\n\t\t\t\t? this.toTeXString(false)\n\t\t\t\t: `\\\\href{#def-${this.name}}{${this.name.length == 1 ? Node.escapeTeX(this.name) : `\\\\mathrm{${Node.escapeTeX(this.name)}}`}}`\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}","import StackTrace from \"../StackTrace\";\nimport Node from \"./Node\";\n\nexport default abstract class Type extends Node {\n\tpublic readonly isFunctional: boolean;\n\tpublic readonly isSimple: boolean;\n\t\n\tpublic abstract equals(t: Type): boolean;\n\n\tconstructor (trace: StackTrace, doc: string, tex: string, isFunctional: boolean) {\n\t\tsuper(trace, doc, tex);\n\t\tthis.isFunctional = isFunctional;\n\t\tthis.isSimple = !isFunctional;\n\t}\n\n\tpublic abstract resolve(): Type;\n}","export default interface Nameable {\n\tname: string;\n}\n\nexport function isNameable(obj: object): obj is Nameable {\n\treturn 'name' in obj;\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Expr0 from './Expr0';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Variable from './Variable';\n\ninterface TeeArgumentType {\n\tleft: Metaexpr[];\n\tdef$s?: $Variable[];\n\tright: Metaexpr;\n}\n\nexport default class Tee extends Metaexpr {\n\n\tpublic readonly left: Metaexpr[];\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly right: Metaexpr;\n\n\tconstructor ({left, def$s, right}: TeeArgumentType, trace: StackTrace) {\n\t\tif (!(left instanceof Array\n\t\t\t\t&& left.every(l => {\n\t\t\t\t\treturn l.type instanceof ObjectType\n\t\t\t\t\t\t|| l.type instanceof MetaType;\n\t\t\t\t}))) {\n\t\t\tconsole.log(left);\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tif (def$s && !(def$s instanceof Array && def$s.every($ => $ instanceof $Variable)))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\n\t\tif (!(right.type instanceof ObjectType || right.type instanceof MetaType)) {\n\t\t\tconsole.log(right);\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tif (right.type.isFunctional) {\n\t\t\tthrow Node.error('RHS of a rule cannot be a schema', trace);\n\t\t}\n\n\t\tsuper(trace, null, null, new MetaType({\n\t\t\tfunctional: false,\n\t\t\tleft: left.map(e => e.type),\n\t\t\tright: right.type\n\t\t}));\n\n\t\tthis.left = left;\n\t\tthis.def$s = def$s || [];\n\t\tthis.right = right;\n\t\tthis.precedence = Node.PREC_COMMA;\n\t}\n\n\tpublic isProved(hyps?) {\n\t\thyps = hyps || [];\n\t\n\t\treturn super.isProved(hyps) || this.right.isProved(hyps.concat(this.left));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tvar left = this.left.map(e => e.substitute(map));\n\t\tvar right = this.right.substitute(map);\n\n\t\treturn new Tee({\n\t\t\tleft, right\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tvar left = this.left.map(lef => lef.expandMeta(andFuncalls));\n\t\tvar right = this.right.expandMeta(andFuncalls);\n\n\t\treturn new Tee({left, right}, this.trace);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.TWO;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (!(obj instanceof Tee)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tif (this.left.length != obj.left.length) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tfor (var i = 0; i < this.left.length; i++) {\n\t\t\tif (!this.left[i].equals(obj.left[i], context)) return false;\n\t\t}\n\n\t\treturn this.right.equals(obj.right, context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\thypnumMap = new Map(hypnumMap);\n\t\tvar leftlines: ProofType[] = [];\n\n\t\tvar start = ctr.peek() + 1;\n\n\t\tthis.left.forEach(l => {\n\t\t\thypnumMap.set(l, ctr.next());\n\t\t\tleftlines.push({\n\t\t\t\t_type: 'H',\n\t\t\t\tctr: ctr.peek(),\n\t\t\t\texpr: l\n\t\t\t});\n\t\t});\n\n\t\t$Map = new Map($Map);\n\n\t\tvar $lines: ProofType[] = [];\n\t\tthis.def$s.forEach($ => {\n\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\t$lines = $lines.concat(lines);\n\n\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t$Map.set($, $num);\n\t\t});\n\n\t\treturn [{\n\t\t\t_type: 'T',\n\t\t\tleftlines: leftlines as any,\n\t\t\t$lines,\n\t\t\trightlines: this.right.getProof(hypnumMap, $Map, ctr),\n\t\t\tctr: [start, ctr.peek()]\n\t\t}];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (!this.left.length) {\n\t\t\treturn '|- ' + this.right.toIndentedString(indent);\n\t\t}\n\t\n\t\treturn [\n\t\t\t'\\t' + this.left.map(e => e.toIndentedString(indent + 1)).join(',\\n' + '\\t'.repeat(indent + 1)),\n\t\t\t'|-',\n\t\t\t'\\t' + this.right.toIndentedString(indent + 1)\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar expanded = this.expandMeta(true) as Tee;\n\n\t\treturn [\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\t\t\t`{${expanded.left.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')} \\\\vdash ${expanded.right.toTeXString(Node.PREC_COMMA)}}`,\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t].join('');\n\t}\n}","var grammar;\n\nif (process.env.__webpack__) {\n\tgrammar = require('raw-loader!./grammar.pegjs').default;\n} else {\n\tvar fs = require('fs');\n\tvar path = require('path');\n\n\tgrammar = fs.readFileSync(path.join(__dirname, 'grammar.pegjs'), 'utf-8');\n}\n\nvar Program = require('./Program').default;\n\nmodule.exports = {grammar, Program};","export default \"start =\\n\\t_ lines:(a:line _ {return a})* {return lines}\\n\\nline =\\n\\timport\\n\\t/ typedef\\n\\t/ defv\\n\\t/ defun\\n\\t/ defschema\\n\\nevaluable =\\n\\t_ e:evaluable_internal _ {return e}\\n\\nevaluable_internal =\\n\\ttypedef\\n\\t/ defv\\n\\t/ defun\\n\\t/ defschema\\n\\t/ metaexpr\\n\\nimport =\\n\\t'import' __\\n\\tfilename:ident _\\n\\tsem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'import',\\n\\t\\t\\tfilename,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ntypedef =\\n\\tdoc:(documentation __)?\\n\\tbase:(\\\"base\\\" __)?\\n\\t\\\"type\\\" __\\n\\torigin:(o:ftype __ {return o})?\\n\\tname:ident _ sem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'typedef',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\tbase: !!base,\\n\\t\\t\\torigin,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefv =\\n\\tdoc:(documentation __)? tex:(tex __)? type:type __ name:ident _ sem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: false,\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefparam =\\n\\ttex:(tex __)? type:type __ name:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: true,\\n\\t\\t\\tdoc: null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefschemaparam =\\n\\ttex:(tex __)? type:type __ name:ident\\n\\tselector:(_ ':' _ '@' g:$[a-z0-9_]+ {return g})?\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: true,\\n\\t\\t\\tdoc: null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\tselector,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n \\ndefun =\\n\\tdoc:(documentation __)?\\n\\ttex:(tex __)?\\n\\tsealed:('sealed' __)?\\n\\trettype:type __\\n\\tname:ident _\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\texpr:(\\n\\t\\t\\\"{\\\" _\\n\\t\\texpr:expr0 _\\n\\t\\t\\\"}\\\"\\n\\t\\t{return expr}\\n\\t\\t/ sem {return null}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defun',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\tsealed: !!sealed,\\n\\t\\t\\trettype,\\n\\t\\t\\tname,\\n\\t\\t\\tparams,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefschema =\\n\\tdoc:(documentation __)?\\n\\tannotations: (a:annotation __ {return a})*\\n\\taxiomatic:(\\\"axiomatic\\\" __)?\\n\\t\\\"schema\\\" __\\n\\tname:ident _\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defschemaparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defschemaparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\tusing:(\\n\\t\\t'using' __\\n\\t\\tx:(\\n\\t\\t\\thead:ident _\\n\\t\\t\\ttail:(',' _ n:ident _ {return n})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)\\n\\t\\t{return x}\\n\\t)?\\n\\t\\\"{\\\" _\\n\\tdefdollars: (d:defdollar _ {return d})* _\\n\\texpr:metaexpr _\\n\\t\\\"}\\\"\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defschema',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\tannotations,\\n\\t\\t\\taxiomatic: !!axiomatic,\\n\\t\\t\\tname,\\n\\t\\t\\tparams,\\n\\t\\t\\tusing: using || [],\\n\\t\\t\\tdef$s: defdollars,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// var[...]\\n// foo(...)[...]\\n// foo[...][...]\\n// (metaexpr)[...]\\n// schema(?, ...)[...]\\nreduction =\\n\\tsubject:(\\n\\t\\tschemacall\\n\\t\\t/ var\\n\\t\\t/ \\\"(\\\" _\\n\\t\\te:metaexpr _\\n\\t\\t\\\")\\\"\\n\\t\\t{return e}\\n\\t) _\\n\\targs:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:('?' {return null} / expr0) _\\n\\t\\t\\ttail:(\\\",\\\" _ e:('?' {return null} / expr0) _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)?\\n\\tleftargs:(\\n\\t\\t\\\"[\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:metaexpr _\\n\\t\\t\\ttail:(\\\";\\\" _ e:metaexpr _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\"]\\\"\\n\\t\\tb:(\\n\\t\\t\\t_ '[' _\\n\\t\\t\\t'as' __\\n\\t\\t\\tm:metaexpr\\n\\t\\t\\t']'\\n\\t\\t\\t{return m}\\n\\t\\t)?\\n\\t\\t{return {a: a || [], b: b || null}}\\n\\t)+\\n\\t{\\n\\t\\tvar ret = {\\n\\t\\t\\t_type: 'reduction',\\n\\t\\t\\tsubject,\\n\\t\\t\\targs,\\n\\t\\t\\tleftargs: leftargs[0].a,\\n\\t\\t\\tas: leftargs[0].b,\\n\\t\\t\\tlocation: location()\\n\\t\\t};\\n\\n\\t\\tfor (var i = 1; i < leftargs.length; i++) {\\n\\t\\t\\tret = {\\n\\t\\t\\t\\t_type: 'reduction',\\n\\t\\t\\t\\tsubject: ret,\\n\\t\\t\\t\\targs: null,\\n\\t\\t\\t\\tleftargs: leftargs[i].a,\\n\\t\\t\\t\\tas: leftargs[i].b,\\n\\t\\t\\t\\tlocation: location()\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t}\\n\\n// var(...)\\n// (metaexpr)(...)\\nschemacall =\\n\\tschema:(\\n\\t\\tvar\\n\\t\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\"\\n\\t\\t{return e}\\n\\t) _\\n\\targs:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:expr0 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'schemacall',\\n\\t\\t\\tschema,\\n\\t\\t\\targs,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// forall(f, g)\\n// (expr0)(f, g)\\nfuncall =\\n\\tschema:(\\n\\t\\tvar\\n\\t\\t/ \\\"(\\\" _\\n\\t\\te:expr0 _\\n\\t\\t\\\")\\\"\\n\\t\\t{return e}\\n\\t) _\\n\\targs:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:expr0 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'funcall',\\n\\t\\t\\tschema,\\n\\t\\t\\targs,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// (T t) => expr0\\n// (T t) => { expr0 }\\nfunexpr =\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\t\\\"=>\\\" _\\n\\texpr:(\\n\\t\\texpr0\\n\\t\\t/ \\\"{\\\" _ e:expr0 _ \\\"}\\\" {return e}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'funexpr',\\n\\t\\t\\tparams,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// (T t) => metaexpr_internal_1\\n// (T t) => { $foo = ...; metaexpr }\\nschemaexpr =\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\t\\\"=>\\\" _\\n\\tfoo:(\\n\\t\\texpr:metaexpr_internal_1\\n\\t\\t{return {defdollars: [], expr}}\\n\\t\\t/ \\\"{\\\" _\\n\\t\\tdefdollars: (d:defdollar _ {return d})* _\\n\\t\\texpr:metaexpr _\\n\\t\\t\\\"}\\\"\\n\\t\\t{return {defdollars, expr}}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'schemaexpr',\\n\\t\\t\\tparams,\\n\\t\\t\\tdef$s: foo.defdollars,\\n\\t\\t\\texpr: foo.expr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nmetaexpr =\\n\\tleft:(\\n\\t\\tl:(\\n\\t\\t\\thead:metaexpr_internal_1 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:metaexpr_internal_1 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)? {return l || []}\\n\\t)\\n\\t\\\"|-\\\" _\\n\\tdefdollars: (d:defdollar _ {return d})* _\\n\\tright:metaexpr\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'tee',\\n\\t\\t\\tdef$s: defdollars,\\n\\t\\t\\tleft,\\n\\t\\t\\tright,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\t/ metaexpr_internal_1\\n\\n/*\\n * 다음이 성립하여야 한다.\\n *\\n * - reduction이 schemacall보다 앞이다.\\n * - schemacall이 var보다 앞이다.\\n *\\n */\\nmetaexpr_internal_1 =\\n\\treduction\\n\\t/ schemacall\\n\\t/ var\\n\\t/ schemaexpr\\n\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\" {return e}\\n\\nexpr0 =\\n\\tfuncall\\n\\t/ funexpr\\n\\t/ var\\n\\t/ \\\"(\\\" _ e:expr0 _ \\\")\\\" {return e}\\n\\ndefdollar =\\n\\tname:dollar_ident _\\n\\t'=' _\\n\\texpr:metaexpr _\\n\\tsem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'def$',\\n\\t\\t\\tname,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t};\\n\\t}\\n\\ntype =\\n\\tstype\\n\\t/ ftype\\n\\nstype =\\n\\tname:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'type',\\n\\t\\t\\tftype: false,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nftype =\\n\\t\\\"[\\\" _\\n\\tfrom:(\\n\\t\\ttype:type {return [type]}\\n\\t\\t/ (\\n\\t\\t\\ttt:(\\n\\t\\t\\t\\t\\\"(\\\" _\\n\\t\\t\\t\\thead: type\\n\\t\\t\\t\\ttail:(_ \\\",\\\" _ t:type {return t})*\\n\\t\\t\\t\\t_ \\\")\\\"\\n\\t\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t\\t)\\n\\t\\t\\t{return tt}\\n\\t\\t)\\n\\t) _\\n\\t\\\"->\\\" _\\n\\tto:type _\\n\\t\\\"]\\\"\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'type',\\n\\t\\t\\tftype: true,\\n\\t\\t\\tfrom,\\n\\t\\t\\tto,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nvar =\\n\\tat_var\\n\\t/ dollar_var\\n\\t/ plain_var\\n\\nat_var =\\n\\tname:at_ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: '@',\\n\\t\\t\\tname: name.slice(1),\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndollar_var =\\n\\tname:dollar_ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: '$',\\n\\t\\t\\tname: name,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nplain_var =\\n\\tname:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: 'normal',\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nkeyword =\\n\\t'as'\\n\\t/ 'axiomatic'\\n\\t/ 'base'\\n\\t/ 'import'\\n\\t/ 'schema'\\n\\t/ 'sealed'\\n\\t/ 'type'\\n\\t/ 'using'\\n\\nannotation =\\n\\t'@discouraged'\\n\\t/ '@deprecated'\\n\\nident =\\n\\t$(!(keyword ![a-zA-Z0-9_]) [a-zA-Z0-9_]+)\\n\\nat_ident =\\n\\t$('@' [a-zA-Z0-9_]+)\\n\\ndollar_ident =\\n\\t$('$' [a-zA-Z0-9_]+)\\n\\ndocumentation =\\n\\t'\\\"' b:$(!'\\\"' a:. {return a})* '\\\"' {\\n\\t\\treturn b\\n\\t}\\n\\ntex =\\n\\t'$' b:$(!'$' a:. {return a})* '$' {\\n\\t\\treturn b\\n\\t}\\n\\ncomment =\\n\\t\\\"#\\\" (!newline .)*\\n\\t/ \\\"//\\\" (!newline .)*\\n\\t/ \\\"/*\\\" (!\\\"*/\\\" .)* \\\"*/\\\"\\n\\nnewline =\\n\\t\\\"\\\\r\\\\n\\\" / \\\"\\\\r\\\" / \\\"\\\\n\\\"\\n\\n// optional whitespace\\n_ =\\n\\t([ \\\\t\\\\n\\\\r] / comment)*\\n\\n// mandatory whitespace\\n__ =\\n\\t([ \\\\t\\\\n\\\\r] / comment)+\\n\\nsem =\\n\\t\\\";\\\"\";","import PegInterface from './PegInterface';\nimport { EvaluableObject, LineObject } from './PegInterfaceDefinitions';\nimport ProofExplorer from './ProofExplorer';\nimport Scope from './Scope';\n\ninterface LoaderReturnType {\n\tfileUri?: string;\n\tcode: string;\n}\n\ntype LoaderType = (packageName: string) => (LoaderReturnType | Promise<LoaderReturnType>);\n\nexport default class Program {\n\tpublic scope: Scope;\n\tpublic readonly parser;\n\tpublic readonly scopeMap: Map<string, Scope> = new Map();\n\t\n\tconstructor (parser) {\n\t\tif (!parser) throw Error('no');\n\t\tthis.parser = parser;\n\t}\n\n\tpublic async loadModule(filename: string, loader: LoaderType): Promise<Scope> {\n\t\treturn this.scope = await this.loadModuleInternal(filename, loader);\n\t}\n\n\tprivate async loadModuleInternal(filename: string, loader: LoaderType): Promise<Scope> {\n\t\tif (this.scopeMap.has(filename)) {\n\t\t\treturn this.scopeMap.get(filename);\n\t\t}\n\n\t\tvar {fileUri, code} = await loader(filename);\n\n\t\tvar scope = new Scope(fileUri, null);\n\t\tvar parsed = this.parser.parse(code);\n\n\t\tawait this.feed(parsed, scope, loader);\n\n\t\tthis.scopeMap.set(filename, scope);\n\t\treturn scope;\n\t}\n\n\tpublic async feed(lines: LineObject[], scope: Scope=this.scope, loader) {\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tvar line = lines[i];\n\t\t\t\n\t\t\tswitch (line._type) {\n\t\t\t\tcase 'import':\n\t\t\t\t\tvar scope2 = await this.loadModuleInternal(line.filename, loader);\n\t\t\t\t\tscope.importMap.set(line.filename, scope2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'typedef':\n\t\t\t\t\tvar type = PegInterface.type(line, scope);\n\n\t\t\t\t\tif (scope.hasType(type.name)) {\n\t\t\t\t\t\tthrow scope.error(`Type ${type.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addType(type);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defv':\n\t\t\t\t\tvar variable = PegInterface.variable(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(variable.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${variable.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addVariable(variable);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defun':\n\t\t\t\t\tvar fun = PegInterface.fun(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(fun.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${fun.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addFun(fun);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defschema':\n\t\t\t\t\tvar schema = PegInterface.schema(line, scope, null);\n\n\t\t\t\t\tif (scope.hasSchema(schema.name)) {\n\t\t\t\t\t\tthrow scope.error(`Schema ${schema.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addSchema(schema);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic evaluate(line: EvaluableObject) {\n\t\tvar scope = new Scope('<repl>', this.scope);\n\n\t\tswitch (line._type) {\n\t\t\tcase 'typedef':\n\t\t\t\treturn PegInterface.type(line, scope);\n\t\t\tcase 'defv':\n\t\t\t\treturn PegInterface.variable(line, scope);\n\t\t\tcase 'defun':\n\t\t\t\treturn PegInterface.fun(line, scope);\n\t\t\tcase 'defschema':\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PegInterface.schema(line, scope, null);\n\t\t\tcase 'tee':\n\t\t\t\treturn PegInterface.tee(line, scope, null);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PegInterface.reduction(line, scope, null);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PegInterface.schemacall(line, scope, null);\n\t\t\tcase 'var':\n\t\t\t\treturn PegInterface.metavar(line, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t}\n\t}\n\n\tpublic getProofExplorer(name: string, ktx) {\n\t\treturn ProofExplorer.get(this.scope, name, ktx);\n\t}\n}","/*\n * PEG.js의 출력과 적절한 클래스 사이를 잇는 인터페이스.\n * PEG.js의 출력은 여기에서만 처리해야 한다.\n */\n\nimport ExecutionContext from './ExecutionContext';\nimport $Variable from './nodes/$Variable';\nimport Expr0 from './nodes/Expr0';\nimport Fun from './nodes/Fun';\nimport Funcall from './nodes/Funcall';\nimport Metaexpr from './nodes/Metaexpr';\nimport ObjectFun from './nodes/ObjectFun';\nimport ObjectType from './nodes/ObjectType';\nimport Reduction from './nodes/Reduction';\nimport Schema from './nodes/Schema';\nimport Tee from './nodes/Tee';\nimport Variable from './nodes/Variable';\nimport { Def$Object, DefschemaObject, DefunObject, DefvObject, Expr0Object, FuncallObject, FunexprObject, MetaexprObject, ReductionObject, SchemacallObject, SchemaexprObject, StypeObject, TeeObject, TypedefObject, TypeObject, VarObject } from './PegInterfaceDefinitions';\nimport Scope, { NestedTypeInput } from './Scope';\n\nfunction typeObjToString(obj: TypeObject): string {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) return (obj as StypeObject).name;\n\treturn '[' + obj.from.map(typeObjToString).join(', ') + ' -> '\n\t\t\t+ typeObjToString(obj.to) + ']';\n}\n\n/*\n * Scope#getType이나 Scope#hasType 등의 입력 형태로 바꾼다.\n * st\t\t\t\t\t\t-> 'st'\n * [cls -> st]\t\t\t\t-> ['cls', 'st']\n * [(cls, cls) -> st]\t\t-> ['cls', 'cls', 'st']\n * [[cls -> st] -> st]\t\t-> [['cls', 'st'], 'st']\n */\nfunction typeObjToNestedArr(obj: TypeObject): NestedTypeInput {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) {\n\t\tobj = obj as StypeObject;\n\n\t\tif (!obj.name)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.name;\n\t} else {\n\t\tif (!obj.from || !obj.to)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.from.map(typeObjToNestedArr).concat(\n\t\t\t[typeObjToNestedArr(obj.to)]\n\t\t);\n\t}\n}\n\nfunction varObjToString(obj: VarObject): string {\n\tswitch (obj.type) {\n\t\tcase '@':\n\t\t\treturn `@${obj.name}`;\n\t\tcase '$':\n\t\t\treturn `${obj.name}`;\n\t\tcase 'normal':\n\t\t\treturn `${obj.name}`;\n\t\tdefault:\n\t\t\tthrow Error(`Unknown type ${obj.type}`);\n\t}\n}\n\nexport default class PI {\n\tpublic static type(obj: TypedefObject, parentScope: Scope): ObjectType {\n\t\tif (obj._type != 'typedef')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope: Scope = parentScope.extend('type', obj.name, obj.location);\n\n\t\tvar origin: ObjectType = obj.origin ? scope.getType(typeObjToNestedArr(obj.origin)) : null;\n\n\t\tvar name: string = obj.name;\n\t\tvar doc: string = obj.doc;\n\t\tvar base: boolean = obj.base;\n\n\t\tif (base && origin) {\n\t\t\tthrow scope.error('Base type should not be an alias');\n\t\t}\n\n\t\tif (origin) {\n\t\t\treturn new ObjectType({\n\t\t\t\tname,\n\t\t\t\tdoc,\n\t\t\t\tbase,\n\t\t\t\torigin\n\t\t\t});\n\t\t}\n\n\t\treturn new ObjectType({\n\t\t\tfunctional: false,\n\t\t\tname,\n\t\t\tdoc,\n\t\t\tbase\n\t\t});\n\t}\n\n\tpublic static variable(obj: DefvObject | VarObject, parentScope: Scope): Variable | Fun {\n\t\tif (!['defv', 'var'].includes(obj._type)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tvar scope = parentScope.extend('variable', obj.name, obj.location);\n\n\t\tif (obj._type == 'var') {\n\t\t\tif (obj.type != 'normal') {\n\t\t\t\tthrow scope.error(`Variable type ${obj.type} not allowed`);\n\t\t\t}\n\n\t\t\tif (!scope.hasVariable(obj.name))\n\t\t\t\tthrow scope.error(`Undefined identifier ${varObjToString(obj)}`);\n\t\t\treturn scope.getVariable(obj.name);\n\t\t}\n\n\t\tif (!scope.hasType(typeObjToNestedArr(obj.type)))\n\t\t\tthrow scope.error(`Type ${typeObjToString(obj.type)} is not defined`);\n\n\t\tvar type = scope.getType(typeObjToNestedArr(obj.type));\n\n\t\treturn new Variable({\n\t\t\ttype,\n\t\t\tisParam: !!obj.isParam,\n\t\t\tselector: obj.selector || null,\n\t\t\tname: obj.name,\n\t\t\tdoc: obj.doc,\n\t\t\ttex: obj.tex\n\t\t}, scope.trace);\n\t}\n\n\tpublic static fun(obj: DefunObject | FunexprObject, parentScope: Scope): ObjectFun {\n\t\tif (obj._type != 'defun' && obj._type != 'funexpr')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar name = null,\n\t\t\tdoc = null,\n\t\t\ttex = null,\n\t\t\tsealed = false;\n\n\t\tif (obj._type == 'defun') {\n\t\t\tobj = obj as DefunObject;\n\t\t\tname = obj.name;\n\t\t\tdoc = obj.doc;\n\t\t\ttex = obj.tex;\n\t\t\tsealed = obj.sealed;\n\t\t}\n\n\t\tvar scope = parentScope.extend('fun', name, obj.location);\n\n\t\tvar type = null;\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\n\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\n\t\t\treturn scope.addVariable(tv) as Variable;\n\t\t});\n\t\tvar expr = null;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'defun':\n\t\t\t\tif (!scope.hasType(typeObjToNestedArr(obj.rettype)))\n\t\t\t\t\tthrow scope.error(`Type ${typeObjToString(obj.rettype)} is not defined`);\n\n\t\t\t\tvar rettype = scope.getType(typeObjToNestedArr(obj.rettype));\n\n\t\t\t\tif (obj.expr) {\n\t\t\t\t\texpr = PI.expr0(obj.expr, scope);\n\t\t\t\t\tif (!rettype.equals(expr.type))\n\t\t\t\t\t\tthrow scope.error(`Expression type ${expr.type} failed to match the return type ${rettype} of fun ${name}`);\n\t\t\t\t} else {\n\t\t\t\t\ttype = new ObjectType({\n\t\t\t\t\t\tfunctional: true,\n\t\t\t\t\t\tfrom: params.map(variable => variable.type),\n\t\t\t\t\t\tto: rettype\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'funexpr':\n\t\t\t\texpr = PI.expr0(obj.expr, scope);\n\t\t\t\ttype = null;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\n\t\tif (!expr && sealed) {\n\t\t\tthrow scope.error('Cannot seal a primitive fun');\n\t\t}\n\n\t\treturn new ObjectFun({annotations: [], sealed, type, name, params, expr, doc, tex}, scope.trace);\n\t}\n\n\tpublic static funcall(obj: FuncallObject, parentScope: Scope): Funcall {\n\t\tif (obj._type != 'funcall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('funcall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.expr0(obj.schema, scope);\n\n\t\tvar args = obj.args.map(arg => {\n\t\t\treturn PI.expr0(arg, scope);\n\t\t});\n\n\t\treturn new Funcall({fun, args}, scope.trace);\n\t}\n\n\tpublic static metaexpr(obj: MetaexprObject, parentScope: Scope, context: ExecutionContext): Metaexpr {\n\t\tif (!['tee', 'reduction', 'schemacall', 'schemaexpr', 'var'].includes(obj._type))\n\t\t\tthrow Error('Assertion failed');\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'tee':\n\t\t\t\treturn PI.tee(obj, scope, context);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PI.reduction(obj, scope, context);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PI.schemacall(obj, scope, context);\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PI.schema(obj, scope, context);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.metavar(obj, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static expr0(obj: Expr0Object, parentScope: Scope): Expr0 {\n\t\tif (!['funcall', 'funexpr', 'var'].includes(obj._type)) {\n\t\t\tconsole.log(obj);\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'funcall':\n\t\t\t\treturn PI.funcall(obj, scope);\n\t\t\tcase 'funexpr':\n\t\t\t\treturn PI.fun(obj, scope);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.variable(obj, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static metavar(obj: VarObject, parentScope: Scope): Metaexpr {\n\t\tif (obj._type != 'var')\n\t\t\tthrow Error('Assertion failed');\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj.type) {\n\t\t\tcase '@':\n\t\t\t\tif (obj.name.match(/^h[0-9]+$/)) {\n\t\t\t\t\tvar hypnum = Number(obj.name.slice(1)) - 1;\n\t\t\t\t\tif (hypnum >= scope.hypotheses.length) {\n\t\t\t\t\t\tthrow scope.error(`Hypothesis #${hypnum + 1} not found`);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn scope.hypotheses[hypnum];\n\t\t\t\t}\n\n\t\t\t\tthrow scope.error(`Unknown selector query ${varObjToString(obj)}`);\n\t\t\tcase '$':\n\t\t\t\tif (!scope.has$(obj.name)) {\n\t\t\t\t\tthrow scope.error(`${varObjToString(obj)} is not defined`);\n\t\t\t\t}\n\n\t\t\t\treturn scope.get$(obj.name);\n\t\t\tcase 'normal':\n\t\t\t\tif (!scope.hasSchema(obj.name))\n\t\t\t\t\tthrow scope.error(`Schema ${varObjToString(obj)} is not defined`);\n\n\t\t\t\treturn scope.getSchema(obj.name);\n\t\t\tdefault:\n\t\t\t\tthrow scope.error(`Unknown type ${obj.type}`);\n\t\t}\n\t}\n\n\tpublic static tee(obj: TeeObject, parentScope: Scope, context: ExecutionContext): Tee {\n\t\tif (obj._type != 'tee')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('tee', null, obj.location);\n\n\t\tvar left = obj.left.map(o => PI.metaexpr(o, scope, context));\n\n\t\tvar scopeRight = scope.extend('tee.right', null, obj.right.location);\n\t\tleft.forEach(l => scopeRight.hypotheses.push(l));\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scopeRight, context);\n\n\t\t\tif (scopeRight.hasOwn$($v.name)) {\n\t\t\t\tthrow scopeRight.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scopeRight.add$($v);\n\t\t});\n\n\t\tvar right = PI.metaexpr(obj.right, scopeRight, context);\n\n\t\treturn new Tee({left, def$s, right}, scope.trace);\n\t}\n\n\tpublic static def$(obj: Def$Object, parentScope: Scope, context: ExecutionContext): $Variable {\n\t\tif (obj._type != 'def$')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar scope = parentScope.extend('def$', obj.name, obj.location);\n\t\t\n\t\tvar expr = PI.metaexpr(obj.expr, scope, context);\n\n\t\treturn new $Variable({name: obj.name, expr}, scope.trace);\n\t}\n\n\tpublic static schema(obj: DefschemaObject | SchemaexprObject, parentScope: Scope, oldContext: ExecutionContext): Schema {\n\t\tif (obj._type != 'defschema' && obj._type != 'schemaexpr')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar name = obj._type == 'defschema' ? obj.name : null;\n\n\t\tvar scope = parentScope.extend('schema', name, obj.location);\n\n\t\tvar axiomatic: boolean = false,\n\t\t\tdoc: string = null,\n\t\t\tannotations: string[] = [],\n\t\t\tcontext = oldContext;\n\n\t\tif (obj._type == 'defschema') {\n\t\t\taxiomatic = obj.axiomatic;\n\t\t\tdoc = obj.doc;\n\t\t\tannotations = obj.annotations;\n\n\t\t\tif (oldContext) {\n\t\t\t\tconsole.log(oldContext);\n\t\t\t\tthrow Error('duh');\n\t\t\t}\n\n\t\t\tvar using: ObjectFun[] = obj.using.map(name => {\n\t\t\t\tif (!scope.hasVariable(name)) {\n\t\t\t\t\tthrow scope.error(`Variable ${name} is not defined`);\n\t\t\t\t}\n\n\t\t\t\tvar fun = scope.getVariable(name);\n\n\t\t\t\tif (!(fun instanceof ObjectFun)) {\n\t\t\t\t\tthrow scope.error(`${name} is not a macro`);\n\t\t\t\t}\n\n\t\t\t\treturn fun;\n\t\t\t});\n\n\t\t\tcontext = new ExecutionContext(using);\n\t\t}\n\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\n\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\t\n\t\t\treturn scope.addVariable(tv) as Variable;\n\t\t});\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scope, context);\n\n\t\t\tif (scope.hasOwn$($v.name)) {\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scope.add$($v);\n\t\t});\n\n\t\tvar expr = PI.metaexpr(obj.expr, scope, context);\n\n\t\treturn new Schema({doc, annotations, axiomatic, name, params, context, def$s, expr}, scope.trace);\n\t}\n\n\tpublic static schemacall(obj: SchemacallObject, parentScope: Scope, context: ExecutionContext): Funcall {\n\t\tif (obj._type != 'schemacall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('schemacall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.metaexpr(obj.schema, scope, context);\n\n\t\tvar args = obj.args.map(obj => {\n\t\t\treturn PI.expr0(obj, scope);\n\t\t});\n\n\t\treturn new Funcall({\n\t\t\tfun,\n\t\t\targs\n\t\t}, scope.trace);\n\t}\n\n\tpublic static reduction(obj: ReductionObject, parentScope: Scope, context: ExecutionContext): Reduction {\n\t\tif (obj._type != 'reduction')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tif (!context) {\n\t\t\tthrow Error('duh');\n\t\t}\n\n\t\tvar scope = parentScope.extend('reduction', 'name' in obj.subject ? obj.subject.name : null, obj.location);\n\n\t\tvar subject = PI.metaexpr(obj.subject, scope, context);\n\n\t\tvar args = !obj.args\n\t\t\t? null\n\t\t\t: obj.args.map(g => {\n\t\t\t\treturn g && PI.expr0(g, scope);\n\t\t\t});\n\n\t\tvar leftargs = obj.leftargs.map(obj => {\n\t\t\treturn PI.metaexpr(obj, scope, context);\n\t\t});\n\n\t\tvar as = obj.as && PI.metaexpr(obj.as, scope, context);\n\n\t\treturn new Reduction({\n\t\t\tsubject,\n\t\t\targs,\n\t\t\tleftargs,\n\t\t\tas\n\t\t}, context, scope.trace);\n\t}\n}","import ObjectFun from \"./nodes/ObjectFun\";\n\nexport default class ExecutionContext {\n\n\tpublic readonly usingList: ObjectFun[];\n\n\tconstructor (usingList?: ObjectFun[]) {\n\t\tthis.usingList = usingList || [];\n\t}\n\n\tpublic canUse(fun: ObjectFun) {\n\t\treturn this.usingList.includes(fun);\n\t}\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport Expr0 from './Expr0';\nimport Fun from './Fun';\nimport Funcall from './Funcall';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport { isNameable } from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Tee from './Tee';\nimport Variable from './Variable';\n\ninterface ReductionArgumentType {\n\tsubject: Metaexpr;\n\targs: (Expr0 | null)[];\n\tleftargs: Metaexpr[];\n\tas: Metaexpr;\n}\n\nexport default class Reduction extends Metaexpr {\n\t\n\tpublic readonly subject: Metaexpr;\n\tpublic readonly args: (Expr0 | null)[];\n\tpublic readonly leftargs: Metaexpr[];\n\tpublic readonly reduced: Metaexpr;\n\n\tconstructor ({subject, args, leftargs, as}: ReductionArgumentType, context: ExecutionContext, trace: StackTrace) {\n\t\tif (args) {\n\t\t\tlet resolvedType = subject.type.resolve() as ObjectType | MetaType,\n\t\t\t\tparamTypes = resolvedType.from,\n\t\t\t\targTypes = args.map(e => e && e.type);\n\n\t\t\tif (paramTypes.length != argTypes.length)\n\t\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\t\tif (argTypes[i] && !paramTypes[i].equals(argTypes[i])) {\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (subject instanceof Fun) {\n\t\t\tsubject.params.forEach((p, i) => {\n\t\t\t\tif (!(args && args[i]) && !p.selector) {\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} could not be guessed`, trace);\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tvar derefs = subject.params.map((p, i) => {\n\t\t\t\tif (args && args[i]) return args[i];\n\n\t\t\t\tvar tee = (subject as Fun).expr.expandMeta(false) as Tee;\n\t\n\t\t\t\treturn Reduction.guess(\n\t\t\t\t\tp.selector,\n\t\t\t\t\ttee.left, leftargs,\n\t\t\t\t\ttee.right, as,\n\t\t\t\t\tcontext, trace\n\t\t\t\t);\n\t\t\t});\n\t\n\t\t\tsubject = new Funcall({\n\t\t\t\tfun: subject,\n\t\t\t\targs: derefs,\n\t\t\t}, trace);\n\t\t} else if (args) {\n\t\t\tthrow Node.error('Something\\'s wrong', trace);\n\t\t}\n\t\n\t\tif (!(subject.type instanceof MetaType && subject.type.isSimple))\n\t\t\tthrow Node.error('Subject is not reducible', trace);\n\t\n\t\tif (!(leftargs instanceof Array)\n\t\t\t\t|| leftargs.map(e => e instanceof Node).some(e => !e))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\n\t\tvar paramTypes = subject.type.left,\n\t\t\tleftargTypes = leftargs.map(e => e.type);\n\n\t\tif (paramTypes.length != leftargTypes.length)\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${leftargTypes.length}`, trace);\n\n\t\tfor (let i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(leftargTypes[i]))\n\t\t\t\tthrow Node.error(`Illegal argument type (expected ${paramTypes[i]}): ${leftargTypes[i]}`, trace);\n\t\t}\n\n\t\tsuper(trace, null, null, subject.type.right);\n\n\t\tthis.subject = subject;\n\t\tthis.leftargs = leftargs;\n\n\t\tvar tee = subject.expandMeta(true);\n\n\t\tif (!(tee instanceof Tee)) {\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tvar leftargsExpanded = leftargs.map(arg => {\n\t\t\treturn arg.expandMeta(true);\n\t\t});\n\n\t\tfor (let i = 0; i < tee.left.length; i++) {\n\t\t\tif (!tee.left[i].equals(leftargsExpanded[i], context)) {\n\t\t\t\tthrow Node.error(`LHS #${i + 1} failed to match:\n\n--- EXPECTED ---\n${tee.left[i].expandMeta(true)}\n----------------\n\n--- RECEIVED ---\n${leftargs[i].expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\t\t}\n\n\t\tif (as) {\n\t\t\tif (!tee.right.equals(as, context)) {\n\t\t\t\tthrow Node.error(`RHS failed to match:\n\n--- EXPECTED ---\n${tee.right.expandMeta(true)}\n----------------\n\n--- RECEIVED (from [as ...]) ---\n${as.expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\n\t\t\tthis.reduced = as;\n\t\t} else {\n\t\t\tthis.reduced = tee.right;\n\t\t}\n\t}\n\n\tpublic isProved(hyps?): boolean {\n\t\thyps = hyps || [];\n\t\t\n\t\treturn super.isProved(hyps)\n\t\t\t|| this.subject.isProved(hyps)\n\t\t\t\t&& this.leftargs.every(l => l.isProved(hyps));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn this.reduced.substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\treturn this.reduced.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FOUR;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\treturn this.reduced.equals(obj, context);\n\t}\n\n\tpublic static guess(\n\t\t\tselector: string,\n\t\t\tleft: Metaexpr[], leftargs: Metaexpr[],\n\t\t\tright: Metaexpr, as: Metaexpr,\n\t\t\tcontext: ExecutionContext, trace: StackTrace): Metaexpr {\n\t\t\n\t\tif (selector.length == 0) throw Node.error('wut', trace);\n\n\t\tvar parameter: Metaexpr, argument: Metaexpr;\n\n\t\tif (selector[0] == 'r') {\n\t\t\tif (!as) {\n\t\t\t\tthrow Node.error(`Cannot dereference @${selector}: expected output is not given`, trace);\n\t\t\t}\n\n\t\t\tparameter = right;\n\t\t\targument = as;\n\t\t} else {\n\t\t\tvar n = Number(selector[0]);\n\n\t\t\tif (!(1 <= n && n <= leftargs.length))\n\t\t\t\tthrow Node.error(`Cannot dereference @${selector}: antecedent index out of range`, trace);\n\n\t\t\tparameter = left[n - 1];\n\t\t\targument = leftargs[n - 1];\n\t\t}\n\n\t\treturn (function recurse(\n\t\t\t\tptr: number,\n\t\t\t\tparameter: Metaexpr, argument: Metaexpr): Metaexpr {\n\t\t\targument = argument.expandMeta(true);\n\t\t\t\n\t\t\tif (selector.length <= ptr) return argument;\n\n\t\t\tif (/[0-9]/.test(selector[ptr])) {\n\t\t\t\tvar n = Number(selector[ptr]);\n\n\t\t\t\tif (parameter instanceof Tee && argument instanceof Tee) {\n\t\t\t\t\tif (parameter.left.length != argument.left.length) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector}: antecedent length mismatch`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(1 <= n && n <= argument.left.length)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector}: antecedent index out of range`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn recurse(ptr + 1, parameter.left[n - 1], argument.left[n - 1]);\n\t\t\t\t}\n\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!(parameter instanceof Funcall) || !(argument instanceof Funcall)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector}`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (parameter.fun.equals(argument.fun, context)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!argument.isExpandable(context)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector}`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\targument = argument.expandOnce(context);\n\t\t\t\t}\n\n\t\t\t\tif (!argument.args || !(1 <= n && n <= argument.args.length))\n\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector}`, trace);\n\n\t\t\t\treturn recurse(ptr + 1, parameter.args[n - 1], argument.args[n - 1]);\n\t\t\t} else if (selector[ptr] == 'r') {\n\t\t\t\tif (parameter instanceof Tee && argument instanceof Tee) {\n\t\t\t\t\treturn recurse(ptr + 1, parameter.right, argument.right);\n\t\t\t\t}\n\n\t\t\t\tthrow Node.error(`Cannot dereference @${selector}`, trace);\n\t\t\t}\n\n\t\t\tthrow Node.error(`Cannot dereference @${selector}`, trace);\n\t\t})(1, parameter, argument);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\tvar leftarglines: ProofType[] = [];\n\t\tvar leftargnums: (number | [number, number])[] = this.leftargs.map(l => {\n\t\t\tif (hypnumMap.has(l)) return hypnumMap.get(l);\n\t\t\tif ($Map.has(l)) return $Map.get(l);\n\n\t\t\tvar lines = l.getProof(hypnumMap, $Map, ctr);\n\t\t\tleftarglines = leftarglines.concat(lines);\n\t\t\treturn lines[lines.length - 1].ctr;\n\t\t});\n\t\t\n\t\tvar args: Expr0[] = null;\n\t\tvar subjectlines: ProofType[] = [];\n\t\tvar subjectnum = hypnumMap.get(this.subject)\n\t\t\t|| $Map.get(this.subject)\n\t\t\t|| (this.subject instanceof Funcall && $Map.has(this.subject.fun)\n\t\t\t\t? (args = this.subject.args, $Map.get(this.subject.fun))\n\t\t\t\t: false)\n\t\t\t|| ((s => s instanceof Fun && s.name\n\t\t\t\t\t|| s instanceof Funcall && isNameable(s.fun) && s.fun.name)(this.subject)\n\t\t\t\t? this.subject\n\t\t\t\t: (subjectlines = this.subject.getProof(hypnumMap, $Map, ctr))[subjectlines.length-1].ctr);\n\n\t\treturn [\n\t\t\t...leftarglines,\n\t\t\t...subjectlines,\n\t\t\t{\n\t\t\t\t_type: 'E',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tsubject: subjectnum,\n\t\t\t\targs,\n\t\t\t\tleftargs: leftargnums,\n\t\t\t\treduced: this.reduced\n\t\t\t}\n\t\t];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar leftargs: any = this.leftargs.map(arg => {\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (leftargs.join('').length <= 50) {\n\t\t\tleftargs = this.leftargs.map(arg => {\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\tleftargs = leftargs.join(', ');\n\t\n\t\t\treturn [\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t\tleftargs,\n\t\t\t\t']'\n\t\t\t].join('');\n\t\t}\n\t\telse {\n\t\t\tleftargs = leftargs.join(',\\n' + '\\t'.repeat(indent + 1));\n\t\n\t\t\treturn [\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t\t'\\t' + leftargs,\n\t\t\t\t']'\n\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t}\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `${this.subject.toTeXString(false)}[${this.leftargs.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}]`;\n\t}\n}","import Counter from \"./Counter\";\nimport Metaexpr from \"./nodes/Metaexpr\";\nimport Schema from \"./nodes/Schema\";\nimport Variable from \"./nodes/Variable\";\nimport { ProofType } from \"./ProofType\";\nimport Scope from \"./Scope\";\n\nexport default class ProofExplorer {\n\tpublic static get(scope: Scope, name: string, ktx): string {\n\t\tvar DIAMOND = '&#x25C7;',\n\t\t\tDOWN = '&#x25BC;';\n\t\t// var UP = '&#x25B2;';\n\t\t\n\t\tif (!scope.hasSchema(name)) {\n\t\t\tthrow Error('wut');\n\t\t}\n\t\n\t\tvar expr = scope.getSchema(name);\n\n\t\tif (!(expr instanceof Schema)) {\n\t\t\tthrow Error('wut');\n\t\t}\n\n\t\tfunction getHtmlLine(ctr: string | number, left: any[], h1: string, h2: string | string[], options?) {\n\t\t\tvar padding = left.length;\n\n\t\t\tvar {bbb=false, rrb=false} = options || {};\n\t\n\t\t\tvar htmlLeft = left.map((e, i, a) => `<td class=\"${rrb && i == a.length - 1 ? 'rrb' : 'brb'}\">${e.map(f => ktx(f.toTeXStringWithId(true))).join(', ')}</td>`).join('');\n\n\t\t\tfor (var i = 0; i < left.length; i++)\n\t\t\t\twhile(left[i].length) left[i].pop();\n\t\n\t\t\treturn `<tr><th>${ctr}</th>${htmlLeft}<td ${bbb ? 'class=\"bbb\" ' : ''}colspan=\"${ncols-padding}\">${h1}</td>${h2 instanceof Array ? h2.map(e => `<td>${e}</td>`).join('') : `<td colspan=\"2\">${h2}</td>`}</tr>`;\n\t\t}\n\n\t\tfunction exprToHtml(expr: number | [number, number] | Metaexpr, expand?: boolean): string {\n\t\t\tif (typeof expr == 'number') return `<b>${expr}</b>`;\n\t\t\tif (expr instanceof Array) return `<b>${expr[0]}&ndash;${expr[1]}</b>`;\n\t\t\tif (expand) return ktx(expr.expandMeta(true).toTeXString(true));\n\t\t\t\n\t\t\treturn ktx(expr.toTeXString(true));\n\t\t}\n\n\t\tvar tree = expr.getProof(new Map(), new Map(), new Counter(), true);\n\n\t\tvar innertree: ProofType[] = (tree[0] as any).$lines.concat((tree[0] as any).lines);\n\n\t\tvar ncols = (function recurse(tree: ProofType[]): number {\n\t\t\treturn Math.max(...tree.map(t => {\n\t\t\t\tswitch (t._type) {\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\t\trecurse(t.$lines),\n\t\t\t\t\t\t\trecurse(t.lines)\n\t\t\t\t\t\t) + 1;\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\t\trecurse(t.leftlines),\n\t\t\t\t\t\t\trecurse(t.$lines),\n\t\t\t\t\t\t\trecurse(t.rightlines)\n\t\t\t\t\t\t) + 1;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}));\n\t\t})(innertree);\n\n\t\tvar html = '<table class=\"explorer\">';\n\t\thtml += `<tr><th>#</th><th colspan=\"${ncols}\">expr</th><th colspan=\"2\">rule</th></tr>`;\n\t\t\n\t\thtml += (function tree2html(lines: ProofType[], left: Variable[][]) {\n\t\t\treturn lines.map(line => {\n\t\t\t\tswitch (line._type) {\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\t// getHtmlLine 함수가 이 배열을 조작하기 때문에\n\t\t\t\t\t\t// shallow copy 해야 한다.\n\t\t\t\t\t\tvar params = line.params.slice();\n\t\t\t\t\t\treturn tree2html(line.$lines, left.concat([params]))\n\t\t\t\t\t\t\t+ tree2html(line.lines, left.concat([params]));\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\tvar newleft = left.concat([[]]);\n\n\t\t\t\t\t\tvar ret = '';\n\n\t\t\t\t\t\tif (line.leftlines.length == 0) {\n\t\t\t\t\t\t\tvar emptyleft = Array(left.length + 1).fill([]);\n\n\t\t\t\t\t\t\tret += getHtmlLine(\n\t\t\t\t\t\t\t\t'', emptyleft, '', '', {bbb: true, rrb: true}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tret += line.leftlines.map((line, i, a) => {\n\t\t\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\t\t\tnewleft,\n\t\t\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t\t\t'assumption',\n\t\t\t\t\t\t\t\t\t{bbb: i == a.length - 1, rrb: true}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}).join('');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tret += tree2html(\n\t\t\t\t\t\t\tline.$lines,\n\t\t\t\t\t\t\tnewleft\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tret += tree2html(\n\t\t\t\t\t\t\tline.rightlines,\n\t\t\t\t\t\t\tnewleft\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\tcase '?':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'???'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'H':\n\t\t\t\t\t\tthrow Error('no');\n\t\t\t\t\tcase 'R':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.num)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RS':\n\t\t\t\t\tcase 'RCX':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.expr)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RC':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, `${exprToHtml(line.schema)} (${line.args.map(a => exprToHtml(a)).join(', ')})`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'E':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.reduced, true),\n\t\t\t\t\t\t\t[DOWN, `${exprToHtml(line.subject)}${line.args ? ' (' + line.args.map(a => exprToHtml(a)).join(', ') + ')' : ''} [${line.leftargs.map(a => exprToHtml(a)).join(', ')}]`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'NP':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'<b class=\"red\">not proved</b>'\n\t\t\t\t\t\t);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\t(line as any).ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\t`Unknown type ${(line as any)._type}`,\n\t\t\t\t\t\t\t''\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}).join('');\n\t\t})(innertree, []);\n\t\t\n\t\thtml += '</table>';\n\t\n\t\treturn html;\n\t}\n}","export default class Counter {\n\n\tprivate n: number;\n\n\tconstructor (start: number=0) {\n\t\tthis.n = start;\n\t}\n\n\tpublic peek(): number {\n\t\treturn this.n;\n\t}\n\n\tpublic next(): number {\n\t\treturn ++this.n;\n\t}\n}","import $Variable from './nodes/$Variable';\nimport Fun from './nodes/Fun';\nimport Metaexpr from './nodes/Metaexpr';\nimport ObjectFun from './nodes/ObjectFun';\nimport ObjectType from './nodes/ObjectType';\nimport Schema from './nodes/Schema';\nimport Variable from './nodes/Variable';\nimport { LocationObject } from './PegInterfaceDefinitions';\nimport StackTrace from './StackTrace';\n\nexport type NestedTypeInput = string | NestedTypeInput[];\n\n/**\n * 변수 영역(scope).\n * 구문 분석 과정에서 name resolution을 할 때에만 사용해야 한다.\n */\nexport default class Scope {\n\tpublic readonly importMap: Map<string, Scope> = new Map();\n\n\tpublic readonly typedefMap: Map<string, ObjectType> = new Map();\n\tpublic readonly defMap: Map<string, Variable | ObjectFun> = new Map();\n\tpublic readonly schemaMap: Map<string, Schema> = new Map();\n\tpublic readonly $Map: Map<string, $Variable> = new Map();\n\tpublic readonly hypotheses: Metaexpr[] = [];\n\n\tpublic readonly parent: Scope;\n\tpublic readonly root: Scope;\n\n\tpublic readonly trace: StackTrace;\n\tpublic baseType: ObjectType;\n\n\tpublic readonly fileUri: string;\n\n\tconstructor (fileUri: string, parent: Scope, trace?: StackTrace) {\n\t\tthis.fileUri = fileUri;\n\n\t\tthis.parent = parent;\n\t\tthis.root = parent ? parent.root : this;\n\n\t\tif (trace && !(trace instanceof StackTrace)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tthis.trace = trace || new StackTrace(fileUri);\n\n\t\tthis.baseType = parent ? parent.baseType : null;\n\t}\n\n\tpublic extend(type: string, name: string, location: LocationObject): Scope {\n\t\tvar child = new Scope(this.fileUri, this, this.trace.extend({type, name, location}));\n\t\tthis.hypotheses.forEach(h => child.hypotheses.push(h));\n\t\treturn child;\n\t}\n\n\tpublic error(message: string): Error {\n\t\treturn this.trace.error(message);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasOwnType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasOwnType(e);\n\t\t}).every(e => e);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.hasOwnType(name)\n\t\t\t\t|| (!!this.parent && this.parent.hasType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasType(e);\n\t\t}).every(e => e);\n\t}\n\n\tpublic addType(type: ObjectType): ObjectType {\n\t\tif (!(type instanceof ObjectType))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!type.name)\n\t\t\tthrow this.error('Something\\'s wrong');\n\n\t\tif (this.hasOwnType(type.name))\n\t\t\tthrow this.error(`Type ${type.name} has already been declared`);\n\n\t\tif (type.isBaseType) {\n\t\t\tif (this.baseType) {\n\t\t\t\tthrow this.error('A base type already exists');\n\t\t\t}\n\n\t\t\t(function broadcast(scope: Scope) {\n\t\t\t\tscope.baseType = type;\n\t\t\t\tif (scope.parent) broadcast(scope.parent);\n\t\t\t})(this);\n\t\t}\n\n\t\tthis.typedefMap.set(type.name, type);\n\t\treturn type;\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic getType(name: NestedTypeInput): ObjectType {\n\t\tif (typeof name == 'string') {\n\t\t\tif (!this.hasType(name))\n\t\t\t\tthrow this.error(`Type ${name} is not defined`);\n\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t? this.typedefMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getType(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasType(name)\n\t\t\t\t\t})[0].getType(name);\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\tvar from = name.slice(0, name.length - 1).map(e => {\n\t\t\treturn this.getType(e);\n\t\t});\n\n\t\tvar to = this.getType(name[name.length - 1]);\n\n\t\treturn new ObjectType({\n\t\t\tfunctional: true,\n\t\t\tfrom,\n\t\t\tto\n\t\t});\n\t}\n\n\tpublic hasOwnVariable(name: string): boolean {\n\t\treturn this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnVariable(name));\n\t}\n\n\tpublic hasVariable(name: string): boolean {\n\t\treturn this.hasOwnVariable(name)\n\t\t\t|| (!!this.parent && this.parent.hasVariable(name));\n\t}\n\n\tpublic addVariable(variable: Variable | Fun): Variable | Fun {\n\t\tif (!(variable instanceof Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnVariable(variable.name))\n\t\t\tthrow this.error(`Definition ${variable.name} has already been declared`);\n\n\t\tthis.defMap.set(variable.name, variable);\n\t\treturn variable;\n\t}\n\n\tpublic addFun(fun: ObjectFun): ObjectFun {\n\t\tif (!(fun instanceof ObjectFun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!fun.name)\n\t\t\tthrow this.error('Cannot add anonymous fun to scope');\n\n\t\tif (this.hasOwnVariable(fun.name))\n\t\t\tthrow this.error(`Definition ${fun.name} has already been declared`);\n\n\t\tthis.defMap.set(fun.name, fun);\n\t\treturn fun;\n\t}\n\n\tpublic getVariable(name: string): Variable | ObjectFun {\n\t\tif (!this.hasVariable(name))\n\t\t\tthrow this.error(`Definition ${name} is not defined`);\n\n\t\treturn this.defMap.has(name)\n\t\t\t? this.defMap.get(name)\n\t\t\t: (!!this.parent && this.parent.getVariable(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.hasVariable(name)\n\t\t\t\t})[0].getVariable(name);\n\t}\n\n\tpublic hasOwnSchema(name: string): boolean {\n\t\treturn this.schemaMap.has(name) || this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnSchema(name));\n\t}\n\n\tpublic hasSchema(name: string): boolean {\n\t\treturn this.hasOwnSchema(name)\n\t\t\t|| (!!this.parent && this.parent.hasSchema(name));\n\t}\n\n\tpublic addSchema(schema: Schema): Schema {\n\t\tif (!(schema instanceof Fun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnSchema(schema.name))\n\t\t\tthrow this.error(`Schema ${schema.name} has already been declared`);\n\n\t\tthis.schemaMap.set(schema.name, schema);\n\t\treturn schema;\n\t}\n\n\tpublic getSchema(name: string): Variable | Fun {\n\t\tif (!this.hasSchema(name))\n\t\t\tthrow this.error(`Schema ${name} is not defined`);\n\n\t\treturn this.schemaMap.has(name)\n\t\t\t? this.schemaMap.get(name)\n\t\t\t: this.defMap.has(name)\n\t\t\t\t? this.defMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getSchema(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasSchema(name)\n\t\t\t\t\t})[0].getSchema(name);\n\t}\n\n\tpublic hasOwn$(name: string): boolean {\n\t\treturn this.$Map.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwn$(name));\n\t}\n\n\tpublic has$(name: string): boolean {\n\t\treturn this.hasOwn$(name)\n\t\t\t|| (!!this.parent && this.parent.has$(name));\n\t}\n\n\tpublic add$($: $Variable): $Variable {\n\t\tif (!($ instanceof $Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwn$($.name))\n\t\t\tthrow this.error(`$ variable ${$.name} has already been declared`);\n\n\t\tthis.$Map.set($.name, $);\n\t\treturn $;\n\t}\n\n\tpublic get$(name: string): $Variable {\n\t\tif (!this.has$(name))\n\t\t\tthrow this.error(`$ variable ${name} is not defined`);\n\n\t\treturn this.$Map.has(name)\n\t\t\t? this.$Map.get(name)\n\t\t\t: (!!this.parent && this.parent.get$(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.has$(name)\n\t\t\t\t})[0].get$(name);\n\t}\n}","import { LocationObject } from \"./PegInterfaceDefinitions\";\n\ninterface StackTraceElement {\n\ttype: string;\n\tname: string;\n\tlocation: LocationObject;\n}\n\nexport default class StackTrace {\n\n\tpublic readonly fileUri: string;\n\tpublic readonly stack: StackTraceElement[];\n\n\tconstructor (fileUri: string, stack?: StackTraceElement[]) {\n\t\tthis.fileUri = fileUri;\n\t\tthis.stack = stack || [];\n\t}\n\n\tpublic extend(element: StackTraceElement): StackTrace {\n\t\treturn new StackTrace(this.fileUri, [element].concat(this.stack));\n\t}\n\n\tpublic error(message: string) {\n\t\tvar fileUri = this.fileUri || '<unknown>';\n\n\t\treturn new Error(\n\t\t\tmessage\n\t\t\t+ '\\n\\tat '\n\t\t\t+ (\n\t\t\t\tthis.stack.length\n\t\t\t\t\t? this.stack.map(({type, name, location}) => {\n\t\t\t\t\t\treturn `${type} ${name || '<anonymous>'} (${fileUri}:${location.start.line}:${location.start.column})`;\n\t\t\t\t\t}).join('\\n\\tat ')\n\t\t\t\t\t: `<root> (${fileUri}:1:1)`\n\t\t\t)\n\t\t);\n\t}\n}"],"sourceRoot":""}