{"version":3,"sources":["webpack://math/webpack/universalModuleDefinition","webpack://math/webpack/bootstrap","webpack://math/./src/nodes/Node.ts","webpack://math/./src/nodes/ObjectType.ts","webpack://math/./src/nodes/Metaexpr.ts","webpack://math/./src/nodes/Fun.ts","webpack://math/./src/nodes/Variable.ts","webpack://math/./src/nodes/$Variable.ts","webpack://math/./src/nodes/Funcall.ts","webpack://math/./src/nodes/Expr0.ts","webpack://math/./src/nodes/MetaType.ts","webpack://math/./src/nodes/Schema.ts","webpack://math/./src/nodes/ObjectFun.ts","webpack://math/./src/nodes/Tee.ts","webpack://math/./src/nodes/Type.ts","webpack://math/./src/nodes/Nameable.ts","webpack://math/./src/nodes/Reduction.ts","webpack://math/./src/entry.js","webpack://math/./src/grammar.pegjs","webpack://math/./src/Program.ts","webpack://math/./src/Scope.ts","webpack://math/./src/StackTrace.ts","webpack://math/./node_modules/process/browser.js","webpack://math/./src/PegInterface.ts","webpack://math/./src/ProofExplorer.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","ctr","Node","scope","doc","tex","_id","toIndentedString","message","error","Error","replace","precedence","code","match","g1","hyps","length","prec","Array","console","log","my","normalizePrecedence","your","id","args","ret","shouldConsolidate","_match","PREC_FUNEXPR","PREC_COMMA","PREC_COLONEQQ","ObjectType","origin","super","isFunctional","isBaseType","base","functional","from","map","f","some","e","to","resolved","resolve","toSimpleString","join","indent","isSimple","toTeXString","equals","EqualsPriority","Metaexpr","type","obj","getEqualsPriority","equalsInternal","Fun","annotations","params","expr","parsed","parseTeX","variable","isProved","ONE","placeholders","types","len","push","isParam","fun","Map","set","substitute","Variable","guess","andFuncalls","ZERO","escapeTeX","$Variable","expandMeta","FOUR","Funcall","isNameable","resolvedType","paramTypes","argTypes","arg","expandOnce","callee","THREE","thisHasFunExpr","objHasFunExpr","every","_","repeat","funcallToTeXString","Expr0","MetaType","left","right","Schema","axiomatic","def$s","_isProvedCache","cache","has","toTeXStringWithId","ObjectFun","makeTeX","Tee","$","concat","lef","TWO","expanded","Type","Reduction","subject","guesses","leftargs","expected","forEach","derefs","tee","query","leftargTypes","reduced","recurse","node","ptr","test","grammar","default","Program","parser","scopeMap","filename","loader","loadModuleInternal","parse","feed","lines","line","_type","scope2","importMap","hasType","addType","hasVariable","addVariable","addFun","schema","hasSchema","addSchema","reduction","schemacall","metavar","ktx","Scope","parent","trace","typedefMap","defMap","schemaMap","$Map","hypotheses","baseType","location","child","extend","h","values","hasOwnType","broadcast","getType","filter","slice","hasOwnVariable","getVariable","hasOwnSchema","getSchema","hasOwn$","has$","get$","StackTrace","stack","process","argv","start","column","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","runClearTimeout","marker","Item","array","noop","nextTick","arguments","apply","title","browser","env","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","typeObjToString","ftype","typeObjToNestedArr","PI","parentScope","includes","tvo","tv","rettype","expr0","funcall","hypnum","Number","metaexpr","scopeRight","$v","def$","add$","g","ProofExplorer","DIAMOND","theexpr","ncols","Math","max","getHtmlLine","h1","h2","options","padding","bbb","rrb","htmlLeft","a","pop","exprToHtml","expand","tree","getTree","hypnumMap","num","leftarglines","leftargnums","subjectlines","subjectnum","schemalines","$lines","$num","leftlines","rightlines","html","tree2html","newleft","fill"],"mappings":"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","file":"math.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"math\"] = factory();\n\telse\n\t\troot[\"math\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","import Scope from '../Scope';\r\n\r\nvar ctr = 0;\r\n\r\nexport type Precedence = boolean | number | [number, number];\r\n\r\nexport default abstract class Node {\r\n\tpublic readonly _id: number;\r\n\r\n\tpublic readonly doc: string;\r\n\tpublic readonly tex: string;\r\n\tpublic precedence: Precedence;\r\n\r\n\tpublic static readonly PREC_FUNEXPR = 1000;\r\n\tpublic static readonly PREC_COMMA = 1000;\r\n\tpublic static readonly PREC_COLONEQQ = 100000;\r\n\r\n\tconstructor (scope: Scope, doc: string, tex: string) {\r\n\t\tthis._id = ++ctr;\r\n\t\tthis.doc = doc;\r\n\t\tthis.tex = tex;\r\n\t}\r\n\r\n\tpublic toString() {\r\n\t\treturn this.toIndentedString(0);\r\n\t}\r\n\r\n\tpublic abstract toIndentedString(indent: number, root?: boolean): string;\r\n\tpublic abstract toTeXString(prec?: Precedence, root?: boolean): string;\r\n\r\n\tpublic static error(message: string, scope: Scope) {\r\n\t\tif (scope) {\r\n\t\t\treturn scope.error(message);\r\n\t\t} else {\r\n\t\t\treturn new Error(message);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static escapeTeX(s) {\r\n\t\treturn s.replace(/&|%|\\$|#|_|{|}|~|\\^|\\\\/g, m => ({\r\n\t\t\t'&': '\\\\&', '%': '\\\\%', '$': '\\\\$',\r\n\t\t\t'#': '\\\\#', '_': '\\\\_', '{': '\\\\{',\r\n\t\t\t'}': '\\\\}',\r\n\t\t\t'~': '\\\\textasciitilde',\r\n\t\t\t'^': '\\\\textasciicircum',\r\n\t\t\t'\\\\': '\\\\textbackslash'\r\n\t\t})[m]);\r\n\t}\r\n\r\n\tpublic static parseTeX(tex) {\r\n\t\tvar precedence: Precedence = false;\r\n\r\n\t\tvar code = tex.replace(/^!<prec=([0-9]+)>/, (match, g1) => {\r\n\t\t\tprecedence = g1 * 1;\r\n\t\t\treturn '';\r\n\t\t});\r\n\r\n\t\treturn {precedence, code};\r\n\t}\r\n\r\n\tpublic isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\r\n\t\tfor (var i = 0; i < hyps.length; i++) {\r\n\t\t\tif (hyps[i] == this) return true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/*\r\n\t* false corresponds to 0.\r\n\t* true corresponds to w * 2.\r\n\t*/\r\n\tpublic static normalizePrecedence(prec: Precedence) {\r\n\t\tif (prec === false) return [0, 0];\r\n\t\tif (prec === true) return [2, 0];\r\n\t\tif (typeof prec == 'number') return [0, prec];\r\n\r\n\t\tif (!(prec instanceof Array && prec.length == 2)) {\r\n\t\t\tconsole.log(prec);\r\n\t\t\tthrow Error('wut');\r\n\t\t}\r\n\r\n\t\treturn prec;\r\n\t}\r\n\r\n\tpublic shouldConsolidate(prec: Precedence) {\r\n\t\tvar my = Node.normalizePrecedence(this.precedence || false),\r\n\t\t\tyour = Node.normalizePrecedence(prec || false);\r\n\r\n\t\tif (my[0] == 0 && my[1] == 0) return false;\r\n\r\n\t\treturn !(my[0] < your[0] || my[0] == your[0] && my[1] < your[1]);\r\n\t}\r\n\r\n\tpublic makeTeX(id, args, prec) {\r\n\t\targs = args || [];\r\n\t\tprec = prec || false;\r\n\t\t\r\n\t\tvar ret = this.tex;\r\n\r\n\t\tif (this.shouldConsolidate(prec)) {\r\n\t\t\tret = '\\\\left(' + ret + '\\\\right)';\r\n\t\t}\r\n\r\n\t\treturn ret.replace(/#([0-9]+)/g, (match, g1) => {\r\n\t\t\treturn args[g1 * 1 - 1] || `\\\\texttt{\\\\textcolor{red}{\\\\#${g1}}}`;\r\n\t\t}).replace(/<<(.+?)>>/, (_match, g1) => {\r\n\t\t\treturn `\\\\href{#${id}}{${g1}}`;\r\n\t\t});\r\n\t}\r\n}","import Nameable from './Nameable';\r\nimport Node from './Node';\r\nimport Type from './Type';\r\n\r\nexport default class ObjectType extends Type implements Nameable {\r\n\r\n\tpublic readonly isBaseType: boolean;\r\n\tpublic readonly name: string;\r\n\tpublic readonly origin: ObjectType;\r\n\tpublic readonly from: ObjectType[];\r\n\tpublic readonly to: ObjectType;\r\n\r\n\tconstructor (o) {\r\n\t\tif (o.origin) {\r\n\t\t\tsuper(null, o.doc, null, o.origin.isFunctional);\r\n\r\n\t\t\tthis.isBaseType = !!o.base;\r\n\r\n\t\t\tif (typeof o.name != 'string')\r\n\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\r\n\t\t\tthis.name = o.name;\r\n\r\n\t\t\tif (!(o.origin instanceof ObjectType))\r\n\t\t\t\tthrow Node.error('!(o.origin instanceof ObjectType)', null);\r\n\r\n\t\t\tthis.origin = o.origin;\r\n\t\t} else {\r\n\t\t\tsuper(null, o.doc, null, o.functional);\r\n\r\n\t\t\tthis.isBaseType = !!o.base;\r\n\r\n\t\t\tif (typeof o.functional != 'boolean')\r\n\t\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\r\n\r\n\t\t\tif (!o.functional) {\r\n\t\t\t\tif (typeof o.name != 'string')\r\n\t\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\r\n\t\t\t\tthis.name = o.name;\r\n\t\t\t} else {\r\n\t\t\t\tif (o.from.map(f => f instanceof ObjectType).some(e => !e))\r\n\t\t\t\t\tthrow Node.error('o.from.map(f => f instanceof ObjectType).some(e => !e)', null);\r\n\t\t\t\tif (!(o.to instanceof ObjectType))\r\n\t\t\t\t\tthrow Node.error('!(o.to instanceof ObjectType)', null);\r\n\r\n\t\t\t\tthis.from = o.from;\r\n\t\t\t\tthis.to = o.to;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toSimpleString() {\r\n\t\tif (this.name) return this.name;\r\n\r\n\t\tvar resolved = this.resolve();\r\n\r\n\t\treturn `[${resolved.from.map(e => e.toSimpleString()).join(', ')} -> ${resolved.to.toSimpleString()}]`;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent): string {\r\n\t\tif (this.isSimple) return this.name;\r\n\r\n\t\treturn `${this.name ? this.name + ': ' : ''}[${this.resolve().from.join(', ')} -> ${this.resolve().to}]`;\r\n\t}\r\n\r\n\tpublic toTeXString(root?: boolean) {\r\n\t\tif (this.isSimple) return `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\r\n\r\n\t\tif (!root && this.name) {\r\n\t\t\treturn `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\r\n\t\t}\r\n\r\n\t\treturn `${this.name ? `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}: ` : ''}`\r\n\t\t\t+ `\\\\left[${this.resolve().from.map(e => e.toTeXString()).join(' \\\\times ')}`\r\n\t\t\t+ ` \\\\to ${this.resolve().to.toTeXString()} \\\\right]`;\r\n\t}\r\n\r\n\tpublic resolve(): ObjectType {\r\n\t\treturn this.origin ? this.origin.resolve() : this;\r\n\t}\r\n\r\n\tpublic equals(t: Type): boolean {\r\n\t\tif (!(t instanceof ObjectType)) return false;\r\n\r\n\t\tif (this.origin) return this.origin.equals(t);\r\n\t\tif (t.origin) return this.equals(t.origin);\r\n\r\n\t\tif (this.isSimple != t.isSimple) return false;\r\n\r\n\t\tif (this.isSimple) return this === t;\r\n\r\n\t\tif (this.from.length != t.from.length) return false;\r\n\r\n\t\tfor (var i = 0; i < this.from.length; i++)\r\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\r\n\r\n\t\treturn this.to.equals(t.to);\r\n\t}\r\n}","import Scope from \"../Scope\";\r\nimport Expr0 from \"./Expr0\";\r\nimport Node from \"./Node\";\r\nimport Type from \"./Type\";\r\nimport Variable from \"./Variable\";\r\n\r\n/**\r\n * 숫자가 큰 것이 우선순위가 높다.\r\n */\r\nexport enum EqualsPriority {\r\n\t/** Variable */\r\n\tZERO,\r\n\t/** Fun */\r\n\tONE,\r\n\t/** Tee */\r\n\tTWO,\r\n\t/** Funcall */\r\n\tTHREE,\r\n\t/** $Variable, Reduction */\r\n\tFOUR\r\n}\r\n\r\nexport default abstract class Metaexpr extends Node {\r\n\tpublic readonly type: Type;\r\n\r\n\tconstructor(scope: Scope, doc: string, tex: string, type: Type) {\r\n\t\tsuper(scope, doc, tex);\r\n\r\n\t\tif (!type) throw Node.error('Assertion failed', scope);\r\n\r\n\t\tthis.type = type;\r\n\t}\r\n\r\n\tpublic abstract substitute(map: Map<Variable, Expr0>): Metaexpr;\r\n\r\n\t/**\r\n\t * \r\n\t * @param andFuncalls 이름 없는 Funcall도 푼다.\r\n\t */\r\n\tpublic abstract expandMeta(andFuncalls: boolean): Metaexpr;\r\n\r\n\tpublic equals(obj: Metaexpr): boolean {\r\n\t\tif (this === obj) return true;\r\n\t\tif (!this.type.equals(obj.type)) return false;\r\n\r\n\t\tif (obj.getEqualsPriority() > this.getEqualsPriority())\r\n\t\t\treturn obj.equalsInternal(this);\r\n\t\t\r\n\t\treturn this.equalsInternal(obj);\r\n\t}\r\n\r\n\tprotected abstract getEqualsPriority(): EqualsPriority;\r\n\r\n\tprotected abstract equalsInternal(obj: Metaexpr): boolean;\r\n}","import Expr0 from './Expr0';\r\nimport Node from './Node';\r\nimport ObjectType from './ObjectType';\r\nimport MetaType from './MetaType';\r\nimport Scope from '../Scope';\r\nimport Variable from './Variable';\r\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\r\nimport Nameable from './Nameable';\r\nimport Type from './Type';\r\n\r\ninterface FunArgumentType {\r\n\tdoc?: string;\r\n\ttex?: string;\r\n\tannotations: string[];\r\n\ttype?: Type;\r\n\tname?: string;\r\n\tparams: Variable[];\r\n\texpr?: Metaexpr;\r\n}\r\n\r\nexport default abstract class Fun extends Expr0 implements Nameable {\r\n\r\n\tpublic readonly annotations: string[];\r\n\tpublic readonly name: string;\r\n\tpublic readonly params: Variable[];\r\n\tpublic readonly expr: Metaexpr;\r\n\r\n\t/*\r\n\t * name, expr 중 하나 이상 있어야 하고 type, expr 중\r\n\t * 한 개만 있어야 한다.\r\n\t */\r\n\tconstructor ({doc, tex, annotations, type, /* nullable */ name, params, expr}: FunArgumentType, scope?: Scope) {\r\n\t\tif (!name && !expr)\r\n\t\t\tthrow Node.error('Anonymous fun cannot be primitive', scope);\r\n\r\n\t\tif (type && expr)\r\n\t\t\tthrow Node.error('no', scope);\r\n\r\n\t\tif (!type && !expr)\r\n\t\t\tthrow Node.error('Cannot guess the type of a primitive fun', scope);\r\n\r\n\t\tif (name !== null && typeof name != 'string')\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\r\n\t\tif (!(params instanceof Array)\r\n\t\t\t\t|| params.map(e => e instanceof Variable).some(e => !e))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\r\n\t\tif (expr !== null && !(expr instanceof Node))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\r\n\t\tvar precedence = false;\r\n\r\n\t\tif (tex) {\r\n\t\t\tvar parsed = Node.parseTeX(tex);\r\n\t\t\tprecedence = parsed.precedence;\r\n\t\t\ttex = parsed.code;\r\n\t\t} else {\r\n\t\t\ttex = null;\r\n\t\t}\r\n\t\t\r\n\t\tsuper(\r\n\t\t\tscope, doc, tex,\r\n\t\t\ttype || new (expr.type instanceof ObjectType ? ObjectType : MetaType)({\r\n\t\t\t\tfunctional: true,\r\n\t\t\t\tfrom: params.map(variable => variable.type),\r\n\t\t\t\tto: expr.type as any\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tthis.annotations = annotations;\r\n\t\tthis.precedence = precedence;\r\n\t\tthis.name = name;\r\n\t\tthis.params = params;\r\n\t\tthis.expr = expr;\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn super.isProved(hyps)\r\n\t\t\t|| this.expr && this.expr.isProved(hyps);\r\n\t}\r\n\r\n\tprotected getEqualsPriority(): EqualsPriority {\r\n\t\treturn EqualsPriority.ONE;\r\n\t}\r\n\t\r\n\tprotected equalsInternal(obj: Metaexpr): boolean {\r\n\t\tvar placeholders = [];\r\n\t\tvar types = (this.type.resolve() as ObjectType | MetaType).from;\r\n\t\tvar len = types.length;\r\n\r\n\t\tfor (var i = 0; i < len; i++) {\r\n\t\t\tplaceholders.push(new Variable({\r\n\t\t\t\tisParam: true,\r\n\t\t\t\ttype: types[i],\r\n\t\t\t\tname: '$' + i\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn new Funcall({\r\n\t\t\tfun: this,\r\n\t\t\targs: placeholders\r\n\t\t}).equals(new Funcall({\r\n\t\t\tfun: obj,\r\n\t\t\targs: placeholders\r\n\t\t}));\r\n\t}\r\n\r\n\tpublic call(args: Expr0[]): Metaexpr {\r\n\t\tif (!this.expr) {\r\n\t\t\tthrow Error('Cannot call a callable without a body');\r\n\t\t}\r\n\r\n\t\tif (this.params.length != args.length) {\r\n\t\t\tthrow Error('Illegal arguments length');\r\n\t\t}\r\n\r\n\t\tvar map: Map<Variable, Expr0> = new Map();\r\n\r\n\t\tfor (var i = 0; i < this.params.length; i++) {\r\n\t\t\tmap.set(this.params[i], args[i]);\r\n\t\t}\r\n\r\n\t\treturn this.expr.substitute(map);\r\n\t}\r\n}\r\n\r\nimport Funcall from './Funcall';","import Scope from '../Scope';\r\nimport Expr0 from './Expr0';\r\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\r\nimport Nameable from './Nameable';\r\nimport Node, {Precedence} from './Node';\r\nimport ObjectType from './ObjectType';\r\n\r\ninterface VariableArgumentType {\r\n\tdoc?: string;\r\n\ttex?: string;\r\n\ttype: ObjectType;\r\n\tname: string;\r\n\tisParam: boolean;\r\n\tguess?: string;\r\n}\r\n\r\nexport default class Variable extends Expr0 implements Nameable {\r\n\t\r\n\tpublic readonly isParam: boolean;\r\n\tpublic readonly guess: string;\r\n\tpublic readonly type: ObjectType;\r\n\tpublic readonly name: string;\r\n\r\n\tconstructor ({doc, tex, type, name, isParam, guess}: VariableArgumentType, scope?: Scope) {\r\n\t\tsuper(scope, doc, tex, type);\r\n\r\n\t\tthis.isParam = !!isParam;\r\n\t\tthis.guess = guess || null;\r\n\r\n\t\tif (typeof name != 'string')\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tpublic isProved(hyps) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps);\r\n\t}\r\n\r\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\r\n\t\treturn map.get(this) || this;\r\n\t}\r\n\r\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprotected getEqualsPriority(): EqualsPriority {\r\n\t\treturn EqualsPriority.ZERO;\r\n\t}\r\n\r\n\tprotected equalsInternal(obj: Metaexpr): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// pr f\r\n\tpublic toSimpleString() {\r\n\t\treturn this.type.toSimpleString() + ' ' + this.name;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn `${root ? this.type + ' ' : ''}${this.name}<${this._id}>`;\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tvar id = this.isParam ? `id-${this._id}` : `def-${this.name}`;\r\n\r\n\t\tvar tex = this.tex\r\n\t\t\t|| (\r\n\t\t\t\tthis.name.length == 1\r\n\t\t\t\t\t? Node.escapeTeX(this.name)\r\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.name)}}`\r\n\t\t\t);\r\n\t\t\r\n\t\treturn `\\\\href{#${id}}{${tex}}`;\r\n\t}\r\n\r\n\tpublic toTeXStringWithId(prec?: Precedence, root?: boolean): string {\r\n\t\tif (!this.isParam) throw Error('wut');\r\n\r\n\t\tvar id =`id-${this._id}`;\r\n\r\n\t\treturn [\r\n\t\t\t`\\\\htmlId{${id}}{`,\r\n\t\t\tthis.toTeXString(prec, root),\r\n\t\t\t`}`\r\n\t\t].join('');\r\n\t}\r\n}","import Scope from \"../Scope\";\r\nimport Expr0 from \"./Expr0\";\r\nimport Metaexpr, { EqualsPriority } from \"./Metaexpr\";\r\nimport MetaType from \"./MetaType\";\r\nimport Nameable from \"./Nameable\";\r\nimport Node, { Precedence } from \"./Node\";\r\nimport ObjectType from \"./ObjectType\";\r\nimport Variable from \"./Variable\";\r\n\r\ninterface $VariableArgumentType {\r\n\tname: string;\r\n\texpr: Metaexpr;\r\n}\r\n\r\nexport default class $Variable extends Metaexpr implements Nameable {\r\n\r\n\tpublic readonly name: string;\r\n\tpublic readonly expr: Metaexpr;\r\n\r\n\tconstructor ({name, expr}: $VariableArgumentType, scope?: Scope) {\r\n\t\tsuper(scope, null, null, expr.type);\r\n\r\n\t\tif (!name || !expr) {\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t}\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.expr = expr;\r\n\t}\r\n\r\n\tpublic isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn super.isProved(hyps)\r\n\t\t\t|| this.expr.isProved(hyps);\r\n\t}\r\n\r\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\r\n\t\treturn this.expr.substitute(map);\r\n\t}\r\n\r\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\r\n\t\treturn this.expr.expandMeta(andFuncalls);\r\n\t}\r\n\r\n\tprotected getEqualsPriority(): EqualsPriority {\r\n\t\treturn EqualsPriority.FOUR;\r\n\t}\r\n\r\n\tprotected equalsInternal(obj: Metaexpr): boolean {\r\n\t\treturn this.expr.equals(obj);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn this.name;\r\n\t}\r\n\t\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\treturn `\\\\mathtt{${Node.escapeTeX(this.name)}}`;\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport Variable from './Variable';\r\nimport Scope from '../Scope';\r\nimport Fun from './Fun';\r\nimport Expr0 from './Expr0';\r\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\r\nimport { isNameable } from './Nameable';\r\nimport Schema from './Schema';\r\nimport ObjectFun from './ObjectFun';\r\nimport MetaType from './MetaType';\r\nimport ObjectType from './ObjectType';\r\nimport $Variable from './$Variable';\r\n\r\ninterface FuncallArgumentType {\r\n\tfun: Metaexpr;\r\n\targs: Expr0[];\r\n}\r\n\r\nexport default class Funcall extends Expr0 {\r\n\t\r\n\tpublic readonly fun: Metaexpr;\r\n\tpublic readonly args: Expr0[];\r\n\r\n\tconstructor ({fun, args}: FuncallArgumentType, scope?: Scope) {\r\n\t\tif (fun.type.isSimple) {\r\n\t\t\tvar name = isNameable(fun) ? fun.name : '<anonymous>';\r\n\t\t\tthrow Node.error(`${name} is not callable`, scope);\r\n\t\t}\r\n\r\n\t\tif (!(args instanceof Array) || args.map(e => e instanceof Node).some(e => !e))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t\t \r\n\t\tvar resolvedType = fun.type.resolve() as ObjectType | MetaType,\r\n\t\t\tparamTypes = resolvedType.from,\r\n\t\t\targTypes = args.map(e => e.type);\r\n\r\n\t\tif (paramTypes.length != argTypes.length)\r\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, scope);\r\n\r\n\t\tfor (var i = 0; i < paramTypes.length; i++) {\r\n\t\t\tif (!paramTypes[i].equals(argTypes[i])) {\r\n\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, scope);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper(scope, null, null, resolvedType.to);\r\n\t\t\r\n\t\tthis.fun = fun;\r\n\t\tthis.args = args;\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps) || this.fun.isProved(hyps);\r\n\t}\r\n\r\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\r\n\t\treturn new Funcall({\r\n\t\t\tfun: this.fun.substitute(map),\r\n\t\t\targs: this.args.map(arg => arg.substitute(map))\r\n\t\t});\r\n\t}\r\n\r\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\r\n\t\tvar fun = this.fun.expandMeta(andFuncalls),\r\n\t\t\targs = this.args.map(arg => arg.expandMeta(andFuncalls));\r\n\t\t\r\n\t\tif (!(fun instanceof Fun) || !fun.expr || fun.name && !(fun instanceof Schema))\r\n\t\t\treturn new Funcall({fun, args});\r\n\r\n\t\treturn fun.call(args).expandMeta(andFuncalls);\r\n\t}\r\n\t\r\n\tpublic expandOnce(): Metaexpr {\r\n\t\tif (this.fun instanceof Funcall) {\r\n\t\t\treturn new Funcall({\r\n\t\t\t\tfun: this.fun.expandOnce(),\r\n\t\t\t\targs: this.args\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tvar callee: Metaexpr = this.fun;\r\n\r\n\t\twhile (callee instanceof $Variable) {\r\n\t\t\tcallee = callee.expr;\r\n\t\t}\r\n\r\n\t\tif (!(callee instanceof Fun)) {\r\n\t\t\tthrow Error('Something\\'s wrong');\r\n\t\t}\r\n\r\n\t\tif (!callee.expr) {\r\n\t\t\tthrow Error('Could not expand');\r\n\t\t}\r\n\r\n\t\treturn callee.call(this.args);\r\n\t}\r\n\r\n\tprotected getEqualsPriority(): EqualsPriority {\r\n\t\treturn EqualsPriority.THREE;\r\n\t}\r\n\r\n\tprotected equalsInternal(obj: Metaexpr): boolean {\r\n\t\tif (this.fun instanceof Funcall) {\r\n\t\t\treturn this.expandOnce().equals(obj);\r\n\t\t}\r\n\r\n\t\tif (!(obj instanceof Funcall)) {\r\n\t\t\tif (!(this.fun instanceof Fun && this.fun.expr)) return false;\r\n\r\n\t\t\treturn this.expandOnce().equals(obj);\r\n\t\t}\r\n\r\n\t\tif (obj.fun instanceof Funcall) {\r\n\t\t\treturn this.equals(obj.expandOnce());\r\n\t\t}\r\n\r\n\t\tvar thisHasFunExpr = this.fun instanceof Fun && this.fun.expr,\r\n\t\t\tobjHasFunExpr = obj.fun instanceof Fun && obj.fun.expr;\r\n\t\t\r\n\t\tif (this.fun == obj.fun || !thisHasFunExpr && !objHasFunExpr) {\r\n\t\t\tif (this.fun != obj.fun) return false;\r\n\r\n\t\t\tif (!thisHasFunExpr && !objHasFunExpr) {\r\n\t\t\t\tfor (var i = 0; i < this.args.length; i++) {\r\n\t\t\t\t\tif (!this.args[i].equals(obj.args[i])) return false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.args.every((_, i) => {\r\n\t\t\t\treturn this.args[i].equals(obj.args[i]);\r\n\t\t\t})) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (thisHasFunExpr) {\r\n\t\t\treturn this.expandOnce().equals(obj);\r\n\t\t}\r\n\r\n\t\treturn this.equals(obj.expandOnce());\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tvar args: any = this.args.map(arg => {\r\n\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\r\n\t\t\treturn arg.toIndentedString(indent + 1);\r\n\t\t});\r\n\t\r\n\t\tif (args.join('').length <= 50) {\r\n\t\t\targs = this.args.map(arg => {\r\n\t\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\r\n\t\t\t\treturn arg.toIndentedString(indent);\r\n\t\t\t});\r\n\t\r\n\t\t\targs = args.join(', ');\r\n\t\t\t\r\n\t\t\tif (this.fun instanceof Schema) {\r\n\t\t\t\treturn `${this.fun.name || `(${this.fun})`}(${args})`;\r\n\t\t\t} else {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t!(this.fun instanceof Fun) || !this.fun.name\r\n\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\r\n\t\t\t\t\t\t: this.fun.name,\r\n\t\t\t\t\t`(${args})`\r\n\t\t\t\t].join('');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\r\n\t\t\t\r\n\t\t\tif (this.fun instanceof Schema) {\r\n\t\t\t\treturn [\r\n\t\t\t\t\tthis.fun.name || `(${this.fun.toIndentedString(indent)})`,\r\n\t\t\t\t\t'(',\r\n\t\t\t\t\t'\\t' + args,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t\t} else {\r\n\t\t\t\treturn [\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\t!(this.fun instanceof Fun) || !('name' in this.fun && this.fun.name)\r\n\t\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\r\n\t\t\t\t\t\t\t: this.fun.name\r\n\t\t\t\t\t) + '(',\r\n\t\t\t\t\t'\\t' + args,\r\n\t\t\t\t\t')'\r\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tif (this.fun instanceof Schema) {\r\n\t\t\treturn (\r\n\t\t\t\tthis.fun.name\r\n\t\t\t\t\t? `\\\\href{#schema-${this.fun.isProved() ? 'p' : 'np'}-${this.fun.name}}{\\\\textsf{${Node.escapeTeX(this.fun.name)}}}`\r\n\t\t\t\t\t: this.fun.toTeXString(false)\r\n\t\t\t) + `\\\\mathord{\\\\left(${this.args.map(arg => {\r\n\t\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\r\n\t\t\t}).join(', ')}\\\\right)}`;\r\n\t\t}\r\n\r\n\t\tif (this.fun instanceof ObjectFun)\r\n\t\t\treturn this.fun.funcallToTeXString(this.args, prec);\r\n\t\t\r\n\t\tvar args = this.args.map(arg => {\r\n\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t!(isNameable(this.fun) && this.fun.name) || this.fun instanceof Variable\r\n\t\t\t\t? this.fun.toTeXString(false)\r\n\t\t\t\t: this.fun.name.length == 1\r\n\t\t\t\t\t? Node.escapeTeX(this.fun.name)\r\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.fun.name)}}`\r\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\r\n\t}\r\n}","import Metaexpr from \"./Metaexpr\";\r\n\r\nexport default abstract class Expr0 extends Metaexpr {\r\n\t\r\n}","import Node, { Precedence } from './Node';\r\nimport ObjectType from './ObjectType';\r\nimport Type from './Type';\r\n\r\ninterface SimpleMetaTypeArgumentType {\r\n\tfunctional: false;\r\n\tleft: Type[];\r\n\tright: Type;\r\n}\r\n\r\ninterface FunctionalMetaTypeArgumentType {\r\n\tfunctional: true;\r\n\tfrom: ObjectType[];\r\n\tto: MetaType;\r\n}\r\n\r\ntype MetaTypeArgumentType = SimpleMetaTypeArgumentType | FunctionalMetaTypeArgumentType;\r\n\r\nexport default class MetaType extends Type {\r\n\t\r\n\tpublic readonly left: Type[];\r\n\tpublic readonly right: Type;\r\n\tpublic readonly from: ObjectType[];\r\n\tpublic readonly to: MetaType;\r\n\r\n\tconstructor (o: MetaTypeArgumentType) {\r\n\t\tsuper(null, null, null, o.functional);\r\n\r\n\t\tif (typeof o.functional != 'boolean')\r\n\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\r\n\r\n\t\tif (o.functional == false) {\r\n\t\t\tif (!(o.left instanceof Array))\r\n\t\t\t\tthrow Node.error('left should be an array', null);\r\n\r\n\t\t\tthis.left = o.left;\r\n\t\t\tthis.right = o.right;\r\n\t\t} else {\r\n\t\t\tif (o.from.some(f => !(f instanceof ObjectType)))\r\n\t\t\t\tthrow Node.error('o.from.some(f => !(f instanceof ObjectType))', null);\r\n\t\t\tif (!(o.to instanceof MetaType))\r\n\t\t\t\tthrow Node.error('!(o.to instanceof MetaType)', null);\r\n\r\n\t\t\tif (o.to.isFunctional)\r\n\t\t\t\tthrow Node.error('Functional metatype in functional metatype is not supported', null);\r\n\r\n\t\t\tthis.from = o.from;\r\n\t\t\tthis.to = o.to;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic resolve(): MetaType {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number) {\r\n\t\tif (this.isSimple) return `[${this.left.join(', ')} |- ${this.right}]`;\r\n\r\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tthrow new Error('Method not implemented.');\r\n\t}\r\n\r\n\tpublic equals(t: Type): boolean {\r\n\t\tif (!(t instanceof MetaType)) return false;\r\n\r\n\t\tif (this.isSimple != t.isSimple) return false;\r\n\r\n\t\tif (this.isSimple) {\r\n\t\t\tif (this.left.length != t.left.length) return false;\r\n\r\n\t\t\tfor (let i = 0; i < this.left.length; i++) {\r\n\t\t\t\tif (!this.left[i].equals(t.left[i])) return false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.right.equals(t.right)) return false;\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (this.from.length != t.from.length) return false;\r\n\r\n\t\tfor (let i = 0; i < this.from.length; i++)\r\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\r\n\r\n\t\treturn this.to.equals(t.to);\r\n\t}\r\n}","import ExpressionResolver from \"../ExpressionResolver\";\r\nimport Scope from \"../Scope\";\r\nimport $Variable from \"./$Variable\";\r\nimport Expr0 from \"./Expr0\";\r\nimport Fun from \"./Fun\";\r\nimport Metaexpr from \"./Metaexpr\";\r\nimport Node, { Precedence } from \"./Node\";\r\nimport ObjectType from \"./ObjectType\";\r\nimport Type from \"./Type\";\r\nimport Variable from \"./Variable\";\r\n\r\ninterface SchemaArgumentType {\r\n\tannotations: string[];\r\n\taxiomatic: boolean;\r\n\ttype?: Type;\r\n\tname?: string;\r\n\tparams?: Variable[];\r\n\tdef$s: $Variable[];\r\n\texpr?: Metaexpr;\r\n\tdoc?: string;\r\n\ttex?: string;\r\n}\r\n\r\nexport default class Schema extends Fun {\r\n\r\n\tpublic readonly axiomatic: boolean;\r\n\tpublic readonly def$s: $Variable[];\r\n\tprivate _isProvedCache: boolean;\r\n\r\n\tconstructor ({doc, tex, annotations, axiomatic, type, /* nullable */ name, params, def$s, expr}: SchemaArgumentType, scope?: Scope) {\r\n\t\tsuper({doc, tex, annotations, type, name, params, expr}, scope);\r\n\t\t\r\n\t\tthis.axiomatic = axiomatic;\r\n\t\tthis.def$s = def$s || [];\r\n\t}\r\n\t\r\n\tpublic isProved(hyps?) {\r\n\t\tif (this._isProvedCache) return true;\r\n\r\n\t\tif (!hyps && typeof this._isProvedCache == 'boolean') {\r\n\t\t\treturn this._isProvedCache;\r\n\t\t}\r\n\r\n\t\tvar cache = !hyps;\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\tvar ret = this.axiomatic || super.isProved(hyps);\r\n\t\tif (cache) this._isProvedCache = ret;\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\r\n\t\tif (!this.expr) return this;\r\n\r\n\t\t// 이름이 있는 것은 최상단에만 선언되므로 치환되어야 할 것을 포함하지 않으므로 확인하지 않는다는 생각이 들어 있다.\r\n\t\tif (this.name) return this;\r\n\r\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\r\n\t\tif (this.params.some(e => map.has(e)))\r\n\t\t\tthrow Error('Parameter collision');\r\n\r\n\t\treturn new Schema({\r\n\t\t\tannotations: this.annotations,\r\n\t\t\taxiomatic: this.axiomatic,\r\n\t\t\tname: null,\r\n\t\t\tparams: this.params,\r\n\t\t\tdef$s: this.def$s,\r\n\t\t\texpr: this.expr.substitute(map)\r\n\t\t});\r\n\t}\r\n\r\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\r\n\t\tif (!this.expr) return this;\r\n\t\tif (this.type instanceof ObjectType && this.name) return this;\r\n\r\n\t\treturn new Schema({\r\n\t\t\tannotations: this.annotations,\r\n\t\t\taxiomatic: this.axiomatic,\r\n\t\t\tname: null,\r\n\t\t\tparams: this.params,\r\n\t\t\tdef$s: this.def$s,\r\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\r\n\t\t});\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn [\r\n\t\t\t`∫ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\r\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\r\n\t\t\t'}'\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n\t\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tif (!this.name) {\r\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\r\n\t\t\treturn [\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\r\n\r\n\t\t\t\t(\r\n\t\t\t\t\tthis.params.length == 1\r\n\t\t\t\t\t? this.params[0].toTeXString(false)\r\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\r\n\t\t\t\t),\r\n\t\t\t\t'\\\\mapsto ',\r\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\r\n\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\r\n\t\t\t].join('');\r\n\t\t}\r\n\t\t\r\n\t\tvar id = `schema-${this.isProved() ? 'p' : 'np'}-${this.name}`;\r\n\t\r\n\t\tif (!root)\r\n\t\t\treturn `\\\\href{#${id}}\\\\mathsf{${Node.escapeTeX(this.name)}}`;\r\n\t\r\n\t\treturn `\\\\href{#${id}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}\\\\mathord{\\\\left(${this.params.map(e => e.toTeXStringWithId(Node.PREC_COMMA) + (e.guess ? `: \\\\texttt{@${e.guess}}` : '')).join(', ')}\\\\right)}:\\\\\\\\\\\\quad`\r\n\t\t\t\t+ this.expr.expandMeta(true).toTeXString(true);\r\n\t}\r\n}","import ExpressionResolver from \"../ExpressionResolver\";\r\nimport Scope from \"../Scope\";\r\nimport $Variable from \"./$Variable\";\r\nimport Expr0 from \"./Expr0\";\r\nimport Fun from \"./Fun\";\r\nimport Metaexpr, { EqualsPriority } from \"./Metaexpr\";\r\nimport Node, { Precedence } from \"./Node\";\r\nimport ObjectType from \"./ObjectType\";\r\nimport Type from \"./Type\";\r\nimport Variable from \"./Variable\";\r\n\r\ninterface ObjectFunArgumentType {\r\n\tannotations: string[];\r\n\ttype?: Type;\r\n\tname?: string;\r\n\tparams?: Variable[];\r\n\texpr?: Expr0;\r\n\tdoc?: string;\r\n\ttex?: string;\r\n}\r\n\r\nexport default class ObjectFun extends Fun {\r\n\t\r\n\tconstructor ({doc, tex, annotations, type, /* nullable */ name, params, expr}: ObjectFunArgumentType, scope?: Scope) {\r\n\t\tsuper({doc, tex, annotations, type, name, params, expr}, scope);\r\n\t}\r\n\r\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\r\n\t\tif (!this.expr) return this;\r\n\r\n\t\t// 이름이 있는 것은 최상단에만 선언되므로 치환되어야 할 것을 포함하지 않으므로 확인하지 않는다는 생각이 들어 있다.\r\n\t\tif (this.name) return this;\r\n\r\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\r\n\t\tif (this.params.some(e => map.has(e)))\r\n\t\t\tthrow Error('Parameter collision');\r\n\r\n\t\treturn new ObjectFun({\r\n\t\t\tannotations: this.annotations,\r\n\t\t\tname: null,\r\n\t\t\tparams: this.params,\r\n\t\t\texpr: this.expr.substitute(map)\r\n\t\t});\r\n\t}\r\n\r\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\r\n\t\tif (!this.expr) return this;\r\n\t\tif (this.type instanceof ObjectType && this.name) return this;\r\n\r\n\t\treturn new ObjectFun({\r\n\t\t\tannotations: this.annotations,\r\n\t\t\tname: null,\r\n\t\t\tparams: this.params,\r\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\r\n\t\t});\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\treturn [\r\n\t\t\t`ƒ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\r\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\r\n\t\t\t'}'\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tif (!this.name) {\r\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\r\n\t\t\treturn [\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\r\n\r\n\t\t\t\t(\r\n\t\t\t\t\tthis.params.length == 1\r\n\t\t\t\t\t? this.params[0].toTeXString(false)\r\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\r\n\t\t\t\t),\r\n\t\t\t\t'\\\\mapsto ',\r\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\r\n\r\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\r\n\t\t\t].join('');\r\n\t\t}\r\n\r\n\t\tif (!root)\r\n\t\t\treturn `\\\\href{#def-${this.name}}\\\\mathrm{${Node.escapeTeX(this.name)}}`;\r\n\t\r\n\t\tif (!this.expr)\r\n\t\t\treturn this.funcallToTeXString(this.params, prec);\r\n\t\r\n\t\treturn this.funcallToTeXString(this.params, Node.PREC_COLONEQQ)\r\n\t\t\t\t+ `\\\\coloneqq ${this.expr.toTeXString(Node.PREC_COLONEQQ)}`;\r\n\t}\r\n\r\n\tpublic funcallToTeXString(args, prec) {\r\n\t\targs = args.map(arg => {\r\n\t\t\treturn arg.toTeXString(this.tex ? this.precedence : Node.PREC_COMMA);\r\n\t\t});\r\n\t\r\n\t\tif (this.tex) {\r\n\t\t\treturn this.makeTeX('def-' + this.name, args, prec);\r\n\t\t}\r\n\t\r\n\t\treturn (\r\n\t\t\t!this.name\r\n\t\t\t\t? this.toTeXString(false)\r\n\t\t\t\t: `\\\\href{#def-${this.name}}{${this.name.length == 1 ? Node.escapeTeX(this.name) : `\\\\mathrm{${Node.escapeTeX(this.name)}}`}}`\r\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\r\n\t}\r\n}","import Node, { Precedence } from './Node';\r\nimport MetaType from './MetaType';\r\nimport ExpressionResolver from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport $Variable from './$Variable';\r\nimport ObjectType from './ObjectType';\r\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\r\nimport Expr0 from './Expr0';\r\nimport Variable from './Variable';\r\n\r\ninterface TeeArgumentType {\r\n\tleft: Metaexpr[];\r\n\tdef$s?: $Variable[];\r\n\tright: Metaexpr;\r\n}\r\n\r\nexport default class Tee extends Metaexpr {\r\n\r\n\tpublic readonly left;\r\n\tpublic readonly def$s: $Variable[];\r\n\tpublic readonly right;\r\n\r\n\tconstructor ({left, def$s, right}: TeeArgumentType, scope?: Scope) {\r\n\t\tif (!(left instanceof Array\r\n\t\t\t\t&& left.every(l => {\r\n\t\t\t\t\treturn l.type instanceof ObjectType\r\n\t\t\t\t\t\t|| l.type instanceof MetaType;\r\n\t\t\t\t}))) {\r\n\t\t\tconsole.log(left);\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t}\r\n\r\n\t\tif (def$s && !(def$s instanceof Array && def$s.every($ => $ instanceof $Variable)))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\r\n\t\tif (!(right.type instanceof ObjectType || right.type instanceof MetaType)) {\r\n\t\t\tconsole.log(right);\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t}\r\n\r\n\t\tif (right.type.isFunctional) {\r\n\t\t\tthrow Node.error('RHS of a rule cannot be a schema', scope);\r\n\t\t}\r\n\r\n\t\tsuper(scope, null, null, new MetaType({\r\n\t\t\tfunctional: false,\r\n\t\t\tleft: left.map(e => e.type),\r\n\t\t\tright: right.type\r\n\t\t}));\r\n\r\n\t\tthis.left = left;\r\n\t\tthis.def$s = def$s || [];\r\n\t\tthis.right = right;\r\n\t\tthis.precedence = Node.PREC_COMMA;\r\n\t}\r\n\r\n\tpublic isProved(hyps?) {\r\n\t\thyps = hyps || [];\r\n\t\r\n\t\treturn super.isProved(hyps) || this.right.isProved(hyps.concat(this.left));\r\n\t}\r\n\r\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\r\n\t\tvar left = this.left.map(e => e.substitute(map));\r\n\t\tvar right = this.right.substitute(map);\r\n\r\n\t\treturn new Tee({\r\n\t\t\tleft, right\r\n\t\t});\r\n\t}\r\n\r\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\r\n\t\tvar left = this.left.map(lef => lef.expandMeta(andFuncalls));\r\n\t\tvar right = this.right.expandMeta(andFuncalls);\r\n\r\n\t\treturn new Tee({left, right});\r\n\t}\r\n\r\n\tprotected getEqualsPriority(): EqualsPriority {\r\n\t\treturn EqualsPriority.TWO;\r\n\t}\r\n\r\n\tprotected equalsInternal(obj: Metaexpr): boolean {\r\n\t\tif (!(obj instanceof Tee)) {\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tif (this.left.length != obj.left.length) {\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tfor (var i = 0; i < this.left.length; i++) {\r\n\t\t\tif (!this.left[i].equals(obj.left[i])) return false;\r\n\t\t}\r\n\r\n\t\treturn this.right.equals(obj.right);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tif (!this.left.length) {\r\n\t\t\treturn '|- ' + this.right.toIndentedString(indent);\r\n\t\t}\r\n\t\r\n\t\treturn [\r\n\t\t\t'\\t' + this.left.map(e => e.toIndentedString(indent + 1)).join(',\\n' + '\\t'.repeat(indent + 1)),\r\n\t\t\t'|-',\r\n\t\t\t'\\t' + this.right.toIndentedString(indent + 1)\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n\t\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\tvar expanded = this.expandMeta(true) as Tee;\r\n\r\n\t\treturn [\r\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\r\n\t\t\t`{${expanded.left.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')} \\\\vdash ${expanded.right.toTeXString(Node.PREC_COMMA)}}`,\r\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\r\n\t\t].join('');\r\n\t}\r\n}","import Scope from \"../Scope\";\r\nimport Node from \"./Node\";\r\n\r\nexport default abstract class Type extends Node {\r\n\tpublic readonly isFunctional: boolean;\r\n\tpublic readonly isSimple: boolean;\r\n\t\r\n\tpublic abstract equals(t: Type): boolean;\r\n\r\n\tconstructor (scope: Scope, doc: string, tex: string, isFunctional: boolean) {\r\n\t\tsuper(scope, doc, tex);\r\n\t\tthis.isFunctional = isFunctional;\r\n\t\tthis.isSimple = !isFunctional;\r\n\t}\r\n\r\n\tpublic abstract resolve(): Type;\r\n}","export default interface Nameable {\r\n\tname: string;\r\n}\r\n\r\nexport function isNameable(obj: object): obj is Nameable {\r\n\treturn 'name' in obj;\r\n}","import Node, { Precedence } from './Node';\r\nimport Funcall from './Funcall';\r\nimport ExpressionResolver from '../ExpressionResolver';\r\nimport Scope from '../Scope';\r\nimport Tee from './Tee';\r\nimport Fun from './Fun';\r\nimport MetaType from './MetaType';\r\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\r\nimport Expr0 from './Expr0';\r\nimport Variable from './Variable';\r\nimport ObjectType from './ObjectType';\r\n\r\ninterface ReductionArgumentType {\r\n\tsubject: Metaexpr;\r\n\tguesses: Expr0[];\r\n\tleftargs: Metaexpr[];\r\n\texpected: Metaexpr;\r\n}\r\n\r\nexport default class Reduction extends Metaexpr {\r\n\t\r\n\tpublic readonly subject: Metaexpr;\r\n\tpublic readonly guesses;\r\n\tpublic readonly leftargs: Metaexpr[];\r\n\tpublic readonly reduced: Metaexpr;\r\n\r\n\tconstructor ({subject, guesses, leftargs, expected}: ReductionArgumentType, scope?: Scope) {\r\n\t\tif (guesses) {\r\n\t\t\tlet resolvedType = subject.type.resolve() as ObjectType | MetaType,\r\n\t\t\t\tparamTypes = resolvedType.from,\r\n\t\t\t\targTypes = guesses.map(e => e && e.type);\r\n\r\n\t\t\tif (paramTypes.length != argTypes.length)\r\n\t\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, scope);\r\n\r\n\t\t\tfor (var i = 0; i < paramTypes.length; i++) {\r\n\t\t\t\tif (argTypes[i] && !paramTypes[i].equals(argTypes[i])) {\r\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, scope);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (subject instanceof Fun) {\r\n\t\t\tsubject.params.forEach((p, i) => {\r\n\t\t\t\tif (!(guesses && guesses[i]) && !p.guess) {\r\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} could not be guessed`, scope);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\r\n\t\t\tvar derefs = subject.params.map((p, i) => {\r\n\t\t\t\tif (guesses && guesses[i]) return guesses[i];\r\n\r\n\t\t\t\tvar tee = (subject as Fun).expr.expandMeta(false) as Tee;\r\n\t\r\n\t\t\t\treturn Reduction.query(\r\n\t\t\t\t\tp.guess,\r\n\t\t\t\t\ttee.left,\r\n\t\t\t\t\tleftargs,\r\n\t\t\t\t\ttee.right,\r\n\t\t\t\t\texpected,\r\n\t\t\t\t\tscope\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\r\n\t\t\tsubject = new Funcall({\r\n\t\t\t\tfun: subject,\r\n\t\t\t\targs: derefs,\r\n\t\t\t}, scope);\r\n\t\t} else if (guesses) {\r\n\t\t\tthrow Node.error('Something\\'s wrong', scope);\r\n\t\t}\r\n\t\r\n\t\tif (!(subject.type instanceof MetaType && subject.type.isSimple))\r\n\t\t\tthrow Node.error('Subject is not reducible', scope);\r\n\t\r\n\t\tif (!(leftargs instanceof Array)\r\n\t\t\t\t|| leftargs.map(e => e instanceof Node).some(e => !e))\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\r\n\t\tvar paramTypes = subject.type.left,\r\n\t\t\tleftargTypes = leftargs.map(e => e.type);\r\n\r\n\t\tif (paramTypes.length != leftargTypes.length)\r\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${leftargTypes.length}`, scope);\r\n\r\n\t\tfor (let i = 0; i < paramTypes.length; i++) {\r\n\t\t\tif (!paramTypes[i].equals(leftargTypes[i]))\r\n\t\t\t\tthrow Node.error(`Illegal argument type (expected ${paramTypes[i]}): ${leftargTypes[i]}`, scope);\r\n\t\t}\r\n\r\n\t\tsuper(scope, null, null, subject.type.right);\r\n\r\n\t\tthis.subject = subject;\r\n\t\tthis.leftargs = leftargs;\r\n\r\n\t\tvar tee = subject.expandMeta(true);\r\n\r\n\t\tif (!(tee instanceof Tee)) {\r\n\t\t\tthrow Node.error('Assertion failed', scope);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < tee.left.length; i++) {\r\n\t\t\tif (!tee.left[i].equals(leftargs[i])) {\r\n\t\t\t\tthrow Node.error(`LHS #${i + 1} failed to match:\r\n\r\n--- EXPECTED ---\r\n${tee.left[i].expandMeta(true)}\r\n----------------\r\n\r\n--- RECEIVED ---\r\n${leftargs[i].expandMeta(true)}\r\n----------------`, scope);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (expected) {\r\n\t\t\tif (!tee.right.equals(expected)) {\r\n\t\t\t\tthrow Node.error(`RHS failed to match:\r\n\r\n--- EXPECTED ---\r\n${tee.right.expandMeta(true)}\r\n----------------\r\n\r\n--- RECEIVED ---\r\n${expected.expandMeta(true)}\r\n----------------`, scope);\r\n\t\t\t}\r\n\r\n\t\t\tthis.reduced = expected;\r\n\t\t} else {\r\n\t\t\tthis.reduced = tee.right;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic isProved(hyps?): boolean {\r\n\t\thyps = hyps || [];\r\n\t\t\r\n\t\treturn super.isProved(hyps)\r\n\t\t\t|| this.subject.isProved(hyps)\r\n\t\t\t\t&& this.leftargs.every(l => l.isProved(hyps));\r\n\t}\r\n\r\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\r\n\t\treturn this.reduced.substitute(map);\r\n\t}\r\n\r\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\r\n\t\treturn this.reduced.expandMeta(andFuncalls);\r\n\t}\r\n\r\n\tprotected getEqualsPriority(): EqualsPriority {\r\n\t\treturn EqualsPriority.FOUR;\r\n\t}\r\n\r\n\tprotected equalsInternal(obj: Metaexpr): boolean {\r\n\t\treturn this.reduced.equals(obj);\r\n\t}\r\n\r\n\tpublic static query(guess, left, leftargs, right, expected, scope: Scope) {\r\n\t\tif (guess.length == 0) throw Node.error('wut', scope);\r\n\r\n\t\tvar lef, ret;\r\n\r\n\t\tif (guess[0] == 'r') {\r\n\t\t\tif (!expected) {\r\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t}\r\n\r\n\t\t\tlef = right;\r\n\t\t\tret = expected;\r\n\t\t} else {\r\n\t\t\tif (!(1 <= guess[0] * 1 && guess[0] * 1 <= leftargs.length))\r\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent index out of range`, scope);\r\n\r\n\t\t\tlef = left[guess[0] * 1 - 1];\r\n\t\t\tret = leftargs[guess[0] * 1 - 1];\r\n\t\t}\r\n\r\n\t\treturn (function recurse(guess, lef: Metaexpr, node: Metaexpr, ptr) {\r\n\t\t\tnode = node.expandMeta(true);\r\n\t\t\t\r\n\t\t\tif (guess.length <= ptr) return node;\r\n\r\n\t\t\tif (/[0-9]/.test(guess[ptr])) {\r\n\t\t\t\tvar n = guess[ptr] * 1;\r\n\r\n\t\t\t\tif (lef instanceof Tee && node instanceof Tee) {\r\n\t\t\t\t\tif (lef.left.length != node.left.length) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent length mismatch`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!(1 <= n && n <= node.left.length)) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}: antecedent index out of range`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn recurse(guess, lef.left[n - 1], node.left[n - 1], ptr + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tif (!(lef instanceof Funcall) || !(node instanceof Funcall)) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (lef.fun.equals(node.fun)) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!(node.fun instanceof Fun && node.fun.expr)) {\r\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnode = node.expandOnce();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!node.args || !(1 <= n && n <= node.args.length))\r\n\t\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\r\n\t\t\t\treturn recurse(guess, lef.args[n - 1], node.args[n - 1], ptr + 1);\r\n\t\t\t} else if (guess[ptr] == 'r') {\r\n\t\t\t\tif (lef instanceof Tee && node instanceof Tee) {\r\n\t\t\t\t\treturn recurse(guess, lef.right, node.right, ptr + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t\t}\r\n\r\n\t\t\tthrow Node.error(`Cannot dereference @${guess}`, scope);\r\n\t\t})(guess, lef, ret, 1);\r\n\t}\r\n\r\n\tpublic toIndentedString(indent: number, root?: boolean): string {\r\n\t\tvar leftargs: any = this.leftargs.map(arg => {\r\n\t\t\treturn arg.toIndentedString(indent + 1);\r\n\t\t});\r\n\t\r\n\t\tif (leftargs.join('').length <= 50) {\r\n\t\t\tleftargs = this.leftargs.map(arg => {\r\n\t\t\t\treturn arg.toIndentedString(indent);\r\n\t\t\t});\r\n\t\r\n\t\t\tleftargs = leftargs.join(', ');\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\r\n\t\t\t\tleftargs,\r\n\t\t\t\t']'\r\n\t\t\t].join('');\r\n\t\t}\r\n\t\telse {\r\n\t\t\tleftargs = leftargs.join(',\\n' + '\\t'.repeat(indent + 1));\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\r\n\t\t\t\t'\\t' + leftargs,\r\n\t\t\t\t']'\r\n\t\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\r\n\t\treturn `${this.subject.toTeXString(false)}[${this.leftargs.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}]`;\r\n\t}\r\n}","var grammar;\r\n\r\nif (process.env.__webpack__) {\r\n\tgrammar = require('raw-loader!./grammar.pegjs').default;\r\n} else {\r\n\tvar fs = require('fs');\r\n\tvar path = require('path');\r\n\r\n\tgrammar = fs.readFileSync(path.join(__dirname, 'grammar.pegjs'), 'utf-8');\r\n}\r\n\r\nvar Program = require('./Program').default;\r\n\r\nmodule.exports = {grammar, Program};","export default \"start =\\r\\n\\t_ lines:(a:line _ {return a})* {return lines}\\r\\n\\r\\nline =\\r\\n\\timport\\r\\n\\t/ typedef\\r\\n\\t/ defv\\r\\n\\t/ defun\\r\\n\\t/ defschema\\r\\n\\r\\nevaluable =\\r\\n\\t_ e:evaluable_internal _ {return e}\\r\\n\\r\\nevaluable_internal =\\r\\n\\ttypedef\\r\\n\\t/ defv\\r\\n\\t/ defun\\r\\n\\t/ defschema\\r\\n\\t/ metaexpr\\r\\n\\r\\nimport =\\r\\n\\t'import' __\\r\\n\\tfilename:ident _\\r\\n\\tsem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'import',\\r\\n\\t\\t\\tfilename,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ntypedef =\\r\\n\\tdoc:(documentation __)?\\r\\n\\tbase:(\\\"base\\\" __)?\\r\\n\\t\\\"type\\\" __\\r\\n\\torigin:(o:ftype __ {return o})?\\r\\n\\tname:ident _ sem\\r\\n\\t{\\r\\n\\t\\tdoc = doc && doc[0];\\r\\n\\t\\t\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'typedef',\\r\\n\\t\\t\\tdoc,\\r\\n\\t\\t\\tbase: !!base,\\r\\n\\t\\t\\torigin,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefv =\\r\\n\\tdoc:(documentation __)? tex:(tex __)? type:type __ name:ident _ sem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefparam =\\r\\n\\ttex:(tex __)? type:type __ name:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tisParam: true,\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefschemaparam =\\r\\n\\ttex:(tex __)? type:type __ name:ident\\r\\n\\tguess:(_ ':' _ '@' g:$[a-z0-9_]+ {return g})?\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defv',\\r\\n\\t\\t\\tisParam: true,\\r\\n\\t\\t\\tguess,\\r\\n\\t\\t\\ttype,\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n \\r\\ndefun =\\r\\n\\tdoc:(documentation __)?\\r\\n\\ttex:(tex __)?\\r\\n\\trettype:type __\\r\\n\\tname:ident _\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\texpr:(\\r\\n\\t\\t\\\"{\\\" _\\r\\n\\t\\texpr:expr0 _\\r\\n\\t\\t\\\"}\\\"\\r\\n\\t\\t{return expr}\\r\\n\\t\\t/ sem {return null}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defun',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\ttex: tex && tex[0],\\r\\n\\t\\t\\trettype,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndefschema =\\r\\n\\tdoc:(documentation __)?\\r\\n\\tannotations: (a:annotation __ {return a})*\\r\\n\\taxiomatic:(\\\"axiomatic\\\" __)?\\r\\n\\t\\\"schema\\\" __\\r\\n\\tname:ident _\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defschemaparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defschemaparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"{\\\" _\\r\\n\\tdefdollars: (d:defdollar _ {return d})* _\\r\\n\\texpr:metaexpr _\\r\\n\\t\\\"}\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'defschema',\\r\\n\\t\\t\\tdoc: doc && doc[0],\\r\\n\\t\\t\\tannotations,\\r\\n\\t\\t\\taxiomatic: !!axiomatic,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\tdef$s: defdollars,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// var[...]\\r\\n// foo(...)[...]\\r\\n// foo[...][...]\\r\\n// (metaexpr)[...]\\r\\n// schema(?, ...)[...]\\r\\nreduction =\\r\\n\\tsubject:(\\r\\n\\t\\tschemacall\\r\\n\\t\\t/ var\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:metaexpr _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\tguesses:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:('?' {return null} / expr0) _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:('?' {return null} / expr0) _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)?\\r\\n\\tleftargs:(\\r\\n\\t\\t\\\"[\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:metaexpr _\\r\\n\\t\\t\\ttail:(\\\";\\\" _ e:metaexpr _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\"]\\\"\\r\\n\\t\\tb:(\\r\\n\\t\\t\\t_ '[' _\\r\\n\\t\\t\\t'as' __\\r\\n\\t\\t\\tm:metaexpr\\r\\n\\t\\t\\t']'\\r\\n\\t\\t\\t{return m}\\r\\n\\t\\t)?\\r\\n\\t\\t{return {a: a || [], b: b || null}}\\r\\n\\t)+\\r\\n\\t{\\r\\n\\t\\tvar ret = {\\r\\n\\t\\t\\t_type: 'reduction',\\r\\n\\t\\t\\tsubject,\\r\\n\\t\\t\\tguesses,\\r\\n\\t\\t\\tleftargs: leftargs[0].a,\\r\\n\\t\\t\\texpected: leftargs[0].b,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfor (var i = 1; i < leftargs.length; i++) {\\r\\n\\t\\t\\tret = {\\r\\n\\t\\t\\t\\t_type: 'reduction',\\r\\n\\t\\t\\t\\tsubject: ret,\\r\\n\\t\\t\\t\\tguesses: null,\\r\\n\\t\\t\\t\\tleftargs: leftargs[i].a,\\r\\n\\t\\t\\t\\texpected: leftargs[i].b,\\r\\n\\t\\t\\t\\tlocation: location()\\r\\n\\t\\t\\t};\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn ret;\\r\\n\\t}\\r\\n\\r\\n// var(...)\\r\\n// (metaexpr)(...)\\r\\nschemacall =\\r\\n\\tschema:(\\r\\n\\t\\tvar\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:metaexpr _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\targs:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:expr0 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'schemacall',\\r\\n\\t\\t\\tschema,\\r\\n\\t\\t\\targs,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// forall(f, g)\\r\\n// (expr0)(f, g)\\r\\nfuncall =\\r\\n\\tschema:(\\r\\n\\t\\tvar\\r\\n\\t\\t/ \\\"(\\\" _\\r\\n\\t\\te:expr0 _\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return e}\\r\\n\\t) _\\r\\n\\targs:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\ta:(\\r\\n\\t\\t\\thead:expr0 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\"\\r\\n\\t\\t{return a || []}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'funcall',\\r\\n\\t\\t\\tschema,\\r\\n\\t\\t\\targs,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// (T t) => expr0\\r\\n// (T t) => { expr0 }\\r\\nfunexpr =\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"=>\\\" _\\r\\n\\texpr:(\\r\\n\\t\\texpr0\\r\\n\\t\\t/ \\\"{\\\" _ e:expr0 _ \\\"}\\\" {return e}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'funexpr',\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n// (T t) => metaexpr_internal_1\\r\\n// (T t) => { $foo = ...; metaexpr }\\r\\nschemaexpr =\\r\\n\\tparams:(\\r\\n\\t\\t\\\"(\\\" _\\r\\n\\t\\tp:(\\r\\n\\t\\t\\thead:defparam _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)?\\r\\n\\t\\t\\\")\\\" _\\r\\n\\t\\t{return p || []}\\r\\n\\t)\\r\\n\\t\\\"=>\\\" _\\r\\n\\tfoo:(\\r\\n\\t\\texpr:metaexpr_internal_1\\r\\n\\t\\t{return {defdollars: [], expr}}\\r\\n\\t\\t/ \\\"{\\\" _\\r\\n\\t\\tdefdollars: (d:defdollar _ {return d})* _\\r\\n\\t\\texpr:metaexpr _\\r\\n\\t\\t\\\"}\\\"\\r\\n\\t\\t{return {defdollars, expr}}\\r\\n\\t)\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'schemaexpr',\\r\\n\\t\\t\\tparams,\\r\\n\\t\\t\\tdef$s: foo.defdollars,\\r\\n\\t\\t\\texpr: foo.expr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nmetaexpr =\\r\\n\\tleft:(\\r\\n\\t\\tl:(\\r\\n\\t\\t\\thead:metaexpr_internal_1 _\\r\\n\\t\\t\\ttail:(\\\",\\\" _ e:metaexpr_internal_1 _ {return e})*\\r\\n\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t)? {return l || []}\\r\\n\\t)\\r\\n\\t\\\"|-\\\" _\\r\\n\\tdefdollars: (d:defdollar _ {return d})* _\\r\\n\\tright:metaexpr\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'tee',\\r\\n\\t\\t\\tdef$s: defdollars,\\r\\n\\t\\t\\tleft,\\r\\n\\t\\t\\tright,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/ metaexpr_internal_1\\r\\n\\r\\n/*\\r\\n * 다음이 성립하여야 한다.\\r\\n *\\r\\n * - reduction이 schemacall보다 앞이다.\\r\\n * - schemacall이 var보다 앞이다.\\r\\n *\\r\\n */\\r\\nmetaexpr_internal_1 =\\r\\n\\treduction\\r\\n\\t/ schemacall\\r\\n\\t/ var\\r\\n\\t/ schemaexpr\\r\\n\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\" {return e}\\r\\n\\r\\nexpr0 =\\r\\n\\tfuncall\\r\\n\\t/ funexpr\\r\\n\\t/ var\\r\\n\\t/ \\\"(\\\" _ e:expr0 _ \\\")\\\" {return e}\\r\\n\\r\\ndefdollar =\\r\\n\\tname:dollar_ident _\\r\\n\\t'=' _\\r\\n\\texpr:metaexpr _\\r\\n\\tsem\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'def$',\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\texpr,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t};\\r\\n\\t}\\r\\n\\r\\ntype =\\r\\n\\tstype\\r\\n\\t/ ftype\\r\\n\\r\\nstype =\\r\\n\\tname:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'type',\\r\\n\\t\\t\\tftype: false,\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nftype =\\r\\n\\t\\\"[\\\" _\\r\\n\\tfrom:(\\r\\n\\t\\ttype:type {return [type]}\\r\\n\\t\\t/ (\\r\\n\\t\\t\\ttt:(\\r\\n\\t\\t\\t\\t\\\"(\\\" _\\r\\n\\t\\t\\t\\thead: type\\r\\n\\t\\t\\t\\ttail:(_ \\\",\\\" _ t:type {return t})*\\r\\n\\t\\t\\t\\t_ \\\")\\\"\\r\\n\\t\\t\\t\\t{return [head].concat(tail)}\\r\\n\\t\\t\\t)\\r\\n\\t\\t\\t{return tt}\\r\\n\\t\\t)\\r\\n\\t) _\\r\\n\\t\\\"->\\\" _\\r\\n\\tto:type _\\r\\n\\t\\\"]\\\"\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'type',\\r\\n\\t\\t\\tftype: true,\\r\\n\\t\\t\\tfrom,\\r\\n\\t\\t\\tto,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nvar =\\r\\n\\tat_var\\r\\n\\t/ dollar_var\\r\\n\\t/ plain_var\\r\\n\\r\\nat_var =\\r\\n\\tname:at_ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\ttype: '@',\\r\\n\\t\\t\\tname: name.slice(1),\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\ndollar_var =\\r\\n\\tname:dollar_ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\ttype: '$',\\r\\n\\t\\t\\tname: name,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nplain_var =\\r\\n\\tname:ident\\r\\n\\t{\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t_type: 'var',\\r\\n\\t\\t\\ttype: 'normal',\\r\\n\\t\\t\\tname,\\r\\n\\t\\t\\tlocation: location()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\nkeyword =\\r\\n\\t\\\"as\\\"\\r\\n\\t/ \\\"axiomatic\\\"\\r\\n\\t/ \\\"base\\\"\\r\\n\\t/ \\\"import\\\"\\r\\n\\t/ \\\"schema\\\"\\r\\n\\t/ \\\"type\\\";\\r\\n\\r\\nannotation =\\r\\n\\t'@discouraged'\\r\\n\\t/ '@deprecated'\\r\\n\\r\\nident =\\r\\n\\t$(!(keyword ![a-zA-Z0-9_]) [a-zA-Z0-9_]+)\\r\\n\\r\\nat_ident =\\r\\n\\t$('@' [a-zA-Z0-9_]+)\\r\\n\\r\\ndollar_ident =\\r\\n\\t$('$' [a-zA-Z0-9_]+)\\r\\n\\r\\ndocumentation =\\r\\n\\t'\\\"' b:$(!'\\\"' a:. {return a})* '\\\"' {\\r\\n\\t\\treturn b\\r\\n\\t}\\r\\n\\r\\ntex =\\r\\n\\t'$' b:$(!'$' a:. {return a})* '$' {\\r\\n\\t\\treturn b\\r\\n\\t}\\r\\n\\r\\ncomment =\\r\\n\\t\\\"#\\\" (!newline .)*\\r\\n\\t/ \\\"//\\\" (!newline .)*\\r\\n\\t/ \\\"/*\\\" (!\\\"*/\\\" .)* \\\"*/\\\"\\r\\n\\r\\nnewline =\\r\\n\\t\\\"\\\\r\\\\n\\\" / \\\"\\\\r\\\" / \\\"\\\\n\\\"\\r\\n\\r\\n// optional whitespace\\r\\n_ =\\r\\n\\t([ \\\\t\\\\n\\\\r] / comment)*\\r\\n\\r\\n// mandatory whitespace\\r\\n__ =\\r\\n\\t([ \\\\t\\\\n\\\\r] / comment)+\\r\\n\\r\\nsem =\\r\\n\\t\\\";\\\"\";","import Scope from './Scope';\r\nimport PegInterface from './PegInterface';\r\nimport { EvaluableObject, LineObject } from './PegInterfaceDefinitions';\r\nimport ProofExplorer from './ProofExplorer';\r\n\r\nexport default class Program {\r\n\tpublic scope = new Scope(null);\r\n\tpublic readonly parser;\r\n\tpublic readonly scopeMap: Map<string, Scope> = new Map();\r\n\t\r\n\tconstructor (parser) {\r\n\t\tif (!parser) throw Error('no');\r\n\t\tthis.parser = parser;\r\n\t}\r\n\r\n\tpublic async loadModule(filename, loader): Promise<Scope> {\r\n\t\treturn this.scope = await this.loadModuleInternal(filename, loader);\r\n\t}\r\n\r\n\tprivate async loadModuleInternal(filename, loader): Promise<Scope> {\r\n\t\tif (this.scopeMap.has(filename)) {\r\n\t\t\treturn this.scopeMap.get(filename);\r\n\t\t}\r\n\r\n\t\tvar scope = new Scope(null);\r\n\r\n\t\tvar code = await loader(filename);\r\n\t\tvar parsed = this.parser.parse(code);\r\n\t\tawait this.feed(parsed, scope, loader);\r\n\r\n\t\tthis.scopeMap.set(filename, scope);\r\n\t\treturn scope;\r\n\t}\r\n\r\n\tpublic async feed(lines: LineObject[], scope: Scope=this.scope, loader) {\r\n\t\tfor (var i = 0; i < lines.length; i++) {\r\n\t\t\tvar line = lines[i];\r\n\t\t\t\r\n\t\t\tswitch (line._type) {\r\n\t\t\t\tcase 'import':\r\n\t\t\t\t\tvar scope2 = await this.loadModuleInternal(line.filename, loader);\r\n\t\t\t\t\tscope.importMap.set(line.filename, scope2);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'typedef':\r\n\t\t\t\t\tvar type = PegInterface.type(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasType(type.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Type ${type.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addType(type);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defv':\r\n\t\t\t\t\tvar variable = PegInterface.variable(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasVariable(variable.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Definition ${variable.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addVariable(variable);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defun':\r\n\t\t\t\t\tvar fun = PegInterface.fun(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasVariable(fun.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Definition ${fun.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addFun(fun);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'defschema':\r\n\t\t\t\t\tvar schema = PegInterface.schema(line, scope);\r\n\r\n\t\t\t\t\tif (scope.hasSchema(schema.name)) {\r\n\t\t\t\t\t\tthrow scope.error(`Schema ${schema.name} has already been declared`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.addSchema(schema);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tpublic evaluate(line: EvaluableObject) {\r\n\t\tswitch (line._type) {\r\n\t\t\tcase 'typedef':\r\n\t\t\t\treturn PegInterface.type(line, this.scope);\r\n\t\t\tcase 'defv':\r\n\t\t\t\treturn PegInterface.variable(line, this.scope);\r\n\t\t\tcase 'defun':\r\n\t\t\t\treturn PegInterface.fun(line, this.scope);\r\n\t\t\tcase 'defschema':\r\n\t\t\tcase 'schemaexpr':\r\n\t\t\t\treturn PegInterface.schema(line, this.scope);\r\n\t\t\tcase 'tee':\r\n\t\t\t\treturn PegInterface.tee(line, this.scope);\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn PegInterface.reduction(line, this.scope);\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\treturn PegInterface.schemacall(line, this.scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PegInterface.metavar(line, this.scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getProofExplorer(name: string, ktx) {\r\n\t\treturn ProofExplorer.get(this.scope, name, ktx);\r\n\t}\r\n}","import ObjectType from './nodes/ObjectType';\r\nimport Variable from './nodes/Variable';\r\nimport Fun from './nodes/Fun';\r\nimport StackTrace from './StackTrace';\r\nimport $Variable from './nodes/$Variable';\r\nimport Metaexpr from './nodes/Metaexpr';\r\n\r\nexport type NestedTypeInput = string | NestedTypeInput[];\r\n\r\nexport default class Scope {\r\n\tpublic readonly importMap: Map<string, Scope> = new Map();\r\n\r\n\tpublic readonly typedefMap: Map<string, ObjectType> = new Map();\r\n\tpublic readonly defMap: Map<string, Variable | Fun> = new Map();\r\n\tpublic readonly schemaMap: Map<string, Fun> = new Map();\r\n\tpublic readonly $Map: Map<string, $Variable> = new Map();\r\n\tpublic readonly hypotheses: Metaexpr[] = [];\r\n\r\n\tpublic readonly parent: Scope;\r\n\tpublic readonly root: Scope;\r\n\r\n\tpublic readonly trace: StackTrace;\r\n\tpublic baseType: ObjectType;\r\n\r\n\tconstructor (parent: Scope, trace?: StackTrace) {\r\n\t\tthis.parent = parent;\r\n\t\tthis.root = parent ? parent.root : this;\r\n\r\n\t\tif (trace && !(trace instanceof StackTrace)) {\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tthis.trace = trace || new StackTrace();\r\n\r\n\t\tthis.baseType = parent ? parent.baseType : null;\r\n\t}\r\n\r\n\tpublic extend(type, name, location): Scope {\r\n\t\tvar child = new Scope(this, this.trace.extend(type, name, location));\r\n\t\tthis.hypotheses.forEach(h => child.hypotheses.push(h));\r\n\t\treturn child;\r\n\t}\r\n\r\n\tpublic error(message: string): Error {\r\n\t\treturn this.trace.error(message);\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic hasOwnType(name: NestedTypeInput): boolean {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\treturn this.typedefMap.has(name)\r\n\t\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnType(name));\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\treturn name.map(e => {\r\n\t\t\treturn this.hasOwnType(e);\r\n\t\t}).every(e => e);\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic hasType(name: NestedTypeInput): boolean {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\treturn this.hasOwnType(name)\r\n\t\t\t\t|| (!!this.parent && this.parent.hasType(name));\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\treturn name.map(e => {\r\n\t\t\treturn this.hasType(e);\r\n\t\t}).every(e => e);\r\n\t}\r\n\r\n\tpublic addType(type: ObjectType): ObjectType {\r\n\t\tif (!(type instanceof ObjectType))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (!type.name)\r\n\t\t\tthrow this.error('Something\\'s wrong');\r\n\r\n\t\tif (this.hasOwnType(type.name))\r\n\t\t\tthrow this.error(`Type ${type.name} has already been declared`);\r\n\r\n\t\tif (type.isBaseType) {\r\n\t\t\tif (this.baseType) {\r\n\t\t\t\tthrow this.error('A base type already exists');\r\n\t\t\t}\r\n\r\n\t\t\t(function broadcast(scope: Scope) {\r\n\t\t\t\tscope.baseType = type;\r\n\t\t\t\tif (scope.parent) broadcast(scope.parent);\r\n\t\t\t})(this);\r\n\t\t}\r\n\r\n\t\tthis.typedefMap.set(type.name, type);\r\n\t\treturn type;\r\n\t}\r\n\r\n\t/*\r\n\t * Possible input values:\r\n\t * 'st'\t\t\t\t\t\t-> st\r\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\r\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\r\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\r\n\t */\r\n\tpublic getType(name: NestedTypeInput): ObjectType {\r\n\t\tif (typeof name == 'string') {\r\n\t\t\tif (!this.hasType(name))\r\n\t\t\t\tthrow this.error(`Type ${name} is not defined`);\r\n\r\n\t\t\treturn this.typedefMap.has(name)\r\n\t\t\t\t? this.typedefMap.get(name)\r\n\t\t\t\t: (!!this.parent && this.parent.getType(name))\r\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\t\treturn s.hasType(name)\r\n\t\t\t\t\t})[0].getType(name);\r\n\t\t}\r\n\r\n\t\tif (!(name instanceof Array))\r\n\t\t\tthrow this.error('Argument is malformed');\r\n\r\n\t\tif (name.length < 2)\r\n\t\t\tthrow this.error('Illegal array length');\r\n\r\n\t\tvar from = name.slice(0, name.length - 1).map(e => {\r\n\t\t\treturn this.getType(e);\r\n\t\t});\r\n\r\n\t\tvar to = this.getType(name[name.length - 1]);\r\n\r\n\t\treturn new ObjectType({\r\n\t\t\tfunctional: true,\r\n\t\t\tfrom,\r\n\t\t\tto\r\n\t\t});\r\n\t}\r\n\r\n\tpublic hasOwnVariable(name: string): boolean {\r\n\t\treturn this.defMap.has(name)\r\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnVariable(name));\r\n\t}\r\n\r\n\tpublic hasVariable(name: string): boolean {\r\n\t\treturn this.hasOwnVariable(name)\r\n\t\t\t|| (!!this.parent && this.parent.hasVariable(name));\r\n\t}\r\n\r\n\tpublic addVariable(variable: Variable | Fun): Variable | Fun {\r\n\t\tif (!(variable instanceof Variable))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwnVariable(variable.name))\r\n\t\t\tthrow this.error(`Definition ${variable.name} has already been declared`);\r\n\r\n\t\tthis.defMap.set(variable.name, variable);\r\n\t\treturn variable;\r\n\t}\r\n\r\n\tpublic addFun(fun: Fun): Fun {\r\n\t\tif (!(fun instanceof Fun))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (!fun.name)\r\n\t\t\tthrow this.error('Cannot add anonymous fun to scope');\r\n\r\n\t\tif (this.hasOwnVariable(fun.name))\r\n\t\t\tthrow this.error(`Definition ${fun.name} has already been declared`);\r\n\r\n\t\tthis.defMap.set(fun.name, fun);\r\n\t\treturn fun;\r\n\t}\r\n\r\n\tpublic getVariable(name: string): Variable | Fun {\r\n\t\tif (!this.hasVariable(name))\r\n\t\t\tthrow this.error(`Definition ${name} is not defined`);\r\n\r\n\t\treturn this.defMap.has(name)\r\n\t\t\t? this.defMap.get(name)\r\n\t\t\t: (!!this.parent && this.parent.getVariable(name))\r\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\treturn s.hasVariable(name)\r\n\t\t\t\t})[0].getVariable(name);\r\n\t}\r\n\r\n\tpublic hasOwnSchema(name: string): boolean {\r\n\t\treturn this.schemaMap.has(name) || this.defMap.has(name)\r\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnSchema(name));\r\n\t}\r\n\r\n\tpublic hasSchema(name: string): boolean {\r\n\t\treturn this.hasOwnSchema(name)\r\n\t\t\t|| (!!this.parent && this.parent.hasSchema(name));\r\n\t}\r\n\r\n\tpublic addSchema(schema: Fun): Fun {\r\n\t\tif (!(schema instanceof Fun))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwnSchema(schema.name))\r\n\t\t\tthrow this.error(`Schema ${schema.name} has already been declared`);\r\n\r\n\t\tthis.schemaMap.set(schema.name, schema);\r\n\t\treturn schema;\r\n\t}\r\n\r\n\tpublic getSchema(name: string): Variable | Fun {\r\n\t\tif (!this.hasSchema(name))\r\n\t\t\tthrow this.error(`Schema ${name} is not defined`);\r\n\r\n\t\treturn this.schemaMap.has(name)\r\n\t\t\t? this.schemaMap.get(name)\r\n\t\t\t: this.defMap.has(name)\r\n\t\t\t\t? this.defMap.get(name)\r\n\t\t\t\t: (!!this.parent && this.parent.getSchema(name))\r\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\t\treturn s.hasSchema(name)\r\n\t\t\t\t\t})[0].getSchema(name);\r\n\t}\r\n\r\n\tpublic hasOwn$(name: string): boolean {\r\n\t\treturn this.$Map.has(name)\r\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwn$(name));\r\n\t}\r\n\r\n\tpublic has$(name: string): boolean {\r\n\t\treturn this.hasOwn$(name)\r\n\t\t\t|| (!!this.parent && this.parent.has$(name));\r\n\t}\r\n\r\n\tpublic add$($: $Variable): $Variable {\r\n\t\tif (!($ instanceof $Variable))\r\n\t\t\tthrow this.error('Illegal argument type');\r\n\r\n\t\tif (this.hasOwn$($.name))\r\n\t\t\tthrow this.error(`$ variable ${$.name} has already been declared`);\r\n\r\n\t\tthis.$Map.set($.name, $);\r\n\t\treturn $;\r\n\t}\r\n\r\n\tpublic get$(name: string): $Variable {\r\n\t\tif (!this.has$(name))\r\n\t\t\tthrow this.error(`$ variable ${name} is not defined`);\r\n\r\n\t\treturn this.$Map.has(name)\r\n\t\t\t? this.$Map.get(name)\r\n\t\t\t: (!!this.parent && this.parent.get$(name))\r\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\r\n\t\t\t\t\treturn s.has$(name)\r\n\t\t\t\t})[0].get$(name);\r\n\t}\r\n}","export default class StackTrace {\r\n\tpublic readonly stack: any[];\r\n\r\n\tconstructor (stack?: any[]) {\r\n\t\tthis.stack = stack || [];\r\n\t}\r\n\r\n\tpublic extend(type, name, location): StackTrace {\r\n\t\treturn new StackTrace([[type, name, location]].concat(this.stack));\r\n\t}\r\n\r\n\tpublic error(message: string) {\r\n\t\tvar filename = typeof process != 'undefined' && process.argv[2];\r\n\r\n\t\treturn new Error(\r\n\t\t\tmessage\r\n\t\t\t+ '\\n\\tat '\r\n\t\t\t+ (\r\n\t\t\t\tthis.stack.length\r\n\t\t\t\t\t? this.stack.map(([type, name, location]) => {\r\n\t\t\t\t\t\treturn `${type} ${name || '<anonymous>'} (${filename || '<unknown>'}:${location.start.line}:${location.start.column})`;\r\n\t\t\t\t\t}).join('\\n\\tat ')\r\n\t\t\t\t\t: `<root> (${filename || '<unknown>'}:1:1)`\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*\r\n * PEG.js의 출력과 적절한 클래스 사이를 잇는 인터페이스.\r\n * PEG.js의 출력은 여기에서만 처리해야 한다.\r\n */\r\n\r\nimport ObjectType from './nodes/ObjectType';\r\nimport Variable from './nodes/Variable';\r\nimport Tee from './nodes/Tee';\r\nimport Fun from './nodes/Fun';\r\nimport Funcall from './nodes/Funcall';\r\nimport Reduction from './nodes/Reduction';\r\nimport { Def$Object, DefschemaObject, DefunObject, DefvObject, Expr0Object, FuncallObject, FunexprObject, MetaexprObject, ReductionObject, SchemacallObject, SchemaexprObject, StypeObject, TeeObject, TypedefObject, TypeObject, VarObject } from './PegInterfaceDefinitions';\r\nimport Scope, { NestedTypeInput } from './Scope';\r\nimport $Variable from './nodes/$Variable';\r\nimport Metaexpr from './nodes/Metaexpr';\r\nimport Expr0 from './nodes/Expr0';\r\nimport Schema from './nodes/Schema';\r\nimport ObjectFun from './nodes/ObjectFun';\r\n\r\nfunction typeObjToString(obj: TypeObject): string {\r\n\tif (obj._type != 'type')\r\n\t\tthrow Error('Assertion failed');\r\n\r\n\tif (!obj.ftype) return (obj as StypeObject).name;\r\n\treturn '[' + obj.from.map(typeObjToString).join(', ') + ' -> '\r\n\t\t\t+ typeObjToString(obj.to) + ']';\r\n}\r\n\r\n/*\r\n * Scope#getType이나 Scope#hasType 등의 입력 형태로 바꾼다.\r\n * st\t\t\t\t\t\t-> 'st'\r\n * [cls -> st]\t\t\t\t-> ['cls', 'st']\r\n * [(cls, cls) -> st]\t\t-> ['cls', 'cls', 'st']\r\n * [[cls -> st] -> st]\t\t-> [['cls', 'st'], 'st']\r\n */\r\nfunction typeObjToNestedArr(obj: TypeObject): NestedTypeInput {\r\n\tif (obj._type != 'type')\r\n\t\tthrow Error('Assertion failed');\r\n\r\n\tif (!obj.ftype) {\r\n\t\tobj = obj as StypeObject;\r\n\r\n\t\tif (!obj.name)\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\treturn obj.name;\r\n\t} else {\r\n\t\tif (!obj.from || !obj.to)\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\treturn obj.from.map(typeObjToNestedArr).concat(\r\n\t\t\t[typeObjToNestedArr(obj.to)]\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction varObjToString(obj: VarObject): string {\r\n\tswitch (obj.type) {\r\n\t\tcase '@':\r\n\t\t\treturn `@${obj.name}`;\r\n\t\tcase '$':\r\n\t\t\treturn `${obj.name}`;\r\n\t\tcase 'normal':\r\n\t\t\treturn `${obj.name}`;\r\n\t\tdefault:\r\n\t\t\tthrow Error(`Unknown type ${obj.type}`);\r\n\t}\r\n}\r\n\r\nexport default class PI {\r\n\tpublic static type(obj: TypedefObject, parentScope: Scope): ObjectType {\r\n\t\tif (obj._type != 'typedef')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope: Scope = parentScope.extend('type', obj.name, obj.location);\r\n\r\n\t\tvar origin: ObjectType = obj.origin ? scope.getType(typeObjToNestedArr(obj.origin)) : null;\r\n\r\n\t\tvar name: string = obj.name;\r\n\t\tvar doc: string = obj.doc;\r\n\t\tvar base: boolean = obj.base;\r\n\r\n\t\tif (base && origin) {\r\n\t\t\tthrow scope.error('Base type should not be an alias');\r\n\t\t}\r\n\r\n\t\tif (origin) {\r\n\t\t\treturn new ObjectType({\r\n\t\t\t\tname,\r\n\t\t\t\tdoc,\r\n\t\t\t\tbase,\r\n\t\t\t\torigin\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn new ObjectType({\r\n\t\t\tfunctional: false,\r\n\t\t\tname,\r\n\t\t\tdoc,\r\n\t\t\tbase\r\n\t\t});\r\n\t}\r\n\r\n\tpublic static variable(obj: DefvObject | VarObject, parentScope: Scope): Variable | Fun {\r\n\t\tif (!['defv', 'var'].includes(obj._type)) {\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('variable', obj.name, obj.location);\r\n\r\n\t\tif (obj._type == 'var') {\r\n\t\t\tif (obj.type != 'normal') {\r\n\t\t\t\tthrow scope.error(`Variable type ${obj.type} not allowed`);\r\n\t\t\t}\r\n\r\n\t\t\tif (!scope.hasVariable(obj.name))\r\n\t\t\t\tthrow scope.error(`Undefined identifier ${obj.name}`);\r\n\t\t\treturn scope.getVariable(obj.name);\r\n\t\t}\r\n\r\n\t\tif (!scope.hasType(typeObjToNestedArr(obj.type)))\r\n\t\t\tthrow scope.error(`Type ${typeObjToString(obj.type)} is not defined`);\r\n\r\n\t\tvar type = scope.getType(typeObjToNestedArr(obj.type));\r\n\r\n\t\treturn new Variable({\r\n\t\t\ttype,\r\n\t\t\tisParam: !!obj.isParam,\r\n\t\t\tguess: obj.guess || null,\r\n\t\t\tname: obj.name,\r\n\t\t\tdoc: obj.doc,\r\n\t\t\ttex: obj.tex\r\n\t\t}, scope);\r\n\t}\r\n\r\n\tpublic static fun(obj: DefunObject | FunexprObject, parentScope: Scope): Fun {\r\n\t\tif (obj._type != 'defun' && obj._type != 'funexpr')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar name = null,\r\n\t\t\tdoc = null,\r\n\t\t\ttex = null;\r\n\r\n\t\tif (obj._type == 'defun') {\r\n\t\t\tobj = obj as DefunObject;\r\n\t\t\tname = obj.name;\r\n\t\t\tdoc = obj.doc;\r\n\t\t\ttex = obj.tex;\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('fun', name, obj.location);\r\n\r\n\t\tvar type = null;\r\n\t\tvar params = obj.params.map(tvo => {\r\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\r\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\r\n\r\n\t\t\tvar tv = PI.variable(tvo, scope);\r\n\r\n\t\t\tif (scope.hasOwnVariable(tv.name))\r\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\r\n\r\n\t\t\treturn scope.addVariable(tv) as Variable;\r\n\t\t});\r\n\t\tvar expr = null;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'defun':\r\n\t\t\t\tif (!scope.hasType(typeObjToNestedArr(obj.rettype)))\r\n\t\t\t\t\tthrow scope.error(`Type ${typeObjToString(obj.rettype)} is not defined`);\r\n\r\n\t\t\t\tvar rettype = scope.getType(typeObjToNestedArr(obj.rettype));\r\n\r\n\t\t\t\tif (obj.expr) {\r\n\t\t\t\t\texpr = PI.expr0(obj.expr, scope);\r\n\t\t\t\t\tif (!rettype.equals(expr.type))\r\n\t\t\t\t\t\tthrow scope.error(`Expression type ${expr.type} failed to match the return type ${rettype} of fun ${name}`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttype = new ObjectType({\r\n\t\t\t\t\t\tfunctional: true,\r\n\t\t\t\t\t\tfrom: params.map(variable => variable.type),\r\n\t\t\t\t\t\tto: rettype\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'funexpr':\r\n\t\t\t\texpr = PI.expr0(obj.expr, scope);\r\n\t\t\t\ttype = null;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\r\n\t\treturn new ObjectFun({annotations: [], name, type, params, expr, doc, tex}, scope);\r\n\t}\r\n\r\n\tpublic static funcall(obj: FuncallObject, parentScope: Scope): Funcall {\r\n\t\tif (obj._type != 'funcall')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('funcall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\r\n\r\n\t\tvar fun = PI.expr0(obj.schema, scope);\r\n\r\n\t\tvar args = obj.args.map(arg => {\r\n\t\t\treturn PI.expr0(arg, scope);\r\n\t\t});\r\n\r\n\t\treturn new Funcall({fun, args}, scope);\r\n\t}\r\n\r\n\tpublic static metaexpr(obj: MetaexprObject, parentScope: Scope): Metaexpr {\r\n\t\tif (!['tee', 'reduction', 'schemacall', 'schemaexpr', 'var'].includes(obj._type))\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'tee':\r\n\t\t\t\treturn PI.tee(obj, scope);\r\n\t\t\tcase 'reduction':\r\n\t\t\t\treturn PI.reduction(obj, scope);\r\n\t\t\tcase 'schemacall':\r\n\t\t\t\treturn PI.schemacall(obj, scope);\r\n\t\t\tcase 'schemaexpr':\r\n\t\t\t\treturn PI.schema(obj, scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PI.metavar(obj, scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static expr0(obj: Expr0Object, parentScope: Scope): Expr0 {\r\n\t\tif (!['funcall', 'funexpr', 'var'].includes(obj._type)) {\r\n\t\t\tconsole.log(obj);\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t}\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'funcall':\r\n\t\t\t\treturn PI.funcall(obj, scope);\r\n\t\t\tcase 'funexpr':\r\n\t\t\t\treturn PI.fun(obj, scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\treturn PI.variable(obj, scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static metavar(obj: VarObject, parentScope: Scope): Metaexpr {\r\n\t\tif (obj._type != 'var')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\t// don't extend scope\r\n\t\tvar scope = parentScope;\r\n\r\n\t\tswitch (obj.type) {\r\n\t\t\tcase '@':\r\n\t\t\t\tif (obj.name.match(/^h[0-9]+$/)) {\r\n\t\t\t\t\tvar hypnum = Number(obj.name.slice(1)) - 1;\r\n\t\t\t\t\tif (hypnum >= scope.hypotheses.length) {\r\n\t\t\t\t\t\tthrow scope.error(`Hypothesis #${hypnum + 1} not found`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn scope.hypotheses[hypnum];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow scope.error(`Unknown selector query @${obj.name}`);\r\n\t\t\tcase '$':\r\n\t\t\t\tif (!scope.has$(obj.name)) {\r\n\t\t\t\t\tthrow scope.error(`${obj.name} is not defined`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn scope.get$(obj.name);\r\n\t\t\tcase 'normal':\r\n\t\t\t\tif (!scope.hasSchema(obj.name))\r\n\t\t\t\t\tthrow scope.error(`Schema ${obj.name} is not defined`);\r\n\r\n\t\t\t\treturn scope.getSchema(obj.name);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow scope.error(`Unknown type ${obj.type}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static tee(obj: TeeObject, parentScope: Scope): Tee {\r\n\t\tif (obj._type != 'tee')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('tee', null, obj.location);\r\n\r\n\t\tvar left = obj.left.map(o => PI.metaexpr(o, scope));\r\n\r\n\t\tvar scopeRight = scope.extend('tee.right', null, obj.right.location);\r\n\t\tleft.forEach(l => scopeRight.hypotheses.push(l));\r\n\r\n\t\tvar def$s = obj.def$s.map($ => {\r\n\t\t\tvar $v = PI.def$($, scopeRight);\r\n\r\n\t\t\tif (scopeRight.hasOwn$($v.name)) {\r\n\t\t\t\tthrow scopeRight.error(`${$.name} has already been declared`);\r\n\t\t\t}\r\n\r\n\t\t\treturn scopeRight.add$($v);\r\n\t\t});\r\n\r\n\t\tvar right = PI.metaexpr(obj.right, scopeRight);\r\n\r\n\t\treturn new Tee({left, def$s, right}, scope);\r\n\t}\r\n\r\n\tpublic static def$(obj: Def$Object, parentScope: Scope): $Variable {\r\n\t\tif (obj._type != 'def$')\r\n\t\t\tthrow Error('Assertion failed');\r\n\t\t\r\n\t\tvar scope = parentScope.extend('def$', obj.name, obj.location);\r\n\t\t\r\n\t\tvar expr = PI.metaexpr(obj.expr, scope);\r\n\r\n\t\treturn new $Variable({name: obj.name, expr}, scope);\r\n\t}\r\n\r\n\tpublic static schema(obj: DefschemaObject | SchemaexprObject, parentScope: Scope): Fun {\r\n\t\tif (obj._type != 'defschema' && obj._type != 'schemaexpr')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar name: string = null,\r\n\t\t\taxiomatic: boolean = false,\r\n\t\t\tdoc: string = null,\r\n\t\t\tannotations: string[] = [];\r\n\r\n\t\tif (obj._type == 'defschema') {\r\n\t\t\tname = obj.name; axiomatic = obj.axiomatic;\r\n\t\t\tdoc = obj.doc; annotations = obj.annotations;\r\n\t\t}\r\n\r\n\t\tvar scope = parentScope.extend('schema', name, obj.location);\r\n\r\n\t\tvar params = obj.params.map(tvo => {\r\n\t\t\tif (!scope.hasType(typeObjToNestedArr(tvo.type)))\r\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(tvo.type)} is not defined`);\r\n\r\n\t\t\tvar tv = PI.variable(tvo, scope);\r\n\r\n\t\t\tif (scope.hasOwnVariable(tv.name))\r\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\r\n\t\t\t\r\n\t\t\treturn scope.addVariable(tv) as Variable;\r\n\t\t});\r\n\r\n\t\tvar def$s = obj.def$s.map($ => {\r\n\t\t\tvar $v = PI.def$($, scope);\r\n\r\n\t\t\tif (scope.hasOwn$($v.name)) {\r\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\r\n\t\t\t}\r\n\r\n\t\t\treturn scope.add$($v);\r\n\t\t});\r\n\r\n\t\tvar expr = PI.metaexpr(obj.expr, scope);\r\n\r\n\t\treturn new Schema({doc, annotations, axiomatic, name, params, def$s, expr}, scope);\r\n\t}\r\n\r\n\tpublic static schemacall(obj: SchemacallObject, parentScope: Scope): Funcall {\r\n\t\tif (obj._type != 'schemacall')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('schemacall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\r\n\r\n\t\tvar fun = PI.metaexpr(obj.schema, scope);\r\n\r\n\t\tvar args = obj.args.map(obj => {\r\n\t\t\treturn PI.expr0(obj, scope);\r\n\t\t});\r\n\r\n\t\treturn new Funcall({\r\n\t\t\tfun,\r\n\t\t\targs\r\n\t\t}, scope);\r\n\t}\r\n\r\n\tpublic static reduction(obj: ReductionObject, parentScope: Scope): Reduction {\r\n\t\tif (obj._type != 'reduction')\r\n\t\t\tthrow Error('Assertion failed');\r\n\r\n\t\tvar scope = parentScope.extend('reduction', 'name' in obj.subject ? obj.subject.name : null, obj.location);\r\n\r\n\t\tvar subject = PI.metaexpr(obj.subject, scope);\r\n\r\n\t\tvar guesses = !obj.guesses\r\n\t\t\t? null\r\n\t\t\t: obj.guesses.map(g => {\r\n\t\t\t\treturn g && PI.expr0(g, scope);\r\n\t\t\t});\r\n\r\n\t\tvar leftargs = obj.leftargs.map(obj => {\r\n\t\t\treturn PI.metaexpr(obj, scope);\r\n\t\t});\r\n\r\n\t\tvar expected = obj.expected && PI.metaexpr(obj.expected, scope);\r\n\r\n\t\treturn new Reduction({\r\n\t\t\tsubject,\r\n\t\t\tguesses,\r\n\t\t\tleftargs,\r\n\t\t\texpected\r\n\t\t}, scope);\r\n\t}\r\n}","import ExpressionResolver from \"./ExpressionResolver\";\r\nimport $Variable from \"./nodes/$Variable\";\r\nimport Fun from \"./nodes/Fun\";\r\nimport Funcall from \"./nodes/Funcall\";\r\nimport Metaexpr from \"./nodes/Metaexpr\";\r\nimport { isNameable } from \"./nodes/Nameable\";\r\nimport ObjectFun from \"./nodes/ObjectFun\";\r\nimport Reduction from \"./nodes/Reduction\";\r\nimport Schema from \"./nodes/Schema\";\r\nimport Tee from \"./nodes/Tee\";\r\nimport Variable from \"./nodes/Variable\";\r\nimport Scope from \"./Scope\";\r\n\r\nexport default class ProofExplorer {\r\n\tpublic static get(scope: Scope, name: string, ktx) {\t\r\n\t\tvar DIAMOND = '&#x25C7;',\r\n\t\t\tDOWN = '&#x25BC;',\r\n\t\t\tUP = '&#x25B2;';\r\n\t\t\r\n\t\tif (!scope.hasSchema(name)) {\r\n\t\t\tthrow Error('wut');\r\n\t\t}\r\n\t\r\n\t\tvar theexpr = scope.getSchema(name);\r\n\t\r\n\t\tvar ncols = (function recurse(expr: Metaexpr) {\r\n\t\t\tif (expr instanceof Reduction) {\r\n\t\t\t\treturn Math.max(\r\n\t\t\t\t\t...expr.leftargs.map(recurse),\r\n\t\t\t\t\t((expr.subject instanceof Fun && expr.subject.name)\r\n\t\t\t\t\t\t|| (expr.subject instanceof Funcall\r\n\t\t\t\t\t\t\t\t&& isNameable(expr.subject.fun)\r\n\t\t\t\t\t\t\t\t&& expr.subject.fun.name)\r\n\t\t\t\t\t\t\t? 0 : recurse(expr.subject)),\r\n\t\t\t\t\t1\r\n\t\t\t\t);\r\n\t\t\t} else if (expr instanceof Schema) {\r\n\t\t\t\treturn Math.max(\r\n\t\t\t\t\t...expr.def$s.map($ => recurse($.expr)),\r\n\t\t\t\t\trecurse(expr.expr)\r\n\t\t\t\t) + 1;\r\n\t\t\t} else if (expr instanceof ObjectFun) {\r\n\t\t\t\treturn recurse(expr.expr) + 1;\r\n\t\t\t} else if (expr instanceof Tee) {\r\n\t\t\t\treturn Math.max(\r\n\t\t\t\t\t...expr.left.map(recurse),\r\n\t\t\t\t\t...expr.def$s.map($ => recurse($.expr)),\r\n\t\t\t\t\trecurse(expr.right)\r\n\t\t\t\t) + 1;\r\n\t\t\t} else {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t})(theexpr);\r\n\r\n\t\tfunction getHtmlLine(ctr: string | number, left: any[], h1: string, h2: string | string[], options?) {\r\n\t\t\tvar padding = left.length;\r\n\r\n\t\t\tvar {bbb=false, rrb=false} = options || {};\r\n\t\r\n\t\t\tvar htmlLeft = left.map((e, i, a) => `<td class=\"${rrb && i == a.length - 1 ? 'rrb' : 'brb'}\">${e.map(f => ktx(f.toTeXStringWithId(true))).join(', ')}</td>`).join('');\r\n\r\n\t\t\tfor (var i = 0; i < left.length; i++)\r\n\t\t\t\twhile(left[i].length) left[i].pop();\r\n\t\r\n\t\t\treturn `<tr><th>${ctr}</th>${htmlLeft}<td ${bbb ? 'class=\"bbb\" ' : ''}colspan=\"${ncols-padding}\">${h1}</td>${h2 instanceof Array ? h2.map(e => `<td>${e}</td>`).join('') : `<td colspan=\"2\">${h2}</td>`}</tr>`;\r\n\t\t}\r\n\r\n\t\tfunction exprToHtml(expr, expand?) {\r\n\t\t\tif (typeof expr == 'number') return `<b>${expr}</b>`;\r\n\t\t\tif (expr instanceof Array) return `<b>${expr[0]}&ndash;${expr[1]}</b>`;\r\n\t\t\tif (expand) return ktx(expr.expandMeta(true).toTeXString(true));\r\n\t\t\t\r\n\t\t\treturn ktx(expr.toTeXString(true));\r\n\t\t}\r\n\r\n\t\tvar ctr = 0;\r\n\r\n\t\tvar tree = (function getTree(\r\n\t\t\t\texpr: Metaexpr,\r\n\t\t\t\thypnumMap: Map<Metaexpr, number>,\r\n\t\t\t\t$Map: Map<Metaexpr, number>) {\r\n\t\t\t\r\n\t\t\tif (hypnumMap.has(expr)) {\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'R',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\tnum: hypnumMap.get(expr),\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t}\r\n\r\n\t\t\tif ($Map.has(expr)) {\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'R',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\tnum: $Map.get(expr),\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t}\r\n\r\n\t\t\tif (expr instanceof Reduction) {\r\n\t\t\t\tvar leftarglines = [];\r\n\t\t\t\tvar leftargnums = expr.leftargs.map(l => {\r\n\t\t\t\t\tif (hypnumMap.has(l)) return hypnumMap.get(l);\r\n\t\t\t\t\tif ($Map.has(l)) return $Map.get(l);\r\n\r\n\t\t\t\t\tvar lines = getTree(l, hypnumMap, $Map);\r\n\t\t\t\t\tleftarglines = leftarglines.concat(lines);\r\n\t\t\t\t\treturn lines[lines.length - 1].ctr;\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar args = null;\r\n\t\t\t\tvar subjectlines = [];\r\n\t\t\t\tvar subjectnum = hypnumMap.get(expr.subject)\r\n\t\t\t\t\t|| $Map.get(expr.subject)\r\n\t\t\t\t\t|| (expr.subject instanceof Funcall && $Map.has(expr.subject.fun)\r\n\t\t\t\t\t\t? (args = expr.subject.args, $Map.get(expr.subject.fun))\r\n\t\t\t\t\t\t: false)\r\n\t\t\t\t\t|| ((s => s instanceof Fun && s.name\r\n\t\t\t\t\t\t\t|| s instanceof Funcall && isNameable(s.fun) && s.fun.name)(expr.subject)\r\n\t\t\t\t\t\t? expr.subject\r\n\t\t\t\t\t\t: (subjectlines = getTree(expr.subject, hypnumMap, $Map))[subjectlines.length-1].ctr);\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\t...leftarglines,\r\n\t\t\t\t\t...subjectlines,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_type: 'E',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tsubject: subjectnum,\r\n\t\t\t\t\t\targs,\r\n\t\t\t\t\t\tleftargs: leftargnums,\r\n\t\t\t\t\t\treduced: expr.reduced\r\n\t\t\t\t\t}\r\n\t\t\t\t];\r\n\t\t\t} else if (expr instanceof Funcall) {\r\n\t\t\t\tif (hypnumMap.has(expr.fun)) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RC',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tschema: hypnumMap.get(expr.fun),\r\n\t\t\t\t\t\targs: expr.args,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($Map.has(expr.fun)) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RC',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tschema: $Map.get(expr.fun),\r\n\t\t\t\t\t\targs: expr.args,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (expr.fun instanceof Schema && expr.fun.name) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RCX',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!(expr.fun instanceof Schema)) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'NP',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar schemalines = getTree(expr.fun, hypnumMap, $Map);\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\t...schemalines,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_type: 'RC',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\tschema: schemalines[schemalines.length - 1].ctr,\r\n\t\t\t\t\t\targs: expr.args,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}\r\n\t\t\t\t];\r\n\t\t\t} else if (expr instanceof Variable) {\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'NP',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t} else if (expr instanceof Fun) {\r\n\t\t\t\tif (expr instanceof Schema && expr.name && expr != theexpr) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'RS',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!expr.expr) {\r\n\t\t\t\t\treturn [{\r\n\t\t\t\t\t\t_type: 'NP',\r\n\t\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\t\texpr\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$Map = new Map($Map);\r\n\r\n\t\t\t\tvar start = ctr + 1;\r\n\r\n\t\t\t\tvar $lines = [];\r\n\t\t\t\t\r\n\t\t\t\tif (expr instanceof Schema) {\r\n\t\t\t\t\texpr.def$s.forEach($ => {\r\n\t\t\t\t\t\tvar lines = getTree($.expr, hypnumMap, $Map);\r\n\t\t\t\t\t\t$lines = $lines.concat(lines);\r\n\r\n\t\t\t\t\t\tvar $num = lines[lines.length - 1].ctr;\r\n\t\t\t\t\t\t$Map.set($, $num);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'V',\r\n\t\t\t\t\t$lines,\r\n\t\t\t\t\tlines: getTree(expr.expr, hypnumMap, $Map),\r\n\t\t\t\t\t// getHtmlLine 함수가 이 배열을 조작하기 때문에\r\n\t\t\t\t\t// shallow copy 해야 한다.\r\n\t\t\t\t\tparams: expr.params.slice(),\r\n\t\t\t\t\tctr: [start ,ctr]\r\n\t\t\t\t}];\r\n\t\t\t} else if (expr instanceof Tee) {\r\n\t\t\t\thypnumMap = new Map(hypnumMap);\r\n\t\t\t\tvar leftlines = [];\r\n\r\n\t\t\t\tvar start = ctr + 1;\r\n\r\n\t\t\t\texpr.left.forEach(l => {\r\n\t\t\t\t\thypnumMap.set(l, ++ctr);\r\n\t\t\t\t\tleftlines.push({\r\n\t\t\t\t\t\t_type: 'H',\r\n\t\t\t\t\t\tctr,\r\n\t\t\t\t\t\texpr: l\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\t\t\t$Map = new Map($Map);\r\n\r\n\t\t\t\tvar $lines = [];\r\n\t\t\t\texpr.def$s.forEach($ => {\r\n\t\t\t\t\tvar lines = getTree($.expr, hypnumMap, $Map);\r\n\t\t\t\t\t$lines = $lines.concat(lines);\r\n\r\n\t\t\t\t\tvar $num = lines[lines.length - 1].ctr;\r\n\t\t\t\t\t$Map.set($, $num);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'T',\r\n\t\t\t\t\tleftlines,\r\n\t\t\t\t\t$lines,\r\n\t\t\t\t\trightlines: getTree(expr.right, hypnumMap, $Map),\r\n\t\t\t\t\tctr: [start, ctr]\r\n\t\t\t\t}];\r\n\t\t\t} else if (expr instanceof $Variable) {\r\n\t\t\t\tif (!$Map.has(expr)) {\r\n\t\t\t\t\tthrow Error(`${expr.name} is not defined`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: 'R',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\tnum: $Map.get(expr),\r\n\t\t\t\t\texpr: expr.expr\r\n\t\t\t\t}];\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('Unknown metaexpr', expr);\r\n\t\t\t\treturn [{\r\n\t\t\t\t\t_type: '?',\r\n\t\t\t\t\tctr: ++ctr,\r\n\t\t\t\t\texpr\r\n\t\t\t\t}];\r\n\t\t\t}\r\n\t\t})(theexpr, new Map(), new Map());\r\n\r\n\t\tvar html = '<table class=\"explorer\">';\r\n\t\thtml += `<tr><th>#</th><th colspan=\"${ncols}\">expr</th><th colspan=\"2\">rule</th></tr>`;\r\n\t\t\r\n\t\thtml += (function tree2html(lines, left) {\r\n\t\t\treturn lines.map(line => {\r\n\t\t\t\tswitch (line._type) {\r\n\t\t\t\t\tcase 'V':\r\n\t\t\t\t\t\treturn tree2html(line.$lines, left.concat([line.params]))\r\n\t\t\t\t\t\t\t+ tree2html(line.lines, left.concat([line.params]));\r\n\t\t\t\t\tcase 'T':\r\n\t\t\t\t\t\tvar newleft = left.concat([[]]);\r\n\r\n\t\t\t\t\t\tvar ret = '';\r\n\r\n\t\t\t\t\t\tif (line.leftlines.length == 0) {\r\n\t\t\t\t\t\t\tvar emptyleft = Array(left.length + 1).fill([]);\r\n\r\n\t\t\t\t\t\t\tret += getHtmlLine(\r\n\t\t\t\t\t\t\t\t'', emptyleft, '', '', {bbb: true, rrb: true}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tret += line.leftlines.map((line, i, a) => {\r\n\t\t\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\t\t\tnewleft,\r\n\t\t\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t\t\t'assumption',\r\n\t\t\t\t\t\t\t\t\t{bbb: i == a.length - 1, rrb: true}\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}).join('');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tret += tree2html(\r\n\t\t\t\t\t\t\tline.$lines,\r\n\t\t\t\t\t\t\tnewleft\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tret += tree2html(\r\n\t\t\t\t\t\t\tline.rightlines,\r\n\t\t\t\t\t\t\tnewleft\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\treturn ret;\r\n\t\t\t\t\tcase '?':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t'???'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'H':\r\n\t\t\t\t\t\tthrow Error('no');\r\n\t\t\t\t\tcase 'R':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.num)]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'RS':\r\n\t\t\t\t\tcase 'RCX':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.expr)]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'RC':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t[DIAMOND, `${exprToHtml(line.schema)} (${line.args.map(a => exprToHtml(a)).join(', ')})`]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'E':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.reduced, true),\r\n\t\t\t\t\t\t\t[DOWN, `${exprToHtml(line.subject)}${line.args ? ' (' + line.args.map(a => exprToHtml(a)).join(', ') + ')' : ''} [${line.leftargs.map(a => exprToHtml(a)).join(', ')}]`]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tcase 'NP':\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\r\n\t\t\t\t\t\t\t'<b class=\"red\">not proved</b>'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn getHtmlLine(\r\n\t\t\t\t\t\t\tline.ctr,\r\n\t\t\t\t\t\t\tleft,\r\n\t\t\t\t\t\t\t`Unknown type ${line._type}`,\r\n\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}).join('');\r\n\t\t})(tree[0].$lines.concat(tree[0].lines), []);\r\n\t\t\r\n\t\thtml += '</table>';\r\n\t\r\n\t\treturn html;\r\n\t}\r\n}"],"sourceRoot":""}