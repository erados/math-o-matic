var math =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/entry.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/parser.js":
/*!************************!*\
  !*** ./dist/parser.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(lines) {return lines},\n      peg$c1 = \"#\",\n      peg$c2 = peg$literalExpectation(\"#\", false),\n      peg$c3 = peg$anyExpectation(),\n      peg$c4 = \"typedef\",\n      peg$c5 = peg$literalExpectation(\"typedef\", false),\n      peg$c6 = function(type) {\r\n      \t\treturn {\r\n      \t\t\t_type: 'typedef',\r\n      \t\t\ttype\r\n      \t\t}\r\n      \t},\n      peg$c7 = \"defv\",\n      peg$c8 = peg$literalExpectation(\"defv\", false),\n      peg$c9 = function(typevar) {\r\n      \t\treturn {\r\n      \t\t\t_type: 'defv',\r\n      \t\t\ttypevar\r\n      \t\t}\r\n      \t},\n      peg$c10 = \"defun\",\n      peg$c11 = peg$literalExpectation(\"defun\", false),\n      peg$c12 = \"(\",\n      peg$c13 = peg$literalExpectation(\"(\", false),\n      peg$c14 = \",\",\n      peg$c15 = peg$literalExpectation(\",\", false),\n      peg$c16 = function(rettype, name, head, tv) {return tv},\n      peg$c17 = function(rettype, name, head, tail) {return [head].concat(tail)},\n      peg$c18 = \")\",\n      peg$c19 = peg$literalExpectation(\")\", false),\n      peg$c20 = function(rettype, name, p) {return p || []},\n      peg$c21 = \"=>\",\n      peg$c22 = peg$literalExpectation(\"=>\", false),\n      peg$c23 = function(rettype, name, params, expr) {return expr},\n      peg$c24 = function(rettype, name, params, expr) {\r\n      \t\t\treturn {\r\n      \t\t\t\t_type: 'defun',\r\n      \t\t\t\trettype,\r\n      \t\t\t\tname,\r\n      \t\t\t\tparams,\r\n      \t\t\t\texpr\r\n      \t\t\t}\r\n      \t\t},\n      peg$c25 = \"defrule\",\n      peg$c26 = peg$literalExpectation(\"defrule\", false),\n      peg$c27 = function(name, head, tv) {return tv},\n      peg$c28 = function(name, head, tail) {return [head].concat(tail)},\n      peg$c29 = function(name, p) {return p || []},\n      peg$c30 = function(name, params, expr) {\r\n      \t\t\treturn {\r\n      \t\t\t\t_type: 'defrule',\r\n      \t\t\t\tname,\r\n      \t\t\t\tparams,\r\n      \t\t\t\texpr\r\n      \t\t\t}\r\n      \t\t},\n      peg$c31 = \"deflink\",\n      peg$c32 = peg$literalExpectation(\"deflink\", false),\n      peg$c33 = function(name, params, expr) {\r\n      \t\t\treturn {\r\n      \t\t\t\t_type: 'deflink',\r\n      \t\t\t\tname,\r\n      \t\t\t\tparams,\r\n      \t\t\t\trules: expr.rules\r\n      \t\t\t}\r\n      \t\t},\n      peg$c34 = \"~\",\n      peg$c35 = peg$literalExpectation(\"~\", false),\n      peg$c36 = function(head, e) {return e},\n      peg$c37 = function(head, tail) {return [head].concat(tail)},\n      peg$c38 = function(rules) {\r\n      \t\t\treturn {\r\n      \t\t\t\t_type: 'link',\r\n      \t\t\t\trules\r\n      \t\t\t}\r\n      \t\t},\n      peg$c39 = function(l) {return l || []},\n      peg$c40 = \"|-\",\n      peg$c41 = peg$literalExpectation(\"|-\", false),\n      peg$c42 = function(left, right) {\r\n      \t\t\treturn {\r\n      \t\t\t\t_type: 'yield',\r\n      \t\t\t\tleft,\r\n      \t\t\t\tright\r\n      \t\t\t}\r\n      \t\t},\n      peg$c43 = function(name, head, e) {return e},\n      peg$c44 = function(name, a) {return a || []},\n      peg$c45 = function(name, args) {\r\n      \t\t\treturn {\r\n      \t\t\t\t_type: 'rulecall',\r\n      \t\t\t\tname,\r\n      \t\t\t\targs\r\n      \t\t\t}\r\n      \t\t},\n      peg$c46 = function(e) {return e},\n      peg$c47 = function(fun, head, e) {return e},\n      peg$c48 = function(fun, head, tail) {return [head].concat(tail)},\n      peg$c49 = function(fun, a) {return a || []},\n      peg$c50 = function(fun, args) {\r\n      \t\t\treturn {\r\n      \t\t\t\t_type: 'funcall',\r\n      \t\t\t\tfun,\r\n      \t\t\t\targs\r\n      \t\t\t}\r\n      \t\t},\n      peg$c51 = function(head, tv) {return tv},\n      peg$c52 = function(p) {return p || []},\n      peg$c53 = function(params, expr) {\r\n      \t\t\treturn {\r\n      \t\t\t\t_type: 'funexpr',\r\n      \t\t\t\tparams,\r\n      \t\t\t\texpr\r\n      \t\t\t}\r\n      \t\t},\n      peg$c54 = function(type, name) {\r\n      \t\treturn {\r\n      \t\t\t_type: 'typevar',\r\n      \t\t\ttype,\r\n      \t\t\tname\r\n      \t\t}\r\n      \t},\n      peg$c55 = function(name) {\r\n      \t\treturn {\r\n      \t\t\t_type: 'type',\r\n      \t\t\tftype: false,\r\n      \t\t\tname\r\n      \t\t}\r\n      \t},\n      peg$c56 = \"[\",\n      peg$c57 = peg$literalExpectation(\"[\", false),\n      peg$c58 = function(type) {return [type]},\n      peg$c59 = function(head, t) {return t},\n      peg$c60 = function(tt) {return tt},\n      peg$c61 = \"->\",\n      peg$c62 = peg$literalExpectation(\"->\", false),\n      peg$c63 = \"]\",\n      peg$c64 = peg$literalExpectation(\"]\", false),\n      peg$c65 = function(from, to) {\r\n      \t\t\treturn {\r\n      \t\t\t\t_type: 'type',\r\n      \t\t\t\tftype: true,\r\n      \t\t\t\tfrom,\r\n      \t\t\t\tto\r\n      \t\t\t}\r\n      \t\t},\n      peg$c66 = function(name) {\r\n      \t\treturn {\r\n      \t\t\t_type: 'var',\r\n      \t\t\tname\r\n      \t\t}\r\n      \t},\n      peg$c67 = /^[a-zA-Z0-9]/,\n      peg$c68 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"]], false, false),\n      peg$c69 = function(id) {return id.join('')},\n      peg$c70 = \"\\r\\n\",\n      peg$c71 = peg$literalExpectation(\"\\r\\n\", false),\n      peg$c72 = \"\\r\",\n      peg$c73 = peg$literalExpectation(\"\\r\", false),\n      peg$c74 = \"\\n\",\n      peg$c75 = peg$literalExpectation(\"\\n\", false),\n      peg$c76 = /^[ \\t\\n\\r]/,\n      peg$c77 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c78 = \";\",\n      peg$c79 = peg$literalExpectation(\";\", false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseline();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseline();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c0(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline() {\n    var s0;\n\n    s0 = peg$parsetypedef();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedefv();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedefun();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedefrule();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedeflink();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c1;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c2); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parsenewline();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c3); }\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parsenewline();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c3); }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetypedef() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7) === peg$c4) {\n      s1 = peg$c4;\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsestype();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEM();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c6(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedefv() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c7) {\n      s1 = peg$c7;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c8); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetypevar();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEM();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c9(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedefun() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c10) {\n      s1 = peg$c10;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c11); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetype();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseIDENT();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s8 = peg$c12;\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c13); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse_();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$currPos;\n                    s11 = peg$parsetypevar();\n                    if (s11 !== peg$FAILED) {\n                      s12 = peg$parse_();\n                      if (s12 !== peg$FAILED) {\n                        s13 = [];\n                        s14 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                          s15 = peg$c14;\n                          peg$currPos++;\n                        } else {\n                          s15 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                        }\n                        if (s15 !== peg$FAILED) {\n                          s16 = peg$parse_();\n                          if (s16 !== peg$FAILED) {\n                            s17 = peg$parsetypevar();\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parse_();\n                              if (s18 !== peg$FAILED) {\n                                peg$savedPos = s14;\n                                s15 = peg$c16(s3, s5, s11, s17);\n                                s14 = s15;\n                              } else {\n                                peg$currPos = s14;\n                                s14 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s14;\n                              s14 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s14;\n                            s14 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s14;\n                          s14 = peg$FAILED;\n                        }\n                        while (s14 !== peg$FAILED) {\n                          s13.push(s14);\n                          s14 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 44) {\n                            s15 = peg$c14;\n                            peg$currPos++;\n                          } else {\n                            s15 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                          }\n                          if (s15 !== peg$FAILED) {\n                            s16 = peg$parse_();\n                            if (s16 !== peg$FAILED) {\n                              s17 = peg$parsetypevar();\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parse_();\n                                if (s18 !== peg$FAILED) {\n                                  peg$savedPos = s14;\n                                  s15 = peg$c16(s3, s5, s11, s17);\n                                  s14 = s15;\n                                } else {\n                                  peg$currPos = s14;\n                                  s14 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s14;\n                                s14 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s14;\n                              s14 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s14;\n                            s14 = peg$FAILED;\n                          }\n                        }\n                        if (s13 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c17(s3, s5, s11, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                    if (s10 === peg$FAILED) {\n                      s10 = null;\n                    }\n                    if (s10 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 41) {\n                        s11 = peg$c18;\n                        peg$currPos++;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c19); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse_();\n                        if (s12 !== peg$FAILED) {\n                          peg$savedPos = s7;\n                          s8 = peg$c20(s3, s5, s10);\n                          s7 = s8;\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c21) {\n                    s9 = peg$c21;\n                    peg$currPos += 2;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c22); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseexpr0();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse_();\n                        if (s12 !== peg$FAILED) {\n                          peg$savedPos = s8;\n                          s9 = peg$c23(s3, s5, s7, s11);\n                          s8 = s9;\n                        } else {\n                          peg$currPos = s8;\n                          s8 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseSEM();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c24(s3, s5, s7, s8);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedefrule() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7) === peg$c25) {\n      s1 = peg$c25;\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c26); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseIDENT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s6 = peg$c12;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c13); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse_();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$currPos;\n                s9 = peg$parsetypevar();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse_();\n                  if (s10 !== peg$FAILED) {\n                    s11 = [];\n                    s12 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s13 = peg$c14;\n                      peg$currPos++;\n                    } else {\n                      s13 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                    }\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        s15 = peg$parsetypevar();\n                        if (s15 !== peg$FAILED) {\n                          s16 = peg$parse_();\n                          if (s16 !== peg$FAILED) {\n                            peg$savedPos = s12;\n                            s13 = peg$c27(s3, s9, s15);\n                            s12 = s13;\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s12;\n                        s12 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s12;\n                      s12 = peg$FAILED;\n                    }\n                    while (s12 !== peg$FAILED) {\n                      s11.push(s12);\n                      s12 = peg$currPos;\n                      if (input.charCodeAt(peg$currPos) === 44) {\n                        s13 = peg$c14;\n                        peg$currPos++;\n                      } else {\n                        s13 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                      }\n                      if (s13 !== peg$FAILED) {\n                        s14 = peg$parse_();\n                        if (s14 !== peg$FAILED) {\n                          s15 = peg$parsetypevar();\n                          if (s15 !== peg$FAILED) {\n                            s16 = peg$parse_();\n                            if (s16 !== peg$FAILED) {\n                              peg$savedPos = s12;\n                              s13 = peg$c27(s3, s9, s15);\n                              s12 = s13;\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s12;\n                        s12 = peg$FAILED;\n                      }\n                    }\n                    if (s11 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c28(s3, s9, s11);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                if (s8 === peg$FAILED) {\n                  s8 = null;\n                }\n                if (s8 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s9 = peg$c18;\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c19); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s5;\n                      s6 = peg$c29(s3, s8);\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 2) === peg$c21) {\n                s6 = peg$c21;\n                peg$currPos += 2;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c22); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseexpr1();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse_();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseSEM();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse_();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c30(s3, s5, s8);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeflink() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7) === peg$c31) {\n      s1 = peg$c31;\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c32); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseIDENT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s6 = peg$c12;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c13); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse_();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$currPos;\n                s9 = peg$parsetypevar();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse_();\n                  if (s10 !== peg$FAILED) {\n                    s11 = [];\n                    s12 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s13 = peg$c14;\n                      peg$currPos++;\n                    } else {\n                      s13 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                    }\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        s15 = peg$parsetypevar();\n                        if (s15 !== peg$FAILED) {\n                          s16 = peg$parse_();\n                          if (s16 !== peg$FAILED) {\n                            peg$savedPos = s12;\n                            s13 = peg$c27(s3, s9, s15);\n                            s12 = s13;\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s12;\n                        s12 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s12;\n                      s12 = peg$FAILED;\n                    }\n                    while (s12 !== peg$FAILED) {\n                      s11.push(s12);\n                      s12 = peg$currPos;\n                      if (input.charCodeAt(peg$currPos) === 44) {\n                        s13 = peg$c14;\n                        peg$currPos++;\n                      } else {\n                        s13 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                      }\n                      if (s13 !== peg$FAILED) {\n                        s14 = peg$parse_();\n                        if (s14 !== peg$FAILED) {\n                          s15 = peg$parsetypevar();\n                          if (s15 !== peg$FAILED) {\n                            s16 = peg$parse_();\n                            if (s16 !== peg$FAILED) {\n                              peg$savedPos = s12;\n                              s13 = peg$c27(s3, s9, s15);\n                              s12 = s13;\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s12;\n                        s12 = peg$FAILED;\n                      }\n                    }\n                    if (s11 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c28(s3, s9, s11);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                if (s8 === peg$FAILED) {\n                  s8 = null;\n                }\n                if (s8 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s9 = peg$c18;\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c19); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s5;\n                      s6 = peg$c29(s3, s8);\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 2) === peg$c21) {\n                s6 = peg$c21;\n                peg$currPos += 2;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c22); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseexpr2();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse_();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseSEM();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse_();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c33(s3, s5, s8);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr2() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseexpr1();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 126) {\n          s6 = peg$c34;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c35); }\n        }\n        if (s6 !== peg$FAILED) {\n          s7 = peg$parse_();\n          if (s7 !== peg$FAILED) {\n            s8 = peg$parseexpr1();\n            if (s8 !== peg$FAILED) {\n              s9 = peg$parse_();\n              if (s9 !== peg$FAILED) {\n                peg$savedPos = s5;\n                s6 = peg$c36(s2, s8);\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 126) {\n              s6 = peg$c34;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c35); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse_();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseexpr1();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse_();\n                  if (s9 !== peg$FAILED) {\n                    peg$savedPos = s5;\n                    s6 = peg$c36(s2, s8);\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n        } else {\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          peg$savedPos = s1;\n          s2 = peg$c37(s2, s4);\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c38(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseexpr1() {\n    var s0;\n\n    s0 = peg$parseyield();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parserulecall();\n    }\n\n    return s0;\n  }\n\n  function peg$parseyield() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$currPos;\n    s3 = peg$parseexpr0();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parse_();\n      if (s4 !== peg$FAILED) {\n        s5 = [];\n        s6 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s7 = peg$c14;\n          peg$currPos++;\n        } else {\n          s7 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c15); }\n        }\n        if (s7 !== peg$FAILED) {\n          s8 = peg$parse_();\n          if (s8 !== peg$FAILED) {\n            s9 = peg$parseexpr0();\n            if (s9 !== peg$FAILED) {\n              s10 = peg$parse_();\n              if (s10 !== peg$FAILED) {\n                peg$savedPos = s6;\n                s7 = peg$c36(s3, s9);\n                s6 = s7;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s6;\n          s6 = peg$FAILED;\n        }\n        while (s6 !== peg$FAILED) {\n          s5.push(s6);\n          s6 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s7 = peg$c14;\n            peg$currPos++;\n          } else {\n            s7 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c15); }\n          }\n          if (s7 !== peg$FAILED) {\n            s8 = peg$parse_();\n            if (s8 !== peg$FAILED) {\n              s9 = peg$parseexpr0();\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c36(s3, s9);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c37(s3, s5);\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = s1;\n      s2 = peg$c39(s2);\n    }\n    s1 = s2;\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c40) {\n        s2 = peg$c40;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c41); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseexpr0();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c42(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserulecall() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    s0 = peg$currPos;\n    s1 = peg$parseIDENT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s4 = peg$c12;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c13); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            s7 = peg$parseexpr0();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse_();\n              if (s8 !== peg$FAILED) {\n                s9 = [];\n                s10 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s11 = peg$c14;\n                  peg$currPos++;\n                } else {\n                  s11 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                }\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    s13 = peg$parseexpr0();\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        peg$savedPos = s10;\n                        s11 = peg$c43(s1, s7, s13);\n                        s10 = s11;\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s10;\n                  s10 = peg$FAILED;\n                }\n                while (s10 !== peg$FAILED) {\n                  s9.push(s10);\n                  s10 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s11 = peg$c14;\n                    peg$currPos++;\n                  } else {\n                    s11 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parseexpr0();\n                      if (s13 !== peg$FAILED) {\n                        s14 = peg$parse_();\n                        if (s14 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c43(s1, s7, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                }\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c28(s1, s7, s9);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 === peg$FAILED) {\n              s6 = null;\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s7 = peg$c18;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  peg$savedPos = s3;\n                  s4 = peg$c44(s1, s6);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c45(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr0() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsefuncall();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsefunexpr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsevar();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s1 = peg$c12;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c13); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseexpr0();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse_();\n                if (s4 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s5 = peg$c18;\n                    peg$currPos++;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c19); }\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c46(s3);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefuncall() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c12;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c13); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseexpr0();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c18;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s1;\n                s2 = peg$c46(s4);\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s4 = peg$c12;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c13); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            s7 = peg$parseexpr0();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse_();\n              if (s8 !== peg$FAILED) {\n                s9 = [];\n                s10 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s11 = peg$c14;\n                  peg$currPos++;\n                } else {\n                  s11 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                }\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    s13 = peg$parseexpr0();\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        peg$savedPos = s10;\n                        s11 = peg$c47(s1, s7, s13);\n                        s10 = s11;\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s10;\n                  s10 = peg$FAILED;\n                }\n                while (s10 !== peg$FAILED) {\n                  s9.push(s10);\n                  s10 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s11 = peg$c14;\n                    peg$currPos++;\n                  } else {\n                    s11 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parseexpr0();\n                      if (s13 !== peg$FAILED) {\n                        s14 = peg$parse_();\n                        if (s14 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c47(s1, s7, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                }\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c48(s1, s7, s9);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 === peg$FAILED) {\n              s6 = null;\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s7 = peg$c18;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  peg$savedPos = s3;\n                  s4 = peg$c49(s1, s6);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c50(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefunexpr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s2 = peg$c12;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c13); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$currPos;\n        s5 = peg$parsetypevar();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            s7 = [];\n            s8 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s9 = peg$c14;\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c15); }\n            }\n            if (s9 !== peg$FAILED) {\n              s10 = peg$parse_();\n              if (s10 !== peg$FAILED) {\n                s11 = peg$parsetypevar();\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c51(s5, s11);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s8;\n              s8 = peg$FAILED;\n            }\n            while (s8 !== peg$FAILED) {\n              s7.push(s8);\n              s8 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s9 = peg$c14;\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c15); }\n              }\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parsetypevar();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c51(s5, s11);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            }\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c37(s5, s7);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 === peg$FAILED) {\n          s4 = null;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s5 = peg$c18;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c19); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s2 = peg$c52(s4);\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c21) {\n        s2 = peg$c21;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c22); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseexpr0();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c53(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetypevar() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetype();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseIDENT();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c54(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetype() {\n    var s0;\n\n    s0 = peg$parsestype();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseftype();\n    }\n\n    return s0;\n  }\n\n  function peg$parsestype() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseIDENT();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c55(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseftype() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c56;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c57); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parsetype();\n        if (s4 !== peg$FAILED) {\n          peg$savedPos = s3;\n          s4 = peg$c58(s4);\n        }\n        s3 = s4;\n        if (s3 === peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s5 = peg$c12;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c13); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetype();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  s9 = [];\n                  s10 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s11 = peg$c14;\n                    peg$currPos++;\n                  } else {\n                    s11 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parsetype();\n                      if (s13 !== peg$FAILED) {\n                        s14 = peg$parse_();\n                        if (s14 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c59(s7, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                  while (s10 !== peg$FAILED) {\n                    s9.push(s10);\n                    s10 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s11 = peg$c14;\n                      peg$currPos++;\n                    } else {\n                      s11 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                    }\n                    if (s11 !== peg$FAILED) {\n                      s12 = peg$parse_();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parsetype();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse_();\n                          if (s14 !== peg$FAILED) {\n                            peg$savedPos = s10;\n                            s11 = peg$c59(s7, s13);\n                            s10 = s11;\n                          } else {\n                            peg$currPos = s10;\n                            s10 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s10 = peg$c18;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c19); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s4;\n                      s5 = peg$c37(s7, s9);\n                      s4 = s5;\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c60(s4);\n          }\n          s3 = s4;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c61) {\n              s5 = peg$c61;\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c62); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetype();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 93) {\n                      s9 = peg$c63;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c64); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c65(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevar() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseIDENT();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c66(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseIDENT() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c67.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c68); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c67.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c68); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c69(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenewline() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c70) {\n      s0 = peg$c70;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c71); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 13) {\n        s0 = peg$c72;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c73); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 10) {\n          s0 = peg$c74;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c75); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n\n    s0 = [];\n    if (peg$c76.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c77); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (peg$c76.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    if (peg$c76.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c77); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c76.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c77); }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEM() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c78;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c79); }\n    }\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n\n\n//# sourceURL=webpack://math/./dist/parser.js?");

/***/ }),

/***/ "./src/PegInterface.js":
/*!*****************************!*\
  !*** ./src/PegInterface.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\r\n * PEG.js의 출력과 적절한 클래스 사이를 잇는 인터페이스.\r\n */\r\n\r\nvar Type = __webpack_require__(/*! ./nodes/Type */ \"./src/nodes/Type.js\");\r\nvar Typevar = __webpack_require__(/*! ./nodes/Typevar */ \"./src/nodes/Typevar.js\");\r\nvar Fun = __webpack_require__(/*! ./nodes/Fun */ \"./src/nodes/Fun.js\");\r\nvar Funcall = __webpack_require__(/*! ./nodes/Funcall */ \"./src/nodes/Funcall.js\");\r\nvar Rule = __webpack_require__(/*! ./nodes/Rule */ \"./src/nodes/Rule.js\");\r\nvar Yield = __webpack_require__(/*! ./nodes/Yield */ \"./src/nodes/Yield.js\");\r\nvar Rulecall = __webpack_require__(/*! ./nodes/Rulecall */ \"./src/nodes/Rulecall.js\");\r\nvar Link = __webpack_require__(/*! ./nodes/Link */ \"./src/nodes/Link.js\");\r\n\r\nvar PegInterface = {};\r\n\r\nPegInterface.type = function (obj, parentScope) {\r\n\treturn new Type({\r\n\t\tfunctional: false,\r\n\t\tname: obj.name\r\n\t});\r\n};\r\n\r\nPegInterface.typevar = function (obj, parentScope) {\r\n\tvar scope = parentScope.extend();\r\n\r\n\tif (!scope.hasType(obj.type))\r\n\t\tthrow Error(`Type ${obj.type} not found`);\r\n\r\n\tvar type = scope.getType(obj.type);\r\n\r\n\treturn new Typevar(type, obj.name);\r\n}\r\n\r\nPegInterface.fun = function (obj, parentScope) {\r\n\tvar anonymous = null;\r\n\tvar name = null;\r\n\tvar type = null;\r\n\tvar atomic = null;\r\n\tvar params = null;\r\n\tvar expr = null;\r\n\tvar scope = parentScope.extend();\r\n\r\n\tswitch (obj._type) {\r\n\t\tcase 'defun':\r\n\t\t\tanonymous = false;\r\n\t\t\tname = obj.name;\r\n\r\n\t\t\tif (!scope.hasType(obj.rettype))\r\n\t\t\t\tthrow Error(`Rettype ${Type.getType(obj.rettype)} not found`);\r\n\r\n\t\t\tvar rettype = scope.getType(obj.rettype);\r\n\r\n\t\t\tparams = obj.params.map(tvo => {\r\n\t\t\t\tif (!scope.hasType(tvo.type))\r\n\t\t\t\t\tthrow Error(`Param type ${Type.getType(tvo.type)} not found`);\r\n\r\n\t\t\t\tif (scope.hasOwnTypevarByName(tvo.name))\r\n\t\t\t\t\tthrow Error(`Param name ${tvo.name} already is there`);\r\n\r\n\t\t\t\treturn scope.addTypevar(tvo);\r\n\t\t\t});\r\n\r\n\t\t\ttype = new Type({\r\n\t\t\t\tfunctional: true,\r\n\t\t\t\tfrom: params.map(typevar => typevar.type),\r\n\t\t\t\tto: rettype\r\n\t\t\t});\r\n\r\n\t\t\tatomic = !obj.expr;\r\n\r\n\t\t\tif (obj.expr) {\r\n\t\t\t\tswitch (obj.expr._type) {\r\n\t\t\t\t\tcase 'funcall':\r\n\t\t\t\t\t\tvar funcall = PegInterface.funcall(obj.expr, scope);\r\n\t\t\t\t\t\tif (!rettype.equals(funcall.type))\r\n\t\t\t\t\t\t\tthrow Error(`Return type mismatch: ${rettype}, ${funcall.type}`);\r\n\t\t\t\t\t\texpr = funcall;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'funexpr':\r\n\t\t\t\t\t\tvar fun = PegInterface.fun(obj.expr, scope);\r\n\t\t\t\t\t\tif (!rettype.equals(fun.type))\r\n\t\t\t\t\t\t\tthrow Error(`Return type mismatch: ${rettype}, ${fun.type}`);\r\n\t\t\t\t\t\texpr = fun;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'var':\r\n\t\t\t\t\t\tif (!scope.hasTypevarByName(obj.expr.name))\r\n\t\t\t\t\t\t\tthrow Error(`Undefined identifier ${obj.expr.name}`);\r\n\t\t\t\t\t\tvar typevar = scope.getTypevarByName(obj.expr.name);\r\n\t\t\t\t\t\tif (!rettype.equals(typevar.type)) {\r\n\t\t\t\t\t\t\tthrow Error(`Wrong return type ${rettype}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\texpr = typevar;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow Error(`Unknown type ${obj.expr._type}`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 'funexpr':\r\n\t\t\tanonymous = true;\r\n\r\n\t\t\tparams = obj.params.map(tvo => {\r\n\t\t\t\tif (!scope.hasType(tvo.type))\r\n\t\t\t\t\tthrow Error(`Param type ${Type.getType(tvo.type)} not found`);\r\n\r\n\t\t\t\tif (scope.hasOwnTypevarByName(tvo.name))\r\n\t\t\t\t\tthrow Error(`Param name ${tvo.name} already is there`);\r\n\r\n\t\t\t\treturn scope.addTypevar(tvo);\r\n\t\t\t});\r\n\r\n\t\t\tatomic = false;\r\n\r\n\t\t\tvar rettype;\r\n\r\n\t\t\tswitch (obj.expr._type) {\r\n\t\t\t\tcase 'funcall':\r\n\t\t\t\t\tvar funcall = PegInterface.funcall(obj.expr, scope);\r\n\t\t\t\t\trettype = funcall.type;\r\n\t\t\t\t\texpr = funcall;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'funexpr':\r\n\t\t\t\t\tvar fun = PegInterface.fun(obj.expr, scope);\r\n\t\t\t\t\trettype = fun.type;\r\n\t\t\t\t\texpr = fun;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'var':\r\n\t\t\t\t\tif (!scope.hasTypevarByName(obj.expr.name))\r\n\t\t\t\t\t\tthrow Error(`Undefined identifier ${obj.expr.name}`);\r\n\t\t\t\t\tvar typevar = scope.getTypevarByName(obj.expr.name);\r\n\t\t\t\t\trettype = typevar.type;\r\n\t\t\t\t\texpr = typevar;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow Error(`Unknown type ${obj.expr._type}`);\r\n\t\t\t}\r\n\r\n\t\t\ttype = new Type({\r\n\t\t\t\tfunctional: true,\r\n\t\t\t\tfrom: params.map(typevar => typevar.type),\r\n\t\t\t\tto: rettype\r\n\t\t\t});\r\n\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow Error(`Unknown type ${obj._type}`);\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn new Fun({anonymous, name, type, atomic, params, expr});\r\n};\r\n\r\nPegInterface.funcall = function (obj, parentScope) {\r\n\tvar fun = null;\r\n\tvar args = null;\r\n\tvar scope = parentScope.extend();\r\n\r\n\tswitch (obj.fun._type) {\r\n\t\tcase 'funcall':\r\n\t\t\tvar funcall = PegInterface.funcall(obj.fun, scope);\r\n\t\t\tfun = funcall;\r\n\t\t\tbreak;\r\n\t\tcase 'funexpr':\r\n\t\t\tfun = PegInterface.fun(obj.fun, scope);\r\n\t\t\tbreak;\r\n\t\tcase 'var':\r\n\t\t\tif (!scope.hasTypevarByName(obj.fun.name))\r\n\t\t\t\tthrow Error(`Undefined identifier ${obj.fun.name}`);\r\n\t\t\tfun = scope.getTypevarByName(obj.fun.name);\r\n\t\t\tif (fun.type.isSimple)\r\n\t\t\t\tthrow Error(`${fun.name} is not callable`);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow Error(`Unknown type ${fun._type}`);\r\n\t}\r\n\r\n\targs = obj.args.map((arg, i) => {\r\n\t\tswitch (arg._type) {\r\n\t\t\tcase 'funcall':\r\n\t\t\t\treturn PegInterface.funcall(arg, scope);\r\n\t\t\tcase 'funexpr':\r\n\t\t\t\treturn PegInterface.fun(arg, scope);\r\n\t\t\tcase 'var':\r\n\t\t\t\tif (!scope.hasTypevarByName(arg.name))\r\n\t\t\t\t\tthrow Error(`Undefined identifier ${arg.name}`);\r\n\t\t\t\treturn scope.getTypevarByName(arg.name);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error(`Unknown type ${obj.expr._type}`);\r\n\t\t}\r\n\t});\r\n\r\n\tif (args.length != fun.type.from.length)\r\n\t\tthrow Error(`Invalid number of arguments: ${obj.args.length}`);\r\n\r\n\tfor (var i = 0; i < args.length; i++)\r\n\t\tif (!args[i].type.equals(fun.type.from[i]))\r\n\t\t\tthrow Error(`Argument type mismatch: ${args[i].type}, ${fun.type.from[i]}`);\r\n\r\n\treturn new Funcall({fun, args});\r\n};\r\n\r\nPegInterface.rule = function (obj, parentScope) {\r\n\tvar scope = parentScope.extend();\r\n\r\n\tvar name = obj.name;\r\n\tvar params = obj.params.map(tvo => {\r\n\t\tif (!scope.hasType(tvo.type))\r\n\t\t\tthrow Error(`Param type ${Type.getType(tvo.type)} not found`);\r\n\r\n\t\tif (scope.hasOwnTypevarByName(tvo.name))\r\n\t\t\tthrow Error(`Param name ${tvo.name} already is there`);\r\n\r\n\t\treturn scope.addTypevar(tvo);\r\n\t});\r\n\r\n\tvar expr = null;\r\n\r\n\tswitch (obj.expr._type) {\r\n\t\tcase 'yield':\r\n\t\t\texpr = PegInterface.yield(obj.expr, scope);\r\n\t\t\tbreak;\r\n\t\tcase 'rulecall':\r\n\t\t\texpr = PegInterface.rulecall(obj.expr, scope);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow Error(`Unknown type ${obj.expr._type}`);\r\n\t}\r\n\r\n\treturn new Rule({name, params, expr});\r\n}\r\n\r\nPegInterface.yield = function (obj, parentScope) {\r\n\tvar scope = parentScope.extend();\r\n\r\n\tvar foo = obj => {\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'funcall':\r\n\t\t\t\tvar funcall = PegInterface.funcall(obj, scope);\r\n\t\t\t\tif (!scope.root.getTypeByName('St').equals(funcall.type))\r\n\t\t\t\t\tthrow Error(`Return type is not St: ${funcall.type}`);\r\n\t\t\t\treturn funcall;\r\n\t\t\tcase 'funexpr':\r\n\t\t\t\tvar fun = PegInterface.fun(obj, scope);\r\n\t\t\t\tif (!scope.root.getTypeByName('St').equals(fun.type))\r\n\t\t\t\t\tthrow Error(`Return type is not St: ${fun.type}`);\r\n\t\t\t\treturn fun;\r\n\t\t\tcase 'var':\r\n\t\t\t\tif (!scope.hasTypevarByName(obj.name))\r\n\t\t\t\t\tthrow Error(`Undefined identifier ${obj.name}`);\r\n\t\t\t\tvar typevar = scope.getTypevarByName(obj.name);\r\n\t\t\t\tif (!scope.root.getTypeByName('St').equals(typevar.type)) {\r\n\t\t\t\t\tthrow Error(`Return type is not St: ${typevar.type}`);\r\n\t\t\t\t}\r\n\t\t\t\treturn typevar;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error(`Unknown type ${obj._type}`);\r\n\t\t}\r\n\t};\r\n\r\n\tvar left = obj.left.map(foo);\r\n\tvar right = foo(obj.right);\r\n\r\n\treturn new Yield({left, right});\r\n}\r\n\r\nPegInterface.rulecall = function (obj, parentScope) {\r\n\tvar scope = parentScope.extend();\r\n\r\n\tif (!scope.hasRuleByName(obj.name))\r\n\t\tthrow Error(`Rule ${obj.name} is not defined`);\r\n\r\n\tvar rule = scope.getRule(obj.name);\r\n\r\n\tvar foo = obj => {\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'funcall':\r\n\t\t\t\tvar funcall = PegInterface.funcall(obj, scope);\r\n\t\t\t\treturn funcall;\r\n\t\t\tcase 'funexpr':\r\n\t\t\t\tvar fun = PegInterface.fun(obj, scope);\r\n\t\t\t\treturn fun;\r\n\t\t\tcase 'var':\r\n\t\t\t\tif (!scope.hasTypevarByName(obj.name))\r\n\t\t\t\t\tthrow Error(`Undefined identifier ${obj.name}`);\r\n\t\t\t\tvar typevar = scope.getTypevarByName(obj.name);\r\n\t\t\t\treturn typevar;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error(`Unknown type ${obj._type}`);\r\n\t\t}\r\n\t};\r\n\r\n\treturn new Rulecall({\r\n\t\trule,\r\n\t\targs: obj.args.map(foo)\r\n\t});\r\n}\r\n\r\nPegInterface.link = function (obj, parentScope) {\r\n\tvar scope = parentScope.extend();\r\n\r\n\tvar name = obj.name;\r\n\tvar params = obj.params.map(tvo => {\r\n\t\tif (!scope.hasType(tvo.type))\r\n\t\t\tthrow Error(`Param type ${Type.getType(tvo.type)} not found`);\r\n\r\n\t\tif (scope.hasOwnTypevarByName(tvo.name))\r\n\t\t\tthrow Error(`Param name ${tvo.name} already is there`);\r\n\r\n\t\treturn scope.addTypevar(tvo);\r\n\t});\r\n\r\n\tvar foo = obj => {\r\n\t\tswitch (obj._type) {\r\n\t\t\tcase 'yield':\r\n\t\t\t\treturn PegInterface.yield(obj, scope);\r\n\t\t\tcase 'rulecall':\r\n\t\t\t\treturn PegInterface.rulecall(obj, scope);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error(`Unknown type ${obj._type}`);\r\n\t\t}\r\n\t};\r\n\r\n\tvar rules = obj.rules.map(foo);\r\n\r\n\treturn new Link({name, params, rules});\r\n};\r\n\r\nmodule.exports = PegInterface;\n\n//# sourceURL=webpack://math/./src/PegInterface.js?");

/***/ }),

/***/ "./src/Scope.js":
/*!**********************!*\
  !*** ./src/Scope.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Type = __webpack_require__(/*! ./nodes/Type */ \"./src/nodes/Type.js\");\r\nvar PegInterface = __webpack_require__(/*! ./PegInterface */ \"./src/PegInterface.js\");\r\n\r\nfunction Scope(parent) {\r\n\tthis.simpleTypeMap = {};\r\n\tthis.typevarMap = {};\r\n\tthis.ruleMap = {};\r\n\tthis.linkMap = {};\r\n\r\n\tthis.parent = parent;\r\n\tthis.root = parent ? parent.root : this;\r\n}\r\n\r\nScope.prototype.extend = function () {\r\n\treturn new Scope(this);\r\n}\r\n\r\nScope.prototype.hasOwnTypeByName = function (name) {\r\n\treturn !!this.simpleTypeMap[name];\r\n}\r\n\r\nScope.prototype.hasOwnType = function (typeobj) {\r\n\tif (!typeobj.ftype) return this.hasOwnTypeByName(typeobj.name);\r\n\treturn typeobj.from.map(e => this.hasOwnType(e)).every(e => e)\r\n\t\t\t&& this.hasOwnType(typeobj.to);\r\n}\r\n\r\nScope.prototype.hasTypeByName = function (name) {\r\n\treturn this.hasOwnTypeByName(name)\r\n\t\t|| (!!this.parent && this.parent.hasTypeByName(name));\r\n}\r\n\r\nScope.prototype.hasType = function (typeobj) {\r\n\tif (!typeobj.ftype) return this.hasTypeByName(typeobj.name);\r\n\treturn typeobj.from.map(e => this.hasType(e)).every(e => e)\r\n\t\t\t&& this.hasType(typeobj.to);\r\n}\r\n\r\nScope.prototype.addType = function (obj) {\r\n\tvar type = PegInterface.type(obj, this);\r\n\r\n\tif (this.hasOwnTypeByName(type.name))\r\n\t\tthrow Error(`Type with name ${type.name} already is there`);\r\n\r\n\treturn this.simpleTypeMap[type.name] = type;\r\n}\r\n\r\nScope.prototype.getType = function (typeobj) {\r\n\tif (!typeobj.ftype) return this.getTypeByName(typeobj.name);\r\n\treturn new Type({\r\n\t\tfunctional: true,\r\n\t\tfrom: typeobj.from.map(e => this.getType(e)),\r\n\t\tto: this.getType(typeobj.to)\r\n\t});\r\n}\r\n\r\nScope.prototype.getTypeByName = function (name) {\r\n\tif (!this.hasTypeByName(name))\r\n\t\tthrow Error(`Type with name ${name} not found`);\r\n\r\n\treturn this.simpleTypeMap[name] ||\r\n\t\t(!!this.parent && this.parent.getTypeByName(name));\r\n}\r\n\r\nScope.prototype.hasOwnTypevarByName = function (name) {\r\n\treturn !!this.typevarMap[name];\r\n}\r\n\r\nScope.prototype.hasTypevarByName = function (name) {\r\n\treturn this.hasOwnTypevarByName(name) ||\r\n\t\t(!!this.parent && this.parent.hasTypevarByName(name));\r\n}\r\n\r\nScope.prototype.addTypevar = function (obj) {\r\n\tvar typevar = PegInterface.typevar(obj, this);\r\n\r\n\tif (this.hasOwnTypevarByName(obj.name))\r\n\t\tthrow Error(`Var with name ${obj.name} already is there`);\r\n\r\n\treturn this.typevarMap[obj.name] = typevar;\r\n}\r\n\r\nScope.prototype.getTypevarByName = function (name) {\r\n\tif (!this.hasTypevarByName(name))\r\n\t\tthrow Error(`Var with name ${name} not found`);\r\n\r\n\treturn this.typevarMap[name] ||\r\n\t\t(!!this.parent && this.parent.getTypevarByName(name));\r\n}\r\n\r\nScope.prototype.addFun = function (obj) {\r\n\tvar fun = PegInterface.fun(obj, this);\r\n\r\n\tif (!fun.anonymous && this.hasOwnTypevarByName(fun.name))\r\n\t\tthrow Error(`Var with name ${fun.name} already is there`);\r\n\r\n\treturn this.typevarMap[fun.name] = fun;\r\n}\r\n\r\nScope.prototype.hasOwnRuleByName = function (name) {\r\n\treturn !!this.ruleMap[name];\r\n}\r\n\r\nScope.prototype.hasRuleByName = function (name) {\r\n\treturn this.hasOwnRuleByName(name)\r\n\t\t|| (!!this.parent && this.parent.hasRuleByName(name));\r\n}\r\n\r\nScope.prototype.addRule = function (defruleobj) {\r\n\tvar rule = PegInterface.rule(defruleobj, this);\r\n\r\n\tif (this.hasOwnRuleByName(rule.name))\r\n\t\tthrow Error(`Rule with name ${rule.name} already is there`);\r\n\r\n\treturn this.ruleMap[rule.name] = rule;\r\n}\r\n\r\nScope.prototype.getRule = function (name) {\r\n\tif (!this.hasRuleByName(name))\r\n\t\tthrow Error(`Rule with name ${name} not found`);\r\n\r\n\treturn this.ruleMap[name] ||\r\n\t\t(!!this.parent && this.parent.getRule(name));\r\n}\r\n\r\nScope.prototype.hasOwnLinkByName = function (name) {\r\n\treturn !!this.linkMap[name];\r\n}\r\n\r\nScope.prototype.hasLinkByName = function (name) {\r\n\treturn this.hasOwnLinkByName(name)\r\n\t\t|| (!!this.parent && this.parent.hasLinkByName(name));\r\n}\r\n\r\nScope.prototype.addLink = function (deflinkobj) {\r\n\tvar link = PegInterface.link(deflinkobj, this);\r\n\r\n\tif (this.hasOwnLinkByName(link.name))\r\n\t\tthrow Error(`Link with name ${name} already is there`);\r\n\r\n\treturn this.linkMap[link.name] = link;\r\n}\r\n\r\nScope.prototype.getLink = function (name) {\r\n\tif (!this.hasLinkByName(name))\r\n\t\tthrow Error(`Link with name ${name} not found`);\r\n\r\n\treturn this.linkMap[name] ||\r\n\t\t(!!this.parent && this.parent.getLink(name));\r\n}\r\n\r\nmodule.exports = Scope;\n\n//# sourceURL=webpack://math/./src/Scope.js?");

/***/ }),

/***/ "./src/Translator.js":
/*!***************************!*\
  !*** ./src/Translator.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var Type, Typevar, Fun, Funcall, Rule, Yield, Rulecall, Link;\r\n\r\nvar Translator = {};\r\n\r\nTranslator.init = function (o) {\r\n\t['Type', 'Typevar', 'Fun', 'Funcall', 'Rule', 'Yield', 'Rulecall', 'Link']\r\n\t\t.forEach(e => eval(e + ' = o.' + e));\r\n}\r\n\r\nTranslator.substitute0 = function (expr, map) {\r\n\tif (expr._type == 'funcall') {\r\n\t\tvar fun2 = map(expr.fun) || expr.fun;\r\n\t\tvar args2 = expr.args.map(arg => Translator.substitute0(arg, map));\r\n\t\treturn new Funcall({\r\n\t\t\tfun: fun2,\r\n\t\t\targs: args2\r\n\t\t});\r\n\t} else if (expr._type == 'fun') {\r\n\t\tif (expr.atomic) return map(expr) || expr;\r\n\t\tif (expr.params.map(p => p == expr).some(e => e))\r\n\t\t\tthrow Error(`Duplicate parameter found`);\r\n\t\tvar expr2 = Translator.substitute0(expr.expr, map);\r\n\t\treturn new Fun({\r\n\t\t\tanonymous: true,\r\n\t\t\ttype: expr.type,\r\n\t\t\tatomic: false,\r\n\t\t\tparams: expr.params,\r\n\t\t\texpr: expr2\r\n\t\t});\r\n\t} else {\r\n\t\treturn map(expr) || expr;\r\n\t}\r\n}\r\n\r\nTranslator.substitute1 = function (expr, map) {\r\n\tif (expr._type == 'rulecall') {\r\n\t\tvar rule = expr.rule;\r\n\t\tvar args = expr.args.map(arg => Translator.substitute0(arg, map));\r\n\t\treturn new Rulecall({\r\n\t\t\trule, args\r\n\t\t});\r\n\t} else if (expr._type == 'yield') {\r\n\t\tvar left = expr.left.map(e => Translator.substitute0(e, map));\r\n\t\tvar right = Translator.substitute0(expr.right, map);\r\n\r\n\t\treturn new Yield({\r\n\t\t\tleft, right\r\n\t\t});\r\n\t} else throw Error(`wut`);\r\n}\r\n\r\nTranslator.expand0Funcalls = function (expr) {\r\n\tif (expr._type == 'funcall') {\r\n\t\tvar fun = Translator.expand0Funcalls(expr.fun);\r\n\t\tvar args = expr.args.map(Translator.expand0Funcalls);\r\n\r\n\t\tif (!fun.anonymous)\r\n\t\t\treturn new Funcall({fun, args});\r\n\r\n\t\tvar map = param => args[fun.params.indexOf(param)];\r\n\r\n\t\treturn Translator.expand0Funcalls(Translator.substitute0(fun.expr, map));\r\n\t} else {\r\n\t\treturn expr;\r\n\t}\r\n}\r\n\r\nTranslator.expand0 = function (expr) {\r\n\tif (expr._type == 'funcall') {\r\n\t\tvar fun = Translator.expand0(expr.fun);\r\n\t\tvar args = expr.args.map(Translator.expand0);\r\n\r\n\t\tif (fun._type != 'fun' || fun.atomic)\r\n\t\t\treturn new Funcall({fun, args});\r\n\r\n\t\tvar map = param => args[fun.params.indexOf(param)];\r\n\r\n\t\treturn Translator.expand0(Translator.substitute0(fun.expr, map));\r\n\t} else if (expr._type == 'fun' && !expr.atomic) {\r\n\t\tvar expr2 = Translator.expand0(expr.expr);\r\n\t\treturn new Fun({\r\n\t\t\tanonymous: true,\r\n\t\t\ttype: expr.type,\r\n\t\t\tatomic: false,\r\n\t\t\tparams: expr.params,\r\n\t\t\texpr: expr2\r\n\t\t});\r\n\t} else {\r\n\t\treturn expr;\r\n\t}\r\n}\r\n\r\n// expand0은 하지 않음. rule 단계에서만 풀음.\r\nTranslator.expand1 = function (expr) {\r\n\tif (expr._type == 'rulecall') {\r\n\t\tvar rule = expr.rule;\r\n\t\tvar args = expr.args;\r\n\r\n\t\tvar map = param => args[rule.params.indexOf(param)];\r\n\r\n\t\treturn Translator.expand1(Translator.substitute1(rule.expr, map));\r\n\t} else if (expr._type == 'yield') {\r\n\t\treturn expr;\r\n\t} else if (expr._type == 'rule') {\r\n\t\tvar expr2 = Translator.expand1(expr.expr);\r\n\t\treturn new Rule({\r\n\t\t\tname: '<anonymous>',\r\n\t\t\tparams: expr.params,\r\n\t\t\texpr: expr2\r\n\t\t})\r\n\t} else throw Error(`Unknown expr1`);\r\n}\r\n\r\n// expr0의 funcall까지 풀음.\r\nTranslator.expand1Funcalls = function (expr) {\r\n\tif (expr._type == 'rulecall') {\r\n\t\tvar rule = expr.rule;\r\n\t\tvar args = expr.args.map(Translator.expand0Funcalls);\r\n\r\n\t\tvar map = param => args[rule.params.indexOf(param)];\r\n\r\n\t\treturn Translator.expand1Funcalls(Translator.substitute1(rule.expr, map));\r\n\t} else if (expr._type == 'yield') {\r\n\t\tvar left = expr.left.map(Translator.expand0Funcalls);\r\n\t\tvar right = Translator.expand0Funcalls(expr.right);\r\n\t\treturn new Yield({left, right});\r\n\t} else if (expr._type == 'rule') {\r\n\t\tvar expr2 = Translator.expand1Funcalls(expr.expr);\r\n\t\treturn new Rule({\r\n\t\t\tname: '<anonymous>',\r\n\t\t\tparams: expr.params,\r\n\t\t\texpr: expr2\r\n\t\t})\r\n\t} else throw Error(`Unknown expr1`);\r\n}\r\n\r\n// expr0까지 최대로 풀음.\r\nTranslator.expand1Full = function (expr) {\r\n\tif (expr._type == 'rulecall') {\r\n\t\tvar rule = expr.rule;\r\n\t\tvar args = expr.args.map(Translator.expand0);\r\n\r\n\t\tvar map = param => args[rule.params.indexOf(param)];\r\n\r\n\t\treturn Translator.expand1Full(Translator.substitute1(rule.expr, map));\r\n\t} else if (expr._type == 'yield') {\r\n\t\tvar left = expr.left.map(Translator.expand0);\r\n\t\tvar right = Translator.expand0(expr.right);\r\n\t\treturn new Yield({left, right});\r\n\t} else if (expr._type == 'rule') {\r\n\t\tvar expr2 = Translator.expand1Full(expr.expr);\r\n\t\treturn new Rule({\r\n\t\t\tname: '<anonymous>',\r\n\t\t\tparams: expr.params,\r\n\t\t\texpr: expr2\r\n\t\t})\r\n\t} else throw Error(`Unknown expr1`);\r\n}\r\n\r\nTranslator.expr0Equals = function (a, b) {\r\n\ta = Translator.expand0(a);\r\n\tb = Translator.expand0(b);\r\n\r\n\tif ((a._type == 'funcall') != (b._type == 'funcall')) return false;\r\n\r\n\tif (a._type == 'funcall') {\r\n\t\tif (a.fun != b.fun) return false;\r\n\r\n\t\tfor (var i = 0; i < a.args.length; i++)\r\n\t\t\tif (!Translator.expr0Equals(a.args[i], b.args[i])) return false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tif (a.type.isFunctional && b.type.isFunctional) {\r\n\t\tif (!a.type.equals(b.type)) return false;\r\n\t\t\r\n\t\tvar placeholders = Array(a.type.from.length).fill().map((_, i) =>\r\n\t\t\tnew Typevar(a.type.from[i], '$'));\r\n\r\n\t\treturn Translator.expr0Equals(\r\n\t\t\tnew Funcall({\r\n\t\t\t\tfun: a,\r\n\t\t\t\targs: placeholders\r\n\t\t\t}),\r\n\t\t\tnew Funcall({\r\n\t\t\t\tfun: b,\r\n\t\t\t\targs: placeholders\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\treturn a == b;\r\n}\r\n\r\nmodule.exports = Translator;\n\n//# sourceURL=webpack://math/./src/Translator.js?");

/***/ }),

/***/ "./src/entry.js":
/*!**********************!*\
  !*** ./src/entry.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var parser = __webpack_require__(/*! ../dist/parser */ \"./dist/parser.js\");\r\nvar process = __webpack_require__(/*! ./process */ \"./src/process.js\");\r\n\r\nmodule.exports = {parser, process};\n\n//# sourceURL=webpack://math/./src/entry.js?");

/***/ }),

/***/ "./src/nodes/Fun.js":
/*!**************************!*\
  !*** ./src/nodes/Fun.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Type = __webpack_require__(/*! ./Type */ \"./src/nodes/Type.js\");\r\nvar Typevar = __webpack_require__(/*! ./Typevar */ \"./src/nodes/Typevar.js\");\r\n\r\nfunction Fun({anonymous, name, type, atomic, params, expr}) {\r\n\tthis._type = 'fun';\r\n\t\r\n\tif (!atomic && (!params || !expr))\r\n\t\tthrow Error(`Non-atomic function without params or expr`);\r\n\tthis.anonymous = anonymous;\r\n\tthis.name = anonymous ? '<anonymous>' : name;\r\n\tthis.type = type;\r\n\tthis.atomic = atomic;\r\n\tthis.params = params;\r\n\tthis.expr = expr;\r\n}\r\n\r\nFun.prototype.toString = function () {\r\n\treturn this.toIndentedString(0);\r\n};\r\n\r\nFun.prototype.toIndentedString = function (indent) {\r\n\tif (!this.expr)\r\n\t\treturn `${this.anonymous ? '' : 'ƒ ' + this.type.to + ' ' + this.name}`\r\n\t\t\t+ `(${this.params.join(', ')});`;\r\n\r\n\treturn [\r\n\t\t`${this.anonymous ? '' : 'ƒ ' + this.type.to + ' ' + this.name}`\r\n\t\t\t+ `(${this.params.join(', ')}) => (`,\r\n\t\t`\\t${this.expr.toIndentedString(indent + 1)}`,\r\n\t\t')'\r\n\t].join('\\n' + '\\t'.repeat(indent));\r\n}\r\n\r\nFun.prototype.toTeXString = function () {\r\n\tif (this.anonymous)\r\n\t\treturn `\\\\left(`\r\n\t\t\t+ (\r\n\t\t\t\tthis.params.length == 1\r\n\t\t\t\t? this.params[0].toTeXString()\r\n\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString()).join(', ')}\\\\right)`\r\n\t\t\t)\r\n\t\t\t+ `\\\\mapsto ${this.expr.toTeXString()}\\\\right)`;\r\n\r\n\tif (!this.expr)\r\n\t\treturn this.funcallToTeXString(this.params);\r\n\r\n\treturn this.funcallToTeXString(this.params)\r\n\t\t\t+ `:= ${this.expr.toTeXString()}`;\r\n}\r\n\r\nFun.prototype.funcallToTeXString = function (args) {\r\n\tvar args = args.map(arg => {\r\n\t\tif (arg instanceof Typevar) return arg.name;\r\n\t\treturn arg.toTeXString();\r\n\t});\r\n\r\n\treturn `${this.anonymous\r\n\t\t\t? '(' + this.toTeXString() + ')'\r\n\t\t\t: `${this.name.length == 1 ? this.name : `\\\\mathrm{${this.name}}`}`}`\r\n\t\t+ `(${args.join(', ')})`;\r\n}\r\n\r\nmodule.exports = Fun;\n\n//# sourceURL=webpack://math/./src/nodes/Fun.js?");

/***/ }),

/***/ "./src/nodes/Funcall.js":
/*!******************************!*\
  !*** ./src/nodes/Funcall.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Type = __webpack_require__(/*! ./Type */ \"./src/nodes/Type.js\");\r\nvar Typevar = __webpack_require__(/*! ./Typevar */ \"./src/nodes/Typevar.js\");\r\nvar Fun = __webpack_require__(/*! ./Fun */ \"./src/nodes/Fun.js\");\r\n\r\nfunction Funcall({fun, args}) {\r\n\tthis._type = 'funcall';\r\n\t\r\n\tif (!fun || !args) throw Error('Missing required argument');\r\n\tthis.fun = fun;\r\n\tthis.type = fun.type.to;\r\n\tthis.args = args;\r\n}\r\n\r\nFuncall.prototype.toString = function () {\r\n\treturn this.toIndentedString(0);\r\n}\r\n\r\nFuncall.prototype.toIndentedString = function (indent) {\r\n\tvar args = this.args.map(arg => {\r\n\t\tif (arg instanceof Typevar) return arg.name;\r\n\t\treturn arg.toIndentedString(indent + 1);\r\n\t});\r\n\r\n\tif (args.join('').length <= 50) {\r\n\t\tvar args = this.args.map(arg => {\r\n\t\t\tif (arg instanceof Typevar) return arg.name;\r\n\t\t\treturn arg.toIndentedString(indent);\r\n\t\t});\r\n\r\n\t\targs = args.join(', ');\r\n\r\n\t\treturn [\r\n\t\t\t`${this.fun.anonymous ? '(' + this.fun + ')' : this.fun.name}(`,\r\n\t\t\targs,\r\n\t\t\t`)`\r\n\t\t].join('')\r\n\t}\r\n\telse {\r\n\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\r\n\r\n\t\treturn [\r\n\t\t\t`${this.fun.anonymous ? '(' + this.fun + ')' : this.fun.name}(`,\r\n\t\t\t'\\t' + args,\r\n\t\t\t`)`\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n}\r\n\r\nFuncall.prototype.toTeXString = function () {\r\n\tif (this.fun instanceof Fun)\r\n\t\treturn this.fun.funcallToTeXString(this.args);\r\n\r\n\tvar args = this.args.map(arg => {\r\n\t\tif (arg instanceof Typevar) return arg.name;\r\n\t\treturn arg.toTeXString();\r\n\t});\r\n\r\n\treturn `${this.fun.anonymous\r\n\t\t\t? '(' + this.fun.toTeXString() + ')'\r\n\t\t\t: `${this.fun.name.length == 1 ? this.fun.name : `\\\\mathrm{${this.fun.name}}`}`}`\r\n\t\t+ `(${args.join(', ')})`;\r\n}\r\n\r\n\r\nmodule.exports = Funcall;\n\n//# sourceURL=webpack://math/./src/nodes/Funcall.js?");

/***/ }),

/***/ "./src/nodes/Link.js":
/*!***************************!*\
  !*** ./src/nodes/Link.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Type = __webpack_require__(/*! ./Type */ \"./src/nodes/Type.js\");\r\nvar Typevar = __webpack_require__(/*! ./Typevar */ \"./src/nodes/Typevar.js\");\r\nvar Fun = __webpack_require__(/*! ./Fun */ \"./src/nodes/Fun.js\");\r\nvar Funcall = __webpack_require__(/*! ./Funcall */ \"./src/nodes/Funcall.js\");\r\nvar Rule = __webpack_require__(/*! ./Rule */ \"./src/nodes/Rule.js\");\r\nvar Yield = __webpack_require__(/*! ./Yield */ \"./src/nodes/Yield.js\");\r\nvar Rulecall = __webpack_require__(/*! ./Rulecall */ \"./src/nodes/Rulecall.js\");\r\n\r\nvar Translator = __webpack_require__(/*! ../Translator */ \"./src/Translator.js\");\r\n\r\nfunction Link({name, params, rules}) {\r\n\tthis._type = 'link';\r\n\t\r\n\tthis.name = name;\r\n\tthis.params = params;\r\n\tthis.rules = rules;\r\n\r\n\t// all yields\r\n\tvar expands = this.rules.map(Translator.expand1);\r\n\r\n\tvar expr = expands.reduce((l, r) => {\r\n\t\tfor (var i = 0; i < r.left.length; i++) {\r\n\t\t\tif (Translator.expr0Equals(l.right, r.left[i])) {\r\n\t\t\t\tvar newleft = r.left.slice(0, i)\r\n\t\t\t\t\t.concat(l.left)\r\n\t\t\t\t\t.concat(r.left.slice(i + 1));\r\n\r\n\t\t\t\treturn new Yield({\r\n\t\t\t\t\tleft: newleft.map(Translator.expand0Funcalls),\r\n\t\t\t\t\tright: Translator.expand0Funcalls(r.right)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow Error(`Link ${name} failed:\\n\\n${l},\\n\\n${r}\\n`);\r\n\t});\r\n\r\n\tthis.result = expr;\r\n}\r\n\r\nLink.prototype.toString = function () {\r\n\treturn this.toIndentedString(0);\r\n}\r\n\r\nLink.prototype.toIndentedString = function (indent) {\r\n\treturn [\r\n\t\t`L ${this.name}(${this.params.join(', ')}) =>`,\r\n\t\t'\\t\\t' + this.rules\r\n\t\t\t.map(e => e.toIndentedString(indent + 2))\r\n\t\t\t.join('\\n' + '\\t'.repeat(indent + 1) + '~' + '\\n' + '\\t'.repeat(indent + 2)),\r\n\t\t`\\t=`,\r\n\t\t'\\t\\t' + this.result.toIndentedString(indent + 2)\r\n\t].join('\\n' + '\\t'.repeat(indent));\r\n}\r\n\r\nLink.prototype.toTeXString = function () {\r\n\treturn `\\\\mathsf{${this.name}}`\r\n\t\t+ `(${this.params.map(e => e.toTeXString()).join(', ')})`;\r\n}\r\n\r\nmodule.exports = Link;\n\n//# sourceURL=webpack://math/./src/nodes/Link.js?");

/***/ }),

/***/ "./src/nodes/Rule.js":
/*!***************************!*\
  !*** ./src/nodes/Rule.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Type = __webpack_require__(/*! ./Type */ \"./src/nodes/Type.js\");\r\nvar Typevar = __webpack_require__(/*! ./Typevar */ \"./src/nodes/Typevar.js\");\r\nvar Fun = __webpack_require__(/*! ./Fun */ \"./src/nodes/Fun.js\");\r\nvar Funcall = __webpack_require__(/*! ./Funcall */ \"./src/nodes/Funcall.js\");\r\n\r\nfunction Rule({name, params, expr}) {\r\n\tthis._type = 'rule';\r\n\t\r\n\tthis.name = name;\r\n\tthis.params = params;\r\n\tthis.expr = expr;\r\n}\r\n\r\nRule.prototype.toString = function () {\r\n\treturn this.toIndentedString(0);\r\n}\r\n\r\nRule.prototype.toIndentedString = function (indent) {\r\n\treturn [\r\n\t\t`R ${this.name}(${this.params.join(', ')}) =>`,\r\n\t\t`\\t${this.expr.toIndentedString(indent + 1)}`\r\n\t].join('\\n' + '\\t'.repeat(indent));\r\n}\r\n\r\nRule.prototype.toTeXString = function () {\r\n\treturn `\\\\mathsf{${this.name}}`\r\n\t\t+ `(${this.params.map(e => e.toTeXString()).join(', ')})`\r\n\t\t+ `\\\\coloneqq ` + this.expr.toTeXString();\r\n}\r\n\r\nmodule.exports = Rule;\n\n//# sourceURL=webpack://math/./src/nodes/Rule.js?");

/***/ }),

/***/ "./src/nodes/Rulecall.js":
/*!*******************************!*\
  !*** ./src/nodes/Rulecall.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Type = __webpack_require__(/*! ./Type */ \"./src/nodes/Type.js\");\r\nvar Typevar = __webpack_require__(/*! ./Typevar */ \"./src/nodes/Typevar.js\");\r\nvar Fun = __webpack_require__(/*! ./Fun */ \"./src/nodes/Fun.js\");\r\nvar Funcall = __webpack_require__(/*! ./Funcall */ \"./src/nodes/Funcall.js\");\r\nvar Rule = __webpack_require__(/*! ./Rule */ \"./src/nodes/Rule.js\");\r\n\r\nfunction Rulecall({rule, args}) {\r\n\tthis._type = 'rulecall';\r\n\t\r\n\tif (!rule || !args) throw Error('Missing required argument');\r\n\tthis.rule = rule;\r\n\tthis.args = args;\r\n}\r\n\r\nRulecall.prototype.toString = function () {\r\n\treturn this.toIndentedString(0);\r\n}\r\n\r\nRulecall.prototype.toIndentedString = function (indent) {\r\n\tvar args = this.args.map(arg => {\r\n\t\tif (arg instanceof Typevar) return arg.name;\r\n\t\treturn arg.toIndentedString(indent + 1);\r\n\t});\r\n\r\n\tif (args.join('').length <= 50) {\r\n\t\tvar args = this.args.map(arg => {\r\n\t\t\tif (arg instanceof Typevar) return arg.name;\r\n\t\t\treturn arg.toIndentedString(indent);\r\n\t\t});\r\n\r\n\t\targs = args.join(', ');\r\n\r\n\t\treturn [\r\n\t\t\t`${this.rule.name}(`,\r\n\t\t\targs,\r\n\t\t\t`)`\r\n\t\t].join('')\r\n\t}\r\n\telse {\r\n\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\r\n\r\n\t\treturn [\r\n\t\t\t`${this.rule.name}(`,\r\n\t\t\t'\\t' + args,\r\n\t\t\t`)`\r\n\t\t].join('\\n' + '\\t'.repeat(indent));\r\n\t}\r\n}\r\n\r\nRulecall.prototype.toTeXString = function () {\r\n\treturn `\\\\mathrm{${this.rule.name}}(${this.args.map(e => e.toTeXString()).join(', ')})`\r\n}\r\n\r\nmodule.exports = Rulecall;\n\n//# sourceURL=webpack://math/./src/nodes/Rulecall.js?");

/***/ }),

/***/ "./src/nodes/Type.js":
/*!***************************!*\
  !*** ./src/nodes/Type.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function Type(o) {\r\n\tthis._type = 'type';\r\n\t\r\n\tif (typeof o.functional != 'boolean')\r\n\t\tthrow Error(`typeof o.functional != 'boolean'`);\r\n\tthis.isFunctional = o.functional;\r\n\tthis.isSimple = !o.functional;\r\n\r\n\tif (!o.functional) {\r\n\t\tif (typeof o.name != 'string')\r\n\t\t\tthrow Error(`typeof o.name != 'string'`);\r\n\t\tthis.name = o.name;\r\n\t} else {\r\n\t\tif (o.from.map(f => f instanceof Type).some(e => !e))\r\n\t\t\tthrow Error(`o.from.map(f => f instanceof Type).some(e => !e)`);\r\n\t\tif (!(o.to instanceof Type))\r\n\t\t\tthrow Error(`!(o.to instanceof Type)`);\r\n\r\n\t\tthis.from = o.from;\r\n\t\tthis.to = o.to;\r\n\t}\r\n}\r\n\r\nType.prototype.toString = function () {\r\n\treturn this.toIndentedString(0);\r\n}\r\n\r\nType.prototype.toIndentedString = function (indent) {\r\n\tif (this.isSimple) return this.name;\r\n\r\n\treturn '[' + this.from.join(', ') + ' -> ' + this.to + ']';\r\n}\r\n\r\nType.prototype.toTeXString = function () {\r\n\tif (this.isSimple) return `\\\\mathrm{${this.name}}`;\r\n\r\n\treturn `\\\\left[${this.from.map(e => e.toTeXString()).join(' \\\\times ')}`\r\n\t\t+ ` \\\\to ${this.to.toTeXString()} \\\\right]`;\r\n}\r\n\r\nType.prototype.equals = function (t) {\r\n\tif (!(t instanceof Type)) return false;\r\n\r\n\tif (this.isSimple != t.isSimple) return false;\r\n\r\n\tif (this.isSimple) return this === t;\r\n\r\n\tif (this.from.length != t.from.length) return false;\r\n\r\n\tfor (var i = 0; i < this.from.length; i++)\r\n\t\tif (!this.from[i].equals(t.from[i])) return false;\r\n\r\n\treturn this.to.equals(t.to);\r\n}\r\n\r\nType.getType = function (obj) {\r\n\tif (!obj.ftype) return new Type({\r\n\t\tfunctional: false,\r\n\t\tname: obj.name\r\n\t});\r\n\r\n\treturn new Type({\r\n\t\tfunctional: true,\r\n\t\tfrom: obj.from.map(Type.getType),\r\n\t\tto: Type.getType(obj.to)\r\n\t});\r\n}\r\n\r\nmodule.exports = Type;\n\n//# sourceURL=webpack://math/./src/nodes/Type.js?");

/***/ }),

/***/ "./src/nodes/Typevar.js":
/*!******************************!*\
  !*** ./src/nodes/Typevar.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Type = __webpack_require__(/*! ./Type */ \"./src/nodes/Type.js\");\r\n\r\nfunction Typevar(type, name) {\r\n\tthis._type = 'typevar';\r\n\t\r\n\tif (!(type instanceof Type))\r\n\t\tthrow Error(`!(type instanceof Type)`);\r\n\r\n\tthis.type = type;\r\n\tthis.name = name;\r\n}\r\n\r\nTypevar.prototype.toString = function () {\r\n\treturn this.toIndentedString(0);\r\n}\r\n\r\nTypevar.prototype.toIndentedString = function () {\r\n\treturn `${this.type} ${this.name}`;\r\n}\r\n\r\nTypevar.prototype.toTeXString = function () {\r\n\tif (this.name.length == 1) {\r\n\t\treturn `${this.name}`;\r\n\t}\r\n\r\n\treturn `\\\\mathrm{${this.name}}`;\r\n}\r\n\r\nmodule.exports = Typevar;\n\n//# sourceURL=webpack://math/./src/nodes/Typevar.js?");

/***/ }),

/***/ "./src/nodes/Yield.js":
/*!****************************!*\
  !*** ./src/nodes/Yield.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Type = __webpack_require__(/*! ./Type */ \"./src/nodes/Type.js\");\r\nvar Typevar = __webpack_require__(/*! ./Typevar */ \"./src/nodes/Typevar.js\");\r\nvar Fun = __webpack_require__(/*! ./Fun */ \"./src/nodes/Fun.js\");\r\nvar Funcall = __webpack_require__(/*! ./Funcall */ \"./src/nodes/Funcall.js\");\r\nvar Rule = __webpack_require__(/*! ./Rule */ \"./src/nodes/Rule.js\");\r\n\r\nvar Translator = __webpack_require__(/*! ../Translator */ \"./src/Translator.js\");\r\n\r\nfunction Yield({left, right}) {\r\n\tthis._type = 'yield';\r\n\t\r\n\tif (!left || !right) throw Error('Missing required argument');\r\n\r\n\t// remove duplicates\r\n\tthis.left = left.reduce((l, r) => {\r\n\t\tfor (var i = 0; i < l.length; i++)\r\n\t\t\tif (Translator.expr0Equals(l[i], r)) return l;\r\n\r\n\t\treturn l.push(r), l;\r\n\t}, []);\r\n\r\n\tthis.right = right;\r\n}\r\n\r\nYield.prototype.toString = function () {\r\n\treturn this.toIndentedString(0);\r\n}\r\n\r\nYield.prototype.toIndentedString = function (indent) {\r\n\tif (!this.left.length) {\r\n\t\treturn '|- ' + (\r\n\t\t\tthis.right instanceof Typevar\r\n\t\t\t? this.right.name\r\n\t\t\t: this.right.toIndentedString(indent)\r\n\t\t);\r\n\t}\r\n\r\n\treturn [\r\n\t\tthis.left.map(e => (\r\n\t\t\te instanceof Typevar\r\n\t\t\t? e.name\r\n\t\t\t: e.toIndentedString(indent)\r\n\t\t)).join(',\\n' + '\\t'.repeat(indent)),\r\n\t\t'|-',\r\n\t\t'\\t' + (\r\n\t\t\tthis.right instanceof Typevar\r\n\t\t\t? this.right.name\r\n\t\t\t: this.right.toIndentedString(indent + 1)\r\n\t\t)\r\n\t].join('\\n' + '\\t'.repeat(indent));\r\n}\r\n\r\nYield.prototype.toTeXString = function () {\r\n\treturn `${this.left.map(e => e.toTeXString()).join(', ')} \\\\vdash ${this.right.toTeXString()}`;\r\n}\r\n\r\nmodule.exports = Yield;\n\n//# sourceURL=webpack://math/./src/nodes/Yield.js?");

/***/ }),

/***/ "./src/process.js":
/*!************************!*\
  !*** ./src/process.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Scope = __webpack_require__(/*! ./Scope */ \"./src/Scope.js\");\r\n\r\nvar Type = __webpack_require__(/*! ./nodes/Type */ \"./src/nodes/Type.js\");\r\nvar Typevar = __webpack_require__(/*! ./nodes/Typevar */ \"./src/nodes/Typevar.js\");\r\nvar Fun = __webpack_require__(/*! ./nodes/Fun */ \"./src/nodes/Fun.js\");\r\nvar Funcall = __webpack_require__(/*! ./nodes/Funcall */ \"./src/nodes/Funcall.js\");\r\nvar Rule = __webpack_require__(/*! ./nodes/Rule */ \"./src/nodes/Rule.js\");\r\nvar Yield = __webpack_require__(/*! ./nodes/Yield */ \"./src/nodes/Yield.js\");\r\nvar Rulecall = __webpack_require__(/*! ./nodes/Rulecall */ \"./src/nodes/Rulecall.js\");\r\nvar Link = __webpack_require__(/*! ./nodes/Link */ \"./src/nodes/Link.js\");\r\n\r\nvar Translator = __webpack_require__(/*! ./Translator */ \"./src/Translator.js\");\r\nTranslator.init({Type, Typevar, Fun, Funcall, Rule, Yield, Rulecall, Link});\r\n\r\nfunction Program(start) {\r\n\tthis.scope = new Scope(null);\r\n\r\n\tstart.forEach(line => {\r\n\t\tswitch (line._type) {\r\n\t\t\tcase 'typedef':\r\n\t\t\t\tthis.scope.addType(line.type);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'defv':\r\n\t\t\t\tthis.scope.addTypevar(line.typevar);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'defun':\r\n\t\t\t\tthis.scope.addFun(line);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'defrule':\r\n\t\t\t\tthis.scope.addRule(line);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'deflink':\r\n\t\t\t\tthis.scope.addLink(line);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error(`Unknown line type ${line._type}`);\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction process(start) {\r\n\tvar program = new Program(start);\r\n\treturn program;\r\n}\r\n\r\nmodule.exports = process;\n\n//# sourceURL=webpack://math/./src/process.js?");

/***/ })

/******/ });